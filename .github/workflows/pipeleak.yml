name: Wait for All Sibling Jobs

on:
  workflow_dispatch:
  push:

jobs:
  dummy:
    runs-on: ubuntu-latest
    steps:
      - name: Start dummy job
        run: |
          echo "🧪 Dummy job started. Simulating some work..."
          sleep 90
          echo "✅ Dummy job finished."

  wait-for-siblings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Wait until all jobs in sibling runs finish
        id: wait
        env:
          GH_TOKEN: ${{ github.token }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          echo "🔎 Looking for runs triggered by commit $SHA in $REPO"
          echo "⚠️ Current run id is $RUN_ID (will be excluded from wait list)"
          echo ""

          while true; do
            sibling_runs=$(gh api repos/$REPO/actions/runs \
              --paginate \
              --jq ".workflow_runs[] 
                | select(.head_sha==\"$SHA\" and .id != $RUN_ID) 
                | {id: .id, name: .name, url: .html_url}")

            if [ -z "$sibling_runs" ]; then
              echo "ℹ️ No sibling runs found for this commit."
              break
            fi

            all_done=true
            echo "📋 Checking sibling runs and their jobs:"

            for run_id in $(echo "$sibling_runs" | jq -r '.id'); do
              run_name=$(echo "$sibling_runs" | jq -r "select(.id==$run_id) | .name")
              run_url=$(echo "$sibling_runs" | jq -r "select(.id==$run_id) | .url")

              echo "🔎 Run: $run_name [$run_id] $run_url"

              jobs=$(gh api repos/$REPO/actions/runs/$run_id/jobs \
                --jq '.jobs[] | {id: .id, name: .name, status: .status, conclusion: .conclusion, url: .html_url}')

              echo "$jobs" | jq -r '"  - Job: \(.name) [\(.id)] status=\(.status) conclusion=\(.conclusion) url=\(.url)"'

              still_running=$(echo "$jobs" | jq -r 'select(.status != "completed") | .id')
              if [ -n "$still_running" ]; then
                all_done=false
              fi
            done

            if [ "$all_done" = true ]; then
              echo ""
              echo "✅ All sibling jobs in all runs are finished (success, failure, or cancelled)."
              break
            fi

            echo ""
            echo "⏳ Some jobs are still running... sleeping 30s..."
            echo ""
            sleep 30
          done

          # Collect job summary (id + status + conclusion)
          job_info=$(for run_id in $(echo "$sibling_runs" | jq -r '.id'); do
            gh api repos/$REPO/actions/runs/$run_id/jobs \
              --jq '.jobs[] | {id: .id, name: .name, status: .status, conclusion: .conclusion, url: .html_url}'
          done | jq -s .)

          echo "🎯 Final sibling job info:"
          echo "$job_info" | jq .

          # Expose job info as output (JSON string)
          job_info_json=$(echo "$job_info" | jq -c .)
          echo "job_info=$job_info_json" >> $GITHUB_OUTPUT

      - name: Run custom command
        run: |
          echo "🚀 All sibling jobs finished. Details:"
          echo '${{ steps.wait.outputs.job_info }}' | jq .