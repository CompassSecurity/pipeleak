package cmd

import (
	"github.com/CompassSecurity/pipeleak/gitlab"
	"github.com/CompassSecurity/pipeleak/helper"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
)

var runnerTags []string
var ageEncryptionPublicKey string
var repoName string
var dry bool
var shell bool

func NewRunnersExploitCmd() *cobra.Command {
	exploitCmd := &cobra.Command{
		Use:   "exploit [no options!]",
		Short: "Creates a project, generates a job per available runner tag and runs a default .gitlab-Ci.yml definition",
		Run:   Exploit,
	}

	exploitCmd.Flags().StringSliceVarP(&runnerTags, "tags", "", []string{}, "Jobs with the following tags are created")
	exploitCmd.Flags().StringVarP(&ageEncryptionPublicKey, "agePublicKey", "", "", "An age public key generated with ./age-keygen -o key.txt (repo: https://github.com/FiloSottile/age). Prints the encrypted environment variables in the output log.")
	exploitCmd.Flags().StringVarP(&repoName, "repoName", "", "pipeleak-runner-test", "The name for the created repository")
	exploitCmd.PersistentFlags().BoolVarP(&dry, "dry", "d", false, "Only genereate and print the .gitlab-ci.yml, do NOT create real jobs")
	exploitCmd.PersistentFlags().BoolVarP(&shell, "shell", "s", true, "Add an SSHX interactive shell to the jobs")

	return exploitCmd
}

func Exploit(cmd *cobra.Command, args []string) {
	helper.SetLogLevel(verbose)
	gitlab.ExploitRunners(runnerTags, dry, shell, gitlabApiToken, gitlabUrl, ageEncryptionPublicKey, repoName)
	log.Info().Msg("Done, Bye Bye üè≥Ô∏è‚Äçüåàüî•")
}
