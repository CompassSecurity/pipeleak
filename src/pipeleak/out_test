[90m2025-07-31T09:07:35Z[0m DBG Verbose log output enabled
[90m2025-07-31T09:07:35Z[0m [32mINF[0m [1mFetching projects[0m
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/niclas-zone/ci/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/adiproject/renovate-preset
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hpctoolkit/renovate.ci
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tmee/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/release-process/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/release-process/tools/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sebastienraillet/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/alasca.cloud/tarook/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joaoaugustodevelop/testerenovatebot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aaron-john/renovated-live-1d7jr1jmcmchdza
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/labsys-alviss/renovate-presets
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tnl-project/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ceda-unibas/tools/ceda-renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/garuda-linux/tools/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stejacks-gitlab/renovate-analysis-script
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mscholz-dev/pixel-renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nvnoorloos/renoveate-gitlab-reviewers-from-approval-rule
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/paganelli.f/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/logius/nldoc/ci/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/guilhemmartin/renovate-omitting-patch-version
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pdecat/renovate-repro-35123
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zavoloklom/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/egos-tech/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/frj1comp/hglkt-pipeleak-renovate-autodiscovery-poc
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xarif/base/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/louismanhnguyen1998/renovate-ci
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xarif/base/kubernetes/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/laurent.croq/test-tbc-renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/juan434/renovatech1
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/laurent.croq/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/conferences-pvulliemin/renovate/demo/renovate/renovate-configuration
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/alexrecuenco/cloned-renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/conferences-pvulliemin/renovate/demo/renovate/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dj-kanban/renovatebot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/applifting-cloud-engineering/ci-templates/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ctmc-m1/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-debian-revision
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/csym/renovate-bot-does-not-update-package-lock.json
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/justin-homelab/renovate-devbox
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/slxh/tools/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cbwinslow/home-ops
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/FantasyTeddy/Renovate-Test
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Tommichayan/renovate-testing-service
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matthewbrahms/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Sunil56B/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/swepy/cicd-templates/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-dependency-dashboardless
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/KyrakerzNetgo/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/iamcto/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-pretty-log
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-custom-managers
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dyscloud/gitlab/pipelines/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/erkules/renovate-security
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/erkules/renovate-versioning
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/simpod/renovate-repro-php
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joaoaugustodevelop/renovaterunner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/erkules/renovate-simple-go
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/personal-marioxe301/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/niclas-zone/tools/renovate-configuration
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joaoaugustodevelop/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/blauwe-knop/tools/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renoglaab/renoglaab-example/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lx-industries/renovate-ci-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stalb/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/spring-boot-soap-example/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/spring-boot-mongodb-angular-todo-app/renovate-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/e-wyckens/test-renovate-2
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pedrodavid-sandbox/renovate-project
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/op_so/projects/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Popkornium18/renovate-presets
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-oss-package-research/tools/libbehave/3.2.0/npm/re/renovate-e6609f87
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hendisantika/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matthewjackswann/renovate-graph
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate1922108/renovate-patch
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/datastelsel.nl/ci/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mkuurstra-works/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/saichethan111/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tr4200812/renovate-gitlab-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/l.stoetzel/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/carboncollins-homelab/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-research/renovate-developer-hijack
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-oss-package-research/source/npm/re/renovate-e6609f87
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jlosito/renovate-gitlab-bot
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/test3855748/renovate-runner-demo
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/homelab2.0/ansible/roles/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/konradmalik/dotnet-sdk-renovate-repro
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kamil_buczek/gradle_renovate_plugin
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate8562903/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate8562903/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-bot-config/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/chargerrobotics3786/common/renovate-configurations
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aschaber1/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kjgrahn/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/t1m01-group/t1m0-renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nachiketsrao-group/renovate-pipeline
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lx-industries/renovate-config
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/macmpf/renovate-runner
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/abdultommer/renovated-release-40e8gojmcrrjv6r
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/galactipy/renovate
[90m2025-07-31T09:07:49Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ivanfetch/renovate-test
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:semantic-release-config-check may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:semantic-release-config-check may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning, jobs:yamllint may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning, jobs:markdown may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG Fetching current self-hosted configuration from GitHub
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/matthewjackswann/renovate-graph
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/Tommichayan/renovate-testing-service
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/justin-homelab/renovate-devbox
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-custom-managers
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
variables:
  LOG_LEVEL: debug
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_PLATFORM: gitlab
  RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
  RENOVATE_REPOSITORY_CACHE: enabled
  CI_RENOVATE_IMAGE: renovate/renovate
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - build
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:latest
  script:
    - renovate
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: https://gitlab.com/api/v4
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
    RENOVATE_REPOSITORIES: Tommichayan/renovate-testing-service
    LOG_LEVEL: debug
  only:
    - schedules
    - web
    - manual
[0m
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tnl-project/renovate-config
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
variables:
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_TOKEN: "$CI_RENOVATE_GITLAB_TOKEN"
  RENOVATE_GITHUB_COM_TOKEN: "$CI_RENOVATE_GITHUB_COM_TOKEN"
  LOG_LEVEL: info
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_FILTER: '["tnl-project/*", "!tnl-project/incubator"]'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_LABELS: '["scope::dependencies"]'
  RENOVATE_DEPENDENCY_DASHBOARD_LABELS: '["scope::dependencies"]'
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - renovate
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
[0m
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-research/renovate-developer-hijack
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/FantasyTeddy/Renovate-Test
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/slxh/tools/renovate
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_AUTODISCOVER: 'true'
    RENOVATE_AUTODISCOVER_FILTER: slxh/**,!slxh/hacking/packages
    RENOVATE_REQUIRE_CONFIG: 'false'
    RENOVATE_EXTENDS: local>slxh/tools/renovate
    RENOVATE_ONBOARDING: 'false'
    RENOVATE_OSV_VULNERABILITY_ALERTS: 'true'
    RENOVATE_INCLUDE_MIRRORS: 'true'
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  variables:
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json renovate.json
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
[0m
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/hpctoolkit/renovate.ci
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41.32.3@sha256:76e734bb226dc31f135b8e518133ab8d396af3ebe5b3aadf5b5617e08daf2065
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=hpctoolkit/* --onboarding=false"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
workflow:
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED != "true"
      when: never
    - when: always
[0m
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-debian-revision
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
variables:
  LOG_LEVEL: debug
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_PLATFORM: gitlab
  RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
  RENOVATE_REPOSITORY_CACHE: enabled
  CI_RENOVATE_IMAGE: renovate/renovate
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renovate8562903/renovate-config
[90m2025-07-31T09:07:50Z[0m [32mINF[0m [1m
image: renovate/renovate:35.62
stages:
  - ".pre"
  - renovate
  - ".post"
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <your-account@organization.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
run_renovate:
  stage: renovate
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/carboncollins-homelab/renovate
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - build
  - renovate
  - ".post"
variables:
  DOCKER_IMAGE_NAME: registry.gitlab.com/$CI_PROJECT_PATH/custom-renovate
build-renovate-image:
  image: docker:latest
  stage: build
  only:
    - main
    - schedules
    - web
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -f Containerfile -t $DOCKER_IMAGE_NAME .
    - docker push $DOCKER_IMAGE_NAME
renovate:
  image: "$DOCKER_IMAGE_NAME"
  stage: renovate
  only:
    - main
    - schedules
    - web
  variables:
    LOG_LEVEL: info
    COREPACK_ENABLE: '1'
    GITHUB_COM_TOKEN: "${GITHUB_ACCESS_TOKEN}"
    RENOVATE_TOKEN: "${BOT_ACCESS_TOKEN}"
    RENOVATE_CONFIG_FILE: "./config/renovate.json"
    RENOVATE_ALLOWED_COMMANDS: corepack enable,yarn install --immutable
  script:
    - git lfs install
    - |
      if git grep -qr 'version https://git-lfs.github.com/spec' .yarn/cache; then
        echo "LFS detected. Pulling LFS files..."
        git lfs pull
      else
        echo "No LFS files detected. Skipping."
      fi
    - renovate
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lx-industries/renovate-ci-bot
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: "--autodiscover --onboarding=false --autodiscover-filter=lx-industries/**"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/spring-boot-soap-example/renovate-bot
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/logius/nldoc/ci/renovate
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate1922108/renovate-patch
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: renovate-cache
    paths:
      - renovate-cache/renovate-extracted.jsonl
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script: "# Check if Renovate needs to be executed scoped\nif [ ! -f \"renovate-cache/renovate-extracted.jsonl\" ] && { [ -n \"$HELM_PACKAGES\" ] || [ -n \"$NPM_PACKAGES\" ] || [ -n \"$PYPI_PACKAGES\" ] || [ -n \"$HEX_PACKAGES\" ]; }; then\n    mkdir -p renovate-cache\n    LOG_FORMAT=json renovate --dry-run=extract 2>/dev/null | tee -a renovate-cache/renovate-extracted.jsonl\nfi\nif [ -f \"renovate-cache/renovate-extracted.jsonl\" ] && { [ -n \"$HELM_PACKAGES\" ] || [ -n \"$NPM_PACKAGES\" ] || [ -n \"$PYPI_PACKAGES\" ] || [ -n \"$HEX_PACKAGES\" ]; }; then\n    jq -s --arg helmdeps \"$HELM_PACKAGES\" --arg npmdeps \"$NPM_PACKAGES\" --arg pypideps \"$PYPI_PACKAGES\" --arg hexdeps \"$HEX_PACKAGES\" -c '[.[] \n      | select(.packageFiles != null)\n      | select(\n          ([\n            (.packageFiles | to_entries[] | .value[]?.deps[]? | select(\n              ($helmdeps // \"\" | split(\",\") | .[]) as $h |\n              ($npmdeps // \"\" | split(\",\") | .[]) as $n |\n              ($pypideps // \"\" | split(\",\") | .[]) as $p |\n              ($hexdeps // \"\" | split(\",\") | .[]) as $x |\n              .depName // \"\" | contains($h) or contains($n) or contains($p) or contains($x)\n            ))\n          ] | length > 0)\n        )\n      | .repository\n    ] | unique' renovate-cache/renovate-extracted.jsonl > template/renovate-repos.json\nelse\n    renovate --write-discovered-repos=template/renovate-repos.json\nfi\nif [ -f \"template/renovate-repos.json\" ] && jq empty template/renovate-repos.json 2>/dev/null; then\n    # Check if the array is non-empty\n    if [ \"$(jq 'length' template/renovate-repos.json)\" -gt 0 ]; then\n        sed \"s~###RENOVATE_REPOS###~$(cat template/renovate-repos.json)~\" template/.gitlab-ci.yml > .gitlab-renovate-repos.yml\n    else\n        echo \"Repository list is empty. Using empty pipeline configuration.\"\n        cp template/.gitlab-ci-empty.yml .gitlab-renovate-repos.yml\n    fi\nelse\n    echo \"Invalid or missing renovate-repos.json. Using empty pipeline configuration.\"\n    cp template/.gitlab-ci-empty.yml .gitlab-renovate-repos.yml\nfi\n"
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: always
    - when: manual
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - renovate-cache/renovate-extracted.jsonl
      - template/renovate-repos.json
      - ".gitlab-renovate-repos.yml"
  variables:
    RENOVATE_AUTODISCOVER: 'true'
    RENOVATE_AUTODISCOVER_NAMESPACES: logius/nldoc
    RENOVATE_ONBOARDING: 'true'
renovate:repos:
  stage: deploy
  needs:
    - renovate
  inherit:
    variables: false
  trigger:
    include:
      - job: renovate
        artifact: ".gitlab-renovate-repos.yml"
[0m
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  NODE_TLS_REJECT_UNAUTHORIZED: '0'
  GIT_SSL_NO_VERIFY: '1'
  LOG_LEVEL: debug
  RENOVATE_EXTRA_FLAGS: |
    $CI_PROJECT_PATH
    renovate1922108/dev
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/niclas-zone/tools/renovate-configuration
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
".semantic-release-common":
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: publish
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: false
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - |
      if [ "$DRY_RUN" = "true" ]; then
        semantic-release --dry-run
      else
        semantic-release
      fi
release:
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: publish
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: false
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - |
      if [ "$DRY_RUN" = "true" ]; then
        semantic-release --dry-run
      else
        semantic-release
      fi
  extends: ".semantic-release-common"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^(main|master)$/"
      when: always
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
semantic-release-config-check:
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: test
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: 'true'
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - echo "Running semantic-release dry-run for configuration validation..."
    - semantic-release --dry-run --no-ci
  extends: ".semantic-release-common"
  rules:
    - when: always
  allow_failure: true
secret scanning:
  stage: test
  image:
    name: registry.gitlab.com/niclas-zone/ctr/gitleaks:8.27.2
    entrypoint:
      - ''
  script:
    - |
      if [ -n "" ]; then
        if [ -f "$CI_PROJECT_DIR/" ]; then
          CONFIG_FILE="$CI_PROJECT_DIR/"
        elif [ -f "" ]; then
          CONFIG_FILE=""
        else
          echo "Error: config_path '' not found" >&2
          exit 1
        fi
      else
        echo "Downloading default config file from https://gitlab.com/niclas-zone/ci/gitleaks/-/raw/main/configs/gitleaks.toml"
        wget -q "https://gitlab.com/niclas-zone/ci/gitleaks/-/raw/main/configs/gitleaks.toml" -O default_gitleaks.toml
        CONFIG_FILE="$CI_PROJECT_DIR/default_gitleaks.toml"
      fi
      gitleaks detect --config="$CONFIG_FILE" --verbose --redact --report-format json --report-path=gitleaks-report.json
  artifacts:
    when: always
    paths:
      - gitleaks-report.json
  cache:
    key: gitleaks-report-${CI_COMMIT_REF_SLUG}
    paths:
      - gitleaks-report.json
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
    - if: "$CI_COMMIT_BRANCH =~ /^(master|main|develop)$/"
      when: always
    - when: manual
      allow_failure: true
renovate_validate_config:
  stage: test
  image: ghcr.io/renovatebot/renovate:41.45
  script:
    - renovate-config-validator
  variables:
    LOG_LEVEL: debug
    RENOVATE_CONFIG_FILE: renovate.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - renovate.json
        - ".gitlab/renovate.json"
        - ".gitlab-ci.yml"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - renovate.json
        - ".gitlab/renovate.json"
        - ".gitlab-ci.yml"
      when: always
    - when: never
variables:
  GITLAB_TOKEN: "$BOT_TOKEN"
stages:
  - ".pre"
  - lint
  - test
  - build
  - deploy
  - publish
  - ".post"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/niclas-zone/ci/renovate
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
".semantic-release-common":
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: publish
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: false
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - |
      if [ "$DRY_RUN" = "true" ]; then
        semantic-release --dry-run
      else
        semantic-release
      fi
release:
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: publish
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: false
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - |
      if [ "$DRY_RUN" = "true" ]; then
        semantic-release --dry-run
      else
        semantic-release
      fi
  extends: ".semantic-release-common"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^(main|master)$/"
      when: always
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
semantic-release-config-check:
  image: registry.gitlab.com/niclas-zone/ctr/node:22.13.1
  stage: test
  variables:
    USE_BOT_INFOS: true
    INSTALL_GITLAB: true
    INSTALL_COMMIT_ANALYZER: true
    INSTALL_RELEASE_NOTES: true
    INSTALL_GIT: true
    INSTALL_CHANGELOG: false
    INSTALL_NPM: false
    INSTALL_RECOMMENDED: true
    DRY_RUN: 'true'
    SEMANTIC_RELEASE_VERSION: latest
    ADDITIONAL_PLUGINS: ''
    SEMREL_AUTHOR: ''
    SEMREL_EMAIL: ''
    SR_AUTHOR_NAME: Semantic Release Bot
    SR_AUTHOR_EMAIL: bot@example.dev
    SR_COMMITTER_NAME: Semantic Release Bot
    SR_COMMITTER_EMAIL: bot@example.dev
  before_script:
    - apk add --no-cache git openssh-client curl jq nodejs npm
    - export PATH=$PATH:/usr/local/bin
    - |
      if [ "$INSTALL_RECOMMENDED" = "true" ]; then
        INSTALL_GITLAB="true"
        INSTALL_COMMIT_ANALYZER="true"
        INSTALL_RELEASE_NOTES="true"
        INSTALL_GIT="true"
        INSTALL_CHANGELOG="true"
      fi
    - |
      DEFAULT_AUTHOR_NAME="$SR_AUTHOR_NAME"
      DEFAULT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
      DEFAULT_COMMITTER_NAME="$SR_COMMITTER_NAME"
      DEFAULT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
      if [ -n "$SEMREL_AUTHOR" ]; then
        SR_AUTHOR_NAME="$SEMREL_AUTHOR"
        SR_COMMITTER_NAME="$SEMREL_AUTHOR"
      fi
      if [ -n "$SEMREL_EMAIL" ]; then
        SR_AUTHOR_EMAIL="$SEMREL_EMAIL"
        SR_COMMITTER_EMAIL="$SEMREL_EMAIL"
      fi
    - |
      if [ "$USE_BOT_INFOS" = "true" ]; then
         if [ -z "$GITLAB_TOKEN" ]; then
           echo "Error: GITLAB_TOKEN is not set but use_bot_infos is enabled."
           exit 1
         fi
         BOT_INFO=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/user")
         if [ -n "$BOT_INFO" ]; then
           API_NAME=$(echo "$BOT_INFO" | jq -r '.name // empty')
           API_EMAIL=$(echo "$BOT_INFO" | jq -r '.email // empty')
           [ -n "$API_NAME" ]  && SR_AUTHOR_NAME="$API_NAME"  && SR_COMMITTER_NAME="$API_NAME"
           [ -n "$API_EMAIL" ] && SR_AUTHOR_EMAIL="$API_EMAIL" && SR_COMMITTER_EMAIL="$API_EMAIL"
         fi
         : ${SR_AUTHOR_NAME:="$DEFAULT_AUTHOR_NAME"}
         : ${SR_AUTHOR_EMAIL:="$DEFAULT_AUTHOR_EMAIL"}
         : ${SR_COMMITTER_NAME:="$DEFAULT_COMMITTER_NAME"}
         : ${SR_COMMITTER_EMAIL:="$DEFAULT_COMMITTER_EMAIL"}
      fi
    - export GIT_AUTHOR_NAME="$SR_AUTHOR_NAME"
    - export GIT_AUTHOR_EMAIL="$SR_AUTHOR_EMAIL"
    - export GIT_COMMITTER_NAME="$SR_COMMITTER_NAME"
    - export GIT_COMMITTER_EMAIL="$SR_COMMITTER_EMAIL"
    - git config --global user.name "$SR_AUTHOR_NAME"
    - git config --global user.email "$SR_AUTHOR_EMAIL"
    - |
      NPM_PACKAGES="semantic-release@${SEMANTIC_RELEASE_VERSION}"
      [ "$INSTALL_GITLAB"          = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/gitlab"
      [ "$INSTALL_COMMIT_ANALYZER" = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/commit-analyzer"
      # ensure the conventional-commits preset is present for release-notes
      [ "$INSTALL_RELEASE_NOTES"   = "true" ] && NPM_PACKAGES="$NPM_PACKAGES conventional-changelog-conventionalcommits @semantic-release/release-notes-generator"
      [ "$INSTALL_GIT"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/git"
      [ "$INSTALL_CHANGELOG"        = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/changelog"
      [ "$INSTALL_NPM"              = "true" ] && NPM_PACKAGES="$NPM_PACKAGES @semantic-release/npm"
      [ -n "$ADDITIONAL_PLUGINS"    ] && NPM_PACKAGES="$NPM_PACKAGES $ADDITIONAL_PLUGINS"
      echo "Installing npm packages: $NPM_PACKAGES"
      npm install -g $NPM_PACKAGES
  script:
    - echo "Running semantic-release dry-run for configuration validation..."
    - semantic-release --dry-run --no-ci
  extends: ".semantic-release-common"
  rules:
    - when: always
  allow_failure: true
secret scanning:
  stage: test
  image:
    name: registry.gitlab.com/niclas-zone/ctr/gitleaks:8.27.2
    entrypoint:
      - ''
  script:
    - |
      if [ -n "" ]; then
        if [ -f "$CI_PROJECT_DIR/" ]; then
          CONFIG_FILE="$CI_PROJECT_DIR/"
        elif [ -f "" ]; then
          CONFIG_FILE=""
        else
          echo "Error: config_path '' not found" >&2
          exit 1
        fi
      else
        echo "Downloading default config file from https://gitlab.com/niclas-zone/ci/gitleaks/-/raw/main/configs/gitleaks.toml"
        wget -q "https://gitlab.com/niclas-zone/ci/gitleaks/-/raw/main/configs/gitleaks.toml" -O default_gitleaks.toml
        CONFIG_FILE="$CI_PROJECT_DIR/default_gitleaks.toml"
      fi
      gitleaks detect --config="$CONFIG_FILE" --verbose --redact --report-format json --report-path=gitleaks-report.json
  artifacts:
    when: always
    paths:
      - gitleaks-report.json
  cache:
    key: gitleaks-report-${CI_COMMIT_REF_SLUG}
    paths:
      - gitleaks-report.json
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
    - if: "$CI_COMMIT_BRANCH =~ /^(master|main|develop)$/"
      when: always
    - when: manual
      allow_failure: true
renovate_validate_config:
  stage: test
  image: ghcr.io/renovatebot/renovate:41.45
  script:
    - renovate-config-validator
  variables:
    LOG_LEVEL: debug
    RENOVATE_CONFIG_FILE: renovate.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - renovate.json
        - ".gitlab/renovate.json"
        - ".gitlab-ci.yml"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - renovate.json
        - ".gitlab/renovate.json"
        - ".gitlab-ci.yml"
      when: always
    - when: never
variables:
  YAMLLINT_EXTRA_ARGS: ''
  YAMLLINT_CONFIG: ".yamllint"
  YAMLLINT_REMOTE_CONFIG: https://gitlab.com/niclas-zone/tools/internal/-/raw/main/configs/yamllint.yml
  RUMDL_EXTRA_ARGS: "--disable MD013"
  RUMDL_CONFIG: ''
  RUMDL_REMOTE_CONFIG: https://gitlab.com/niclas-zone/tools/internal/-/raw/main/configs/rumdl.toml
  GITLAB_TOKEN: "$BOT_TOKEN"
yamllint:
  stage: lint
  image: registry.gitlab.com/niclas-zone/ctr/yamllint:1.37.1
  script:
    - |
      if [[ -n "$YAMLLINT_REMOTE_CONFIG" ]]; then
        echo "Using remote yamllint config from $YAMLLINT_REMOTE_CONFIG"
        DOWNLOAD_PATH=".remote-yamllint-config"

        curl -s -L --connect-timeout 10 -o "$DOWNLOAD_PATH" \
          -H "User-Agent: Mozilla/5.0 (X11; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0" \
          "$YAMLLINT_REMOTE_CONFIG"

        # If download successful, use the downloaded file
        if [[ -f "$DOWNLOAD_PATH" ]] && [[ -s "$DOWNLOAD_PATH" ]]; then
          echo "Downloaded config file successfully"
          YAMLLINT_CONFIG="$DOWNLOAD_PATH"
        else
          echo "Failed to download remote config, falling back to local config"
          rm -f "$DOWNLOAD_PATH" 2>/dev/null
        fi
      fi

      # Verify the config file exists
      if [[ ! -f "$YAMLLINT_CONFIG" ]]; then
        echo "Error: Config file '$YAMLLINT_CONFIG' not found"
        exit 1
      fi

      echo "Using yamllint config: $YAMLLINT_CONFIG"
    - yamllint -f parsable $YAMLLINT_EXTRA_ARGS -c "$YAMLLINT_CONFIG" .
  rules:
    - when: always
markdown:
  stage: lint
  image: registry.gitlab.com/niclas-zone/ctr/rumdl:0.0.102
  script:
    - |
      if [[ -n "$RUMDL_REMOTE_CONFIG" ]]; then
        echo "Using remote rumdl config from $RUMDL_REMOTE_CONFIG"
        DOWNLOAD_PATH=".remote-rumdl-config"

        curl -s -L --connect-timeout 10 -o "$DOWNLOAD_PATH" \
          -H "User-Agent: Mozilla/5.0 (X11; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0" \
          "$RUMDL_REMOTE_CONFIG"

        # If download successful, use the downloaded file
        if [[ -f "$DOWNLOAD_PATH" ]] && [[ -s "$DOWNLOAD_PATH" ]]; then
          echo "Downloaded config file successfully"
          RUMDL_CONFIG="$DOWNLOAD_PATH"
        else
          echo "Failed to download remote config, falling back to local config"
          rm -f "$DOWNLOAD_PATH" 2>/dev/null
        fi
      fi

      # Check if we have a config file to use
      if [[ -n "$RUMDL_CONFIG" ]]; then
        # Verify the config file exists
        if [[ ! -f "$RUMDL_CONFIG" ]]; then
          echo "Error: Config file '$RUMDL_CONFIG' not found"
          exit 1
        fi
        echo "Using rumdl config: $RUMDL_CONFIG"
        rumdl check --config "$RUMDL_CONFIG" $RUMDL_EXTRA_ARGS .
      else
        echo "No config file specified, using rumdl defaults"
        rumdl check $RUMDL_EXTRA_ARGS .
      fi
  rules:
    - when: always
stages:
  - ".pre"
  - lint
  - build
  - test
  - publish
  - deploy
  - ".post"
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/mkuurstra-works/renovate
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
lint-markdown:
  image:
    entrypoint:
      - ''
    name: davidanson/markdownlint-cli2:v0.18.1
  stage: test
  variables:
    FORCE_COLOR: 1
    MARKDOWN_GLOB: '"**/*.md" "#tests"'
  script:
    - |
      echo "Checking for .markdownlint-cli2.jsonc"
      # Create default config file if it doesn't exist
      if [ ! -f .markdownlint-cli2.jsonc ]; then
        echo ".markdownlint-cli2.jsonc NOT found, using central ruleset"
        cat > .markdownlint-cli2.jsonc <<EOF
      {
        "$schema": "https://raw.githubusercontent.com/DavidAnson/markdownlint-cli2/main/schema/markdownlint-cli2-config-schema.json",
        "config": {
          // https://github.com/DavidAnson/markdownlint/tree/main
          "default": true,
          "MD004": { // ul-style - Unordered list style
            "style": "dash"
          },
          "MD013": false, // line-length - Line length
          "MD029": {
            "style": "one"
          }
        }
      }
      EOF
      else
        echo ".markdownlint-cli2.jsonc FOUND, using custom ruleset"
      fi
      echo "Using the following ruleset:"
      cat .markdownlint-cli2.jsonc
    - |
      if [ '["markdownlint-cli2-formatter-codequality", "markdownlint-cli2-formatter-pretty"]' != "[]" ] && [ ! -f .markdownlint-cli2.mjs ]; then
        echo 'let options={outputFormatters:["markdownlint-cli2-formatter-codequality", "markdownlint-cli2-formatter-pretty"].map((f)=>[f])};export default options;' > .markdownlint-cli2.mjs
      fi
    - eval "markdownlint-cli2 $MARKDOWN_GLOB" || exitcode="$?"
    - |
      # handle markdownlint failures
      if [ "${exitcode:-0}" -eq 1 ] && ! true; then
        echo "Lint found, but fail_on_findings: false given, returning success";
        exit 0;
      else
        exit ${exitcode:-0};
      fi
  allow_failure: false
  artifacts:
    when: always
    paths:
      - markdownlint-cli2-codequality.json
    reports:
      codequality:
        - markdownlint-cli2-codequality.json
  rules:
    - when: always
      changes:
        - "**/*.md"
        - ".gitlab-ci.yml"
".my-workflow:main":
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_COMMIT_TAG =~ /^v[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9-\\.]+)?$/"
".my-workflow:mr":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
".my-workflow:release":
  rules:
    - if: "$CI_COMMIT_TAG =~ /^v[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9-\\.]+)?$/"
".my-workflow:all":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_COMMIT_TAG =~ /^v[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9-\\.]+)?$/"
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_COMMIT_TAG =~ /^v[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9-\\.]+)?$/"
my-op-secrets:
  stage: ".pre"
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        OP_SERVICE_ACCOUNT_TOKEN: "$OP_SERVICE_ACCOUNT_TOKEN_PROTECTED"
        ENVIRONMENT_TEMPLATE: ".env.main"
    - when: always
      variables:
        OP_SERVICE_ACCOUNT_TOKEN: "$OP_SERVICE_ACCOUNT_TOKEN_UNPROTECTED"
        ENVIRONMENT_TEMPLATE: ".env.mr"
  image: registry.gitlab.com/mkuurstra-works/containers/op:v0.0.1
  script:
    - op inject -i ${ENVIRONMENT_TEMPLATE} -o $CI_PROJECT_DIR/.env
    - echo "OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}" >> $CI_PROJECT_DIR/.env
  artifacts:
    reports:
      dotenv:
        - "$CI_PROJECT_DIR/.env"
    paths:
      - secrets/
    access: none
    expire_in: 30 mins
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["gitlab>mkuurstra-works/renovate"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41.40.0
  RENOVATE_CONFIG_FILE: config.js
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  variables:
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
default:
  tags:
    - docker
renovate-config-validator-default-json:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  variables:
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
    RENOVATE_CONFIG_FILE: default.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  extends:
    - renovate-config-validator
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/Sunil56B/renovate
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/egos-tech/renovate-config
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  FORCE_COLOR: 3
  LOG_FILE: renovate-log.json
  LOG_FILE_LEVEL: debug
  LOG_LEVEL:
    description: Set the log level for the output
    value: info
    options:
      - info
      - debug
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json renovate.json
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_EXTRA_FLAGS:
    description: Extra renovate flags. If you trigger this pipeline via web, you **MUST** change the default value! E.g. `egos-tech/priv/swarm/monitoring`
    value: "--autodiscover"
  RENOVATE_FORK_PROCESSING: enabled
  RENOVATE_LOG_FILE: "$LOG_FILE"
  RENOVATE_LOG_FILE_LEVEL: "$LOG_FILE_LEVEL"
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_PLATFORM: gitlab
  RENOVATE_REPOSITORY_CACHE: disabled
stages:
  - ".pre"
  - test
  - deploy
  - ".post"
".renovate":
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
".stage:test":
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: test
  extends:
    - ".renovate"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
".stage:deploy":
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".renovate"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
test:renovate:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  stage: test
  extends:
    - ".stage:test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    LOG_LEVEL: debug
renovate:dry-run:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: test
  extends:
    - ".stage:test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    RENOVATE_AUTODISCOVER_NAMESPACES: '["egos-tech"]'
    RENOVATE_AUTODISCOVER_FILTER: '["!/egos-tech\/(pipelines|priv\/.*)/"]'
    RENOVATE_DRY_RUN: full
    LOG_LEVEL: debug
manual:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $RENOVATE_EXTRA_FLAGS == "--autodiscover"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  variables:
    RENOVATE_AUTODISCOVER: 'false'
egos-tech:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    RENOVATE_AUTODISCOVER_NAMESPACES: '["egos-tech"]'
    RENOVATE_AUTODISCOVER_FILTER: '["!/egos-tech\/(swarm|pipelines|priv\/.*)/"]'
egos-tech/pipelines:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    RENOVATE_AUTODISCOVER: 'false'
    RENOVATE_EXTRA_FLAGS: egos-tech/pipelines egos-tech/priv/swarm/pipeline
egos-tech/priv:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    RENOVATE_AUTODISCOVER_NAMESPACES: '["egos-tech/priv"]'
    RENOVATE_AUTODISCOVER_FILTER: '["!/egos-tech\/priv\/swarm\/.*/"]'
egos-tech/priv/swarm:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    RENOVATE_AUTODISCOVER_NAMESPACES: '["egos-tech/priv/swarm"]'
    RENOVATE_AUTODISCOVER_FILTER: '["!/egos-tech\/priv\/swarm\/pipeline/"]'
egos-tech/swarm:
  artifacts:
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
    when: always
  image: ghcr.io/renovatebot/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  stage: deploy
  extends:
    - ".stage:deploy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    RENOVATE_AUTODISCOVER_NAMESPACES: '["egos-tech/swarm"]'
workflow:
  name: "($CI_PIPELINE_SOURCE) $CI_COMMIT_TITLE"
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/konradmalik/dotnet-sdk-renovate-repro
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: "$CI_COMMIT_BRANCH"
      when: manual
      allow_failure: true
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    LOG_LEVEL: debug
    RENOVATE_EXTRA_FLAGS: konradmalik/dotnet-sdk-renovate-repro
    RENOVATE_DETECT_HOST_RULES_FROM_ENV: 'true'
    DOCKER_REGISTRY_GITLAB_CEREBREDEV_COM_USERNAME: "$CI_REGISTRY_USER"
    DOCKER_REGISTRY_GITLAB_CEREBREDEV_COM_PASSWORD: "$CI_REGISTRY_PASSWORD"
  needs: []
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/swepy/cicd-templates/renovate
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/release-process/renovate-config
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - shopt -s globstar nullglob
    - renovate-config-validator **/*.json
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/laurent.croq/renovate
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/simpod/renovate-repro-php
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
Renovate:
  image:
    name: ghcr.io/renovatebot/renovate:40
  variables:
    LOG_LEVEL: debug
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORY_CACHE: disabled
    RENOVATE_AUTODISCOVER_FILTER: "/renovate-repro/"
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter='/renovate/'"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/adiproject/renovate-preset
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mdisabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/xarif/base/kubernetes/renovate
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/guilhemmartin/renovate-omitting-patch-version
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  RENOVATE_IMAGE: docker.io/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_AUTODISCOVER: true
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_REGISTRY_ALIASES: '{"$$CI_SERVER_FQDN": "$CI_SERVER_FQDN"}'
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_ONBOARDING_CONFIG: "{\n  \"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\",\n    \":dependencyDashboard\"\n  ],\n \"labels\": [\n   \"dependencies\"\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?_IMAGE:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    },\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?image:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    }\n  ] \n}"
  TBC_TRACKING_IMAGE: registry.gitlab.com/to-be-continuous/tools/tracking:master
  DOCKER_HADOLINT_IMAGE: registry.hub.docker.com/hadolint/hadolint:latest-alpine
  DOCKER_IMAGE: registry.hub.docker.com/library/docker:latest
  DOCKER_DIND_IMAGE: registry.hub.docker.com/library/docker:dind
  DOCKER_KANIKO_IMAGE: gcr.io/kaniko-project/executor:debug
  DOCKER_SKOPEO_IMAGE: quay.io/skopeo/stable:latest
  DOCKER_BUILDAH_IMAGE: quay.io/buildah/stable:latest
  DOCKER_FILE: Dockerfile
  DOCKER_CONFIG_FILE: ".docker/config.json"
  DOCKER_HEALTHCHECK_TIMEOUT: 60
  DOCKER_SNAPSHOT_IMAGE: "$CI_REGISTRY_IMAGE/snapshot:$CI_COMMIT_REF_SLUG"
  DOCKER_RELEASE_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
  DOCKER_TRIVY_IMAGE: registry.hub.docker.com/aquasec/trivy:latest
  DOCKER_TRIVY_ARGS: "--ignore-unfixed --pkg-types os --exit-on-eol 1 --detection-priority comprehensive"
  DOCKER_TRIVY_DB_REPOSITORY: ''
  DOCKER_TRIVY_JAVA_DB_REPOSITORY: ''
  DOCKER_SBOM_IMAGE: registry.hub.docker.com/anchore/syft:debug
  DOCKER_SBOM_OPTS: "--override-default-catalogers rpm-db-cataloger,alpm-db-cataloger,apk-db-cataloger,dpkg-db-cataloger,portage-cataloger"
  DOCKER_PROD_PUBLISH_STRATEGY: manual
  DOCKER_RELEASE_EXTRA_TAGS_PATTERN: "^v?(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)\\.(?P<patch>[0-9]+)(?P<suffix>(?P<prerelease>-[0-9A-Za-z-\\.]+)?(?P<build>\\+[0-9A-Za-z-\\.]+)?)$"
  PROD_REF: "/^(master|main)$/"
  INTEG_REF: "/^develop$/"
  DOCKER_METADATA: --label "org.opencontainers.image.url=${CI_PROJECT_URL}" --label "org.opencontainers.image.source=${CI_PROJECT_URL}" --label "org.opencontainers.image.title=${CI_PROJECT_PATH}" --label "org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME}" --label "org.opencontainers.image.revision=${CI_COMMIT_SHA}" --label "org.opencontainers.image.created=${CI_JOB_STARTED_AT}"
  DOCKER_BUILD_TOOL: kaniko
  DOCKER_CONTEXT_PATH: ''
  DOCKER_RELEASE_EXTRA_TAGS: ''
  DOCKER_BUILD_ARGS: ''
  DOCKER_BUILD_CACHE_DISABLED: false
  DOCKER_PUBLISH_ARGS: ''
  DOCKER_SEMREL_RELEASE_DISABLED: false
  DOCKER_REGISTRY_MIRROR: ''
  CONTAINER_REGISTRIES_CONFIG_FILE: ''
  KANIKO_SNAPSHOT_IMAGE_CACHE: ''
  DOCKER_PUSH_ARGS: ''
  DOCKER_HADOLINT_DISABLED: false
  DOCKER_HADOLINT_ARGS: ''
  DOCKER_HEALTHCHECK_DISABLED: false
  DOCKER_HEALTHCHECK_OPTIONS: ''
  DOCKER_HEALTHCHECK_CONTAINER_ARGS: ''
  DOCKER_TRIVY_DISABLED: false
  DOCKER_TRIVY_ADDR: ''
  DOCKER_SBOM_DISABLED: false
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  unscope_variables
  eval_all_secrets

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
".test-policy":
  rules:
    - if: "$CI_COMMIT_TAG"
    - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
    - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
      when: manual
      allow_failure: true
    - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
      allow_failure: true
    - when: on_success
".docker-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function fail() {
    log_error "$*"
    exit 1
  }

  function install_custom_ca_certs() {
    certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
    if [[ -z "$certs" ]]
    then
      return
    fi
    # import in system for regular linux (Ubuntu, Debian) image
    if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
    then
      echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
      log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
    # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
    elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
    then
      echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
      log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
    # kaniko image : specific directory for ca certificates, no standard import tool
    elif [[ -d /kaniko/ssl/certs ]]
    then
      echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
      log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    # create the /tmp directory (it is required by the mktemp command)
    mkdir -p /tmp
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  # simple JSON merge (used in Skopeo job only)
  function merge_json() {
    python3 -c "import json,sys
  def merge(a,b):
    for key in b:
      if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
      else: a[key]=b[key]
    return a
  def mergef(*files):
    res={}
    for f in files:
      with open(f,'r') as rd: res=merge(res,json.load(rd))
    return res
  print(json.dumps(mergef(*sys.argv[1:])))" "$@"
  }

  function wait_for_docker_daemon() {
    log_info "Wait for Docker daemon..."
    # shellcheck disable=SC2034
    for i in $(seq 1 30); do
      if ! docker info &> /dev/null; then
        log_info "... not responding: wait"
        sleep 2
      else
        log_info "... ready: continue"
        return
      fi
    done
    fail "... timeout reached: halt"
  }

  function awkenvsubst() {
    # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
    awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
  }

  function configure_registries_auth() {
    docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
    docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
    export docker_snapshot_authent_token
    export docker_snapshot_registry_host

    docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
    docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
    export docker_release_authent_token
    export docker_release_registry_host

    if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
    then
      docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
      # shellcheck disable=SC2001
      docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
      export docker_mirror_authent_token
      export docker_mirror_registry_host

      docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
    fi

    docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
    docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

    # Create the configuration file for Docker and Kaniko
    BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
    mkdir -p "$BUILDTOOL_HOME/.docker"
    if [ -f "${DOCKER_CONFIG_FILE}" ]
    then
      awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
    else
      echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
    fi

    # Create the configuration files for Skopeo
    if command -v skopeo > /dev/null
    then
      mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
      # use same auth config as the build tool for the source image
      cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
      # use a merged auth config for the destination image
      echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
      merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
    fi

    log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
  }

  # autodetects whether there is an hadolint config file
  function autoconfig_hadolint() {
    # If present, import hadolint config found inside the git repository
    _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
    if [[ -f "$_cfg" ]]
    then
      log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
      export hadolint_config_opts="--config $_cfg"
    else
      log_info "No Hadolint config found: use default"
    fi
  }

  function create_kaniko_cache_dir() {
    # create cache directory if needed
    mkdir -p "${CI_PROJECT_DIR}/.cache"
  }

  function init_workspace() {
    install_custom_ca_certs
    unscope_variables
    eval_all_secrets
    configure_registries_auth
  }

  # evaluate the context path
  function docker_context_path() {
    if [[ "$DOCKER_CONTEXT_PATH" ]]
    then
      # $DOCKER_CONTEXT_PATH is explicit: use it
      echo "$DOCKER_CONTEXT_PATH"
    else
      # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
      dirname "$DOCKER_FILE"
    fi
  }

  function run_build_kaniko() {
    docker_image=$1
    if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
      kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
      kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
      log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
    fi
    shift
    if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
    then
      # shellcheck disable=SC2001,SC2086
      kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
    fi
    log_info "Build & deploy image $docker_image"
    log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
    # shellcheck disable=SC2086
    echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
  }

  # Used by containers tools like buildah, skopeo.
  function configure_containers_registries() {
    if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
    then
      BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
      mkdir -p "$BUILDTOOL_HOME/.config/containers"
      echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
      log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
    fi
  }

  function publish_extra_tags() {
    if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
    then
      return
    fi
    # check if tag matches pattern
    # shellcheck disable=SC2154
    matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
    if [[ "$matches" ]]
    then
      # apply extra tags substitution
      extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
      log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
      for extra_tag in $extra_tags
      do
        log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
        # shellcheck disable=SC2086,SC2154
        skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
      done
    else
      log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
    fi
  }

  init_workspace

  # ENDSCRIPT
".docker-base":
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
".docker-kaniko-base":
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
    - create_kaniko_cache_dir
    - |
      log_info "Kaniko version:"
      /kaniko/executor version
  extends: ".docker-base"
  image:
    name: "$DOCKER_KANIKO_IMAGE"
    entrypoint:
      - ''
  variables:
    BUILDTOOL_HOME: "/kaniko"
  cache:
    key: "$CI_COMMIT_REF_SLUG-docker"
    paths:
      - ".cache"
".docker-dind-base":
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
    - name: "$DOCKER_DIND_IMAGE"
      alias: docker
      command:
        - "/bin/sh"
        - "-c"
        - |
          if [[ -n "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" ]]; then echo "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt; fi || exit
          if [[ -n "${_TRACE}" ]]; then echo "Here is the list of all CAs that are trusted by the Docker daemon:"; cat /etc/ssl/certs/ca-certificates.crt; fi
          if [[ -n "${DOCKER_REGISTRY_MIRROR}" ]]; then dockerd-entrypoint.sh --registry-mirror ${DOCKER_REGISTRY_MIRROR}; else dockerd-entrypoint.sh; fi || exit
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
    - if ! wait_for_docker_daemon; then fail "Docker-in-Docker is not enabled on this runner. Either use a Docker-in-Docker capable runner, or disable this job by setting \$DOCKER_BUILD_TOOL to a different value"; fi
    - |
      log_info "Docker version:"
      docker version
  extends: ".docker-base"
  image: "$DOCKER_IMAGE"
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    _DEFAULT_CA_CERTS: "${DEFAULT_CA_CERTS}"
    _CUSTOM_CA_CERTS: "${CUSTOM_CA_CERTS}"
    _TRACE: "${TRACE}"
docker-hadolint:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
  image:
    name: "$DOCKER_HADOLINT_IMAGE"
    entrypoint:
      - ''
  extends: ".docker-base"
  stage: build
  dependencies: []
  script:
    - autoconfig_hadolint
    - |
      log_info "Hadolint version:"
      hadolint -v
    - mkdir -p -m 777 reports
    - log_info "Scanning ${DOCKER_FILE}..."
    - dockerfile_hash=$(echo "$DOCKER_FILE" | md5sum | cut -d" " -f1)
    - hadolint --no-fail -f gitlab_codeclimate $DOCKER_HADOLINT_ARGS $hadolint_config_opts "$DOCKER_FILE" > "reports/docker-hadolint-${dockerfile_hash}.codeclimate.json"
    - |
      if [[ "$DEFECTDOJO_HADOLINT_REPORTS" ]]
      then
        hadolint --no-fail -f json $DOCKER_HADOLINT_ARGS $hadolint_config_opts "$DOCKER_FILE" > "reports/docker-hadolint-${dockerfile_hash}.native.json"
      fi
    - hadolint $DOCKER_HADOLINT_ARGS $hadolint_config_opts "$DOCKER_FILE"
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    access: developer
    when: always
    reports:
      codequality:
        - reports/docker-hadolint-*.codeclimate.json
    paths:
      - reports/docker-hadolint-*
  rules:
    - if: $DOCKER_HADOLINT_DISABLED == "true"
      when: never
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
docker-kaniko-build:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
    - create_kaniko_cache_dir
    - |
      log_info "Kaniko version:"
      /kaniko/executor version
  extends: ".docker-kaniko-base"
  image:
    name: "$DOCKER_KANIKO_IMAGE"
    entrypoint:
      - ''
  variables:
    BUILDTOOL_HOME: "/kaniko"
  cache:
    key: "$CI_COMMIT_REF_SLUG-docker"
    paths:
      - ".cache"
  stage: package-build
  script:
    - run_build_kaniko "$DOCKER_SNAPSHOT_IMAGE" --digest-file .img-digest.txt --build-arg http_proxy="$http_proxy" --build-arg https_proxy="$https_proxy" --build-arg no_proxy="$no_proxy"
    - docker_digest=$(cat .img-digest.txt)
    - docker_repository=${DOCKER_SNAPSHOT_IMAGE%:*}
    - docker_tag=${DOCKER_SNAPSHOT_IMAGE##*:}
    - |
      {
        echo "docker_image=$DOCKER_SNAPSHOT_IMAGE"
        echo "docker_image_digest=$docker_repository@$docker_digest"
        echo "docker_repository=$docker_repository"
        echo "docker_tag=$docker_tag"
        echo "docker_digest=$docker_digest"
      } > docker.env
  artifacts:
    reports:
      dotenv:
        - docker.env
  rules:
    - if: $DOCKER_BUILD_TOOL == "kaniko"
docker-dind-build:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
    - name: "$DOCKER_DIND_IMAGE"
      alias: docker
      command:
        - "/bin/sh"
        - "-c"
        - |
          if [[ -n "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" ]]; then echo "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt; fi || exit
          if [[ -n "${_TRACE}" ]]; then echo "Here is the list of all CAs that are trusted by the Docker daemon:"; cat /etc/ssl/certs/ca-certificates.crt; fi
          if [[ -n "${DOCKER_REGISTRY_MIRROR}" ]]; then dockerd-entrypoint.sh --registry-mirror ${DOCKER_REGISTRY_MIRROR}; else dockerd-entrypoint.sh; fi || exit
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
    - if ! wait_for_docker_daemon; then fail "Docker-in-Docker is not enabled on this runner. Either use a Docker-in-Docker capable runner, or disable this job by setting \$DOCKER_BUILD_TOOL to a different value"; fi
    - |
      log_info "Docker version:"
      docker version
  extends: ".docker-dind-base"
  image: "$DOCKER_IMAGE"
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    _DEFAULT_CA_CERTS: "${DEFAULT_CA_CERTS}"
    _CUSTOM_CA_CERTS: "${CUSTOM_CA_CERTS}"
    _TRACE: "${TRACE}"
  stage: package-build
  script:
    - docker pull $DOCKER_SNAPSHOT_IMAGE || true
    - |
      if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
        dind_cache_args="--cache-from $DOCKER_SNAPSHOT_IMAGE"
        log_info "Build cache enabled; CLI options: ${dind_cache_args}"
      fi
    - echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$(docker_context_path)" | xargs docker build --file "$DOCKER_FILE" ${dind_cache_args} --tag $DOCKER_SNAPSHOT_IMAGE --build-arg http_proxy="$http_proxy" --build-arg https_proxy="$https_proxy" --build-arg no_proxy="$no_proxy"
    - docker push $DOCKER_PUSH_ARGS $DOCKER_SNAPSHOT_IMAGE
    - docker history $DOCKER_SNAPSHOT_IMAGE
    - docker images --digests $DOCKER_SNAPSHOT_IMAGE
    - image_with_digest=$(docker inspect --format '{{index .RepoDigests 0}}' "$DOCKER_SNAPSHOT_IMAGE")
    - docker_digest=${image_with_digest##*@}
    - docker_repository=${DOCKER_SNAPSHOT_IMAGE%:*}
    - docker_tag=${DOCKER_SNAPSHOT_IMAGE##*:}
    - |
      {
        echo "docker_image=$DOCKER_SNAPSHOT_IMAGE"
        echo "docker_image_digest=$docker_repository@$docker_digest"
        echo "docker_repository=$docker_repository"
        echo "docker_tag=$docker_tag"
        echo "docker_digest=$docker_digest"
      } > docker.env
  artifacts:
    reports:
      dotenv:
        - docker.env
  rules:
    - if: $DOCKER_BUILD_TOOL == "dind"
docker-buildah-build:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
  extends: ".docker-base"
  stage: package-build
  image: "$DOCKER_BUILDAH_IMAGE"
  script:
    - configure_containers_registries
    - |
      if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          buildah_build_cache="${DOCKER_SNAPSHOT_IMAGE%:*}/cache"
          buildah_cache_args="--layers --cache-from $buildah_build_cache --cache-to $buildah_build_cache"
          log_info "Build cache enabled; CLI options: ${buildah_cache_args}"
      fi
    - |
      log_info "Buildah version:"
      buildah version
    - echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$(docker_context_path)" | xargs buildah build --file "$DOCKER_FILE" --tag $DOCKER_SNAPSHOT_IMAGE $buildah_cache_args --build-arg http_proxy="$http_proxy" --build-arg https_proxy="$https_proxy" --build-arg no_proxy="$no_proxy"
    - buildah push --digestfile .img-digest.txt $DOCKER_PUSH_ARGS "$DOCKER_SNAPSHOT_IMAGE"
    - cat .img-digest.txt
    - docker_digest=$(cat .img-digest.txt)
    - docker_repository=${DOCKER_SNAPSHOT_IMAGE%:*}
    - docker_tag=${DOCKER_SNAPSHOT_IMAGE##*:}
    - |
      {
        echo "docker_image=$DOCKER_SNAPSHOT_IMAGE"
        echo "docker_image_digest=$docker_repository@$docker_digest"
        echo "docker_repository=$docker_repository"
        echo "docker_tag=$docker_tag"
        echo "docker_digest=$docker_digest"
      } > docker.env
  artifacts:
    reports:
      dotenv:
        - docker.env
  rules:
    - if: $DOCKER_BUILD_TOOL == "buildah"
docker-healthcheck:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
    - name: "$DOCKER_DIND_IMAGE"
      alias: docker
      command:
        - "/bin/sh"
        - "-c"
        - |
          if [[ -n "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" ]]; then echo "${_CUSTOM_CA_CERTS:-$_DEFAULT_CA_CERTS}" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt; fi || exit
          if [[ -n "${_TRACE}" ]]; then echo "Here is the list of all CAs that are trusted by the Docker daemon:"; cat /etc/ssl/certs/ca-certificates.crt; fi
          if [[ -n "${DOCKER_REGISTRY_MIRROR}" ]]; then dockerd-entrypoint.sh --registry-mirror ${DOCKER_REGISTRY_MIRROR}; else dockerd-entrypoint.sh; fi || exit
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
    - if ! wait_for_docker_daemon; then fail "Docker-in-Docker is not enabled on this runner. Either use a Docker-in-Docker capable runner, or disable this job by setting \$DOCKER_BUILD_TOOL to a different value"; fi
    - |
      log_info "Docker version:"
      docker version
  extends: ".docker-dind-base"
  image: "$DOCKER_IMAGE"
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    _DEFAULT_CA_CERTS: "${DEFAULT_CA_CERTS}"
    _CUSTOM_CA_CERTS: "${CUSTOM_CA_CERTS}"
    _TRACE: "${TRACE}"
    GIT_STRATEGY: none
  stage: package-test
  script:
    - log_info "Healthchecking ${DOCKER_SNAPSHOT_IMAGE}..."
    - |
      # Test by internal health_check (Recommended way, more info https://docs.docker.com/engine/reference/builder/#healthcheck)
      # This looks complicated but you normally don't have to touch this...
      function unexpected_error() {
        log_error "Unexpected error"
        if [ -n "$container_id" ]
        then
          docker logs $container_id
        fi
        exit 1
      }
      docker pull $DOCKER_SNAPSHOT_IMAGE
      timestamp_from=$(( $(date +%s) - 1 ))
      container_id=$(docker run -d $DOCKER_HEALTHCHECK_OPTIONS $DOCKER_SNAPSHOT_IMAGE $DOCKER_HEALTHCHECK_CONTAINER_ARGS)
      log_info "container_id=$container_id"
      waiting_time=0
      healthcheck_result="timeout"
      while [ $waiting_time -lt $DOCKER_HEALTHCHECK_TIMEOUT -a "$healthcheck_result" != "healthy" -a "$healthcheck_result" != "dead"  ]
      do
        waiting_time=$(( $waiting_time + 5))
        timestamp_to=$(( $timestamp_from + $waiting_time ))
        log_info "Testing events between $timestamp_from and $timestamp_to ..."
        full_result=$(docker events --filter container=$container_id --format="{{.Status}}" --since $timestamp_from --until $timestamp_to) || unexpected_error
        if echo "$full_result" | grep ': healthy$' >/dev/null
        then
          healthcheck_result="healthy"
        elif echo "$full_result" | grep ': unhealthy$' >/dev/null
        then
          log_warn "\\e[93mContainer is unhealthy\\e[0m"
          healthcheck_result="unhealthy"
        elif echo "$full_result" | grep '^die$' >/dev/null
        then
          log_error "Container died"
          healthcheck_result="dead"
        else
          healthcheck_result="timeout"
        fi
      done
      log_info "Container logs:"
      docker logs $container_id
      log_info "Docker inspect:"
      docker inspect $container_id
      if [ "$healthcheck_result" == "healthy" ]
      then
        log_info "Container is healthy"
      else
        log_error "HealthCheck test error, reason: $healthcheck_result"
        echo -e "Full logs:\n$full_result"
        exit 1
      fi
  rules:
    - if: $DOCKER_HEALTHCHECK_DISABLED == "true"
      when: never
    - if: $DOCKER_BUILD_TOOL != "dind"
      when: never
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
docker-trivy:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
  extends: ".docker-base"
  image:
    name: "$DOCKER_TRIVY_IMAGE"
    entrypoint:
      - ''
  stage: package-test
  variables:
    TRIVY_CACHE_DIR: ".trivycache/"
  script:
    - log_info "Scanning vulnerabilities from ${DOCKER_SNAPSHOT_IMAGE}..."
    - |
      log_info "Trivy version:"
      trivy version
    - |
      # cache cleanup is needed when scanning images with the same tags, it does not remove the database
      trivy clean --scan-cache || trivy image --clear-cache
    - |
      export TRIVY_USERNAME=${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}
      export TRIVY_PASSWORD=${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}
      basename=$(echo "${DOCKER_SNAPSHOT_IMAGE}" | sed 's|[/:]|_|g')
      mkdir -p ./reports
      if [[ -z "${DOCKER_TRIVY_ADDR}" ]]; then
        log_warn "\\e[93mYou are using Trivy in standalone mode. To get faster scans, consider setting the DOCKER_TRIVY_ADDR variable to the address of a Trivy server. More info here: https://aquasecurity.github.io/trivy/latest/docs/references/modes/client-server/\\e[0m"
        trivy image --download-db-only ${DOCKER_TRIVY_DB_REPOSITORY:+--db-repository $DOCKER_TRIVY_DB_REPOSITORY} ${DOCKER_TRIVY_JAVA_DB_REPOSITORY:+--java-db-repository $DOCKER_TRIVY_JAVA_DB_REPOSITORY}
        export trivy_opts="image"
      else
        log_info "You are using Trivy in client/server mode with the following server: ${DOCKER_TRIVY_ADDR}"
        export trivy_opts="image --server ${DOCKER_TRIVY_ADDR}"
      fi
      # Add common trivy arguments
      # The Java DB is downloaded client-side in client/server mode (https://github.com/aquasecurity/trivy/issues/3560), so we need to specify the Java DB repository
      export trivy_opts="${trivy_opts} ${DOCKER_TRIVY_JAVA_DB_REPOSITORY:+--java-db-repository $DOCKER_TRIVY_JAVA_DB_REPOSITORY} --no-progress --severity ${DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD} ${DOCKER_TRIVY_ARGS}"

      # Generate the native JSON report that can later be converted to other formats
      trivy ${trivy_opts} --exit-code 1 --format json --output reports/docker-trivy-${basename}.native.json $DOCKER_SNAPSHOT_IMAGE || exit_code=$?

      # Generate a report in the GitLab format
      trivy convert --format template --template "@/contrib/gitlab.tpl" --output reports/docker-trivy-${basename}.gitlab.json reports/docker-trivy-${basename}.native.json

      # console output
      trivy convert --format table reports/docker-trivy-${basename}.native.json

      exit $exit_code
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    access: developer
    when: always
    paths:
      - reports/docker-trivy-*
    reports:
      container_scanning:
        - reports/docker-trivy-*.gitlab.json
  cache:
    paths:
      - ".trivycache/"
  rules:
    - if: $DOCKER_TRIVY_DISABLED == "true"
      when: never
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
docker-sbom:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
  extends: ".docker-base"
  stage: package-test
  image:
    name: "$DOCKER_SBOM_IMAGE"
    entrypoint:
      - ''
  script:
    - log_info "Extracting SBOM from ${DOCKER_SNAPSHOT_IMAGE}..."
    - |
      log_info "Syft version:"
      /syft version
    - mkdir -p -m 777 reports
    - basename=$(echo "${DOCKER_SNAPSHOT_IMAGE}" | sed 's|[/:]|_|g')
    - "/syft scan ${TRACE+-vv} $DOCKER_SNAPSHOT_IMAGE $DOCKER_SBOM_OPTS -o cyclonedx-json=reports/docker-sbom-${basename}.cyclonedx.json"
    - chmod a+r reports/docker-sbom-${basename}.cyclonedx.json
  artifacts:
    name: SBOM for docker from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG
    expire_in: 1 week
    when: always
    paths:
      - reports/docker-sbom-*.cyclonedx.json
    reports:
      cyclonedx:
        - reports/docker-sbom-*.cyclonedx.json
  rules:
    - if: $DOCKER_SBOM_DISABLED == "true"
      when: never
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
docker-publish:
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - docker
        - 5.14.1
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function fail() {
        log_error "$*"
        exit 1
      }

      function install_custom_ca_certs() {
        certs="${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
        if [[ -z "$certs" ]]
        then
          return
        fi
        # import in system for regular linux (Ubuntu, Debian) image
        if [[ -f /etc/ssl/certs/ca-certificates.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
        # import in system for regular linux (Fedora, RHEL) image (e.g. Skopeo image)
        elif [[ -f /etc/ssl/certs/ca-bundle.crt ]]
        then
          echo "$certs" | tr -d '\r' >> /etc/ssl/certs/ca-bundle.crt
          log_info "Custom CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-bundle.crt\\e[0m"
        # kaniko image : specific directory for ca certificates, no standard import tool
        elif [[ -d /kaniko/ssl/certs ]]
        then
          echo "$certs" | tr -d '\r' >> /kaniko/ssl/certs/ca-certificates.crt
          log_info "Custom CA certificates configured in \\e[33;1m/kaniko/ssl/certs/ca-certificates.crt\\e[0m"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        # create the /tmp directory (it is required by the mktemp command)
        mkdir -p /tmp
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            log_warn "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      # simple JSON merge (used in Skopeo job only)
      function merge_json() {
        python3 -c "import json,sys
      def merge(a,b):
        for key in b:
          if key in a and isinstance(a[key],dict) and isinstance(b[key],dict): a[key]=merge(a[key],b[key])
          else: a[key]=b[key]
        return a
      def mergef(*files):
        res={}
        for f in files:
          with open(f,'r') as rd: res=merge(res,json.load(rd))
        return res
      print(json.dumps(mergef(*sys.argv[1:])))" "$@"
      }

      function wait_for_docker_daemon() {
        log_info "Wait for Docker daemon..."
        # shellcheck disable=SC2034
        for i in $(seq 1 30); do
          if ! docker info &> /dev/null; then
            log_info "... not responding: wait"
            sleep 2
          else
            log_info "... ready: continue"
            return
          fi
        done
        fail "... timeout reached: halt"
      }

      function awkenvsubst() {
        # performs variables escaping: '&' for gsub + JSON chars ('\' and '"')
        awk '{while(match($0,"[$%]{[^}]*}")) {var=substr($0,RSTART+2,RLENGTH-3);val=ENVIRON[var];gsub(/["\\&]/,"\\\\&",val);gsub("[$%]{"var"}",val)}}1'
      }

      function configure_registries_auth() {
        docker_snapshot_authent_token=$(echo -n "${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_snapshot_registry_host=$(echo "$DOCKER_SNAPSHOT_IMAGE" | cut -d/ -f1)
        export docker_snapshot_authent_token
        export docker_snapshot_registry_host

        docker_release_authent_token=$(echo -n "${DOCKER_REGISTRY_RELEASE_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}:${DOCKER_REGISTRY_RELEASE_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}" | base64 | tr -d '\n')
        docker_release_registry_host=$(echo "$DOCKER_RELEASE_IMAGE" | cut -d/ -f1)
        export docker_release_authent_token
        export docker_release_registry_host

        if [[ -n "$DOCKER_REGISTRY_MIRROR" && -n "$DOCKER_REGISTRY_MIRROR_USER" ]]
        then
          docker_mirror_authent_token=$(echo -n "$DOCKER_REGISTRY_MIRROR_USER:$DOCKER_REGISTRY_MIRROR_PASSWORD" | base64 | tr -d '\n')
          # shellcheck disable=SC2001
          docker_mirror_registry_host=$(echo "$DOCKER_REGISTRY_MIRROR" | sed "s|^https*://||" | cut -d/ -f1)
          export docker_mirror_authent_token
          export docker_mirror_registry_host

          docker_mirror_config_json="\"$docker_mirror_registry_host\":{\"auth\":\"$docker_mirror_authent_token\"},"
        fi

        docker_snapshot_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_snapshot_registry_host\":{\"auth\":\"$docker_snapshot_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")
        docker_release_config_json=$(echo -n "{\"auths\":{$docker_mirror_config_json\"$docker_release_registry_host\":{\"auth\":\"$docker_release_authent_token\"}},\"HttpHeaders\":{\"User-Agent\":\"$USER_AGENT\"}}")

        # Create the configuration file for Docker and Kaniko
        BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
        mkdir -p "$BUILDTOOL_HOME/.docker"
        if [ -f "${DOCKER_CONFIG_FILE}" ]
        then
          awkenvsubst < "${DOCKER_CONFIG_FILE}" > "$BUILDTOOL_HOME/.docker/config.json"
        else
          echo "${docker_snapshot_config_json}" > "$BUILDTOOL_HOME/.docker/config.json"
        fi

        # Create the configuration files for Skopeo
        if command -v skopeo > /dev/null
        then
          mkdir -p "$BUILDTOOL_HOME/skopeo/.docker"
          # use same auth config as the build tool for the source image
          cp -f "$BUILDTOOL_HOME/.docker/config.json" "$BUILDTOOL_HOME/skopeo/.docker/src-config.json"
          # use a merged auth config for the destination image
          echo "${docker_release_config_json}" > "$BUILDTOOL_HOME/skopeo/.docker/release-only.json"
          merge_json "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" "$BUILDTOOL_HOME/skopeo/.docker/release-only.json" > "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json"
        fi

        log_info "Docker authentication configured for \\e[33;1m${docker_snapshot_registry_host}\\e[0m"
      }

      # autodetects whether there is an hadolint config file
      function autoconfig_hadolint() {
        # If present, import hadolint config found inside the git repository
        _cfg=$(ls -1 "hadolint.yaml" 2>/dev/null || ls -1 ".hadolint.yaml" 2>/dev/null || echo "")
        if [[ -f "$_cfg" ]]
        then
          log_info "Using custom Hadolint config (\\e[33;1m${_cfg}\\e[0m)"
          export hadolint_config_opts="--config $_cfg"
        else
          log_info "No Hadolint config found: use default"
        fi
      }

      function create_kaniko_cache_dir() {
        # create cache directory if needed
        mkdir -p "${CI_PROJECT_DIR}/.cache"
      }

      function init_workspace() {
        install_custom_ca_certs
        unscope_variables
        eval_all_secrets
        configure_registries_auth
      }

      # evaluate the context path
      function docker_context_path() {
        if [[ "$DOCKER_CONTEXT_PATH" ]]
        then
          # $DOCKER_CONTEXT_PATH is explicit: use it
          echo "$DOCKER_CONTEXT_PATH"
        else
          # $DOCKER_CONTEXT_PATH unset or empty: assume it's relative to the Dockerfile
          dirname "$DOCKER_FILE"
        fi
      }

      function run_build_kaniko() {
        docker_image=$1
        if [ "$DOCKER_BUILD_CACHE_DISABLED" != "true" ]; then
          kaniko_snapshot_image_cache="${KANIKO_SNAPSHOT_IMAGE_CACHE:-${DOCKER_SNAPSHOT_IMAGE%:*}/cache}"
          kaniko_cache_args="--cache --cache-dir=${CI_PROJECT_DIR}/.cache --cache-repo=${kaniko_snapshot_image_cache}"
          log_info "Build cache enabled; CLI options: ${kaniko_cache_args}"
        fi
        shift
        if [[ -n "$DOCKER_REGISTRY_MIRROR" ]]
        then
          # shellcheck disable=SC2001,SC2086
          kaniko_registry_mirror_option="--registry-mirror $(echo ${DOCKER_REGISTRY_MIRROR} | sed "s|^https*://||")"
        fi
        log_info "Build & deploy image $docker_image"
        log_info "Kaniko command: echo $DOCKER_METADATA $DOCKER_BUILD_ARGS $* | xargs /kaniko/executor ${TRACE+--verbosity debug} --context $(docker_context_path) --dockerfile $DOCKER_FILE --destination $docker_image ${kaniko_cache_args} $kaniko_registry_mirror_option"
        # shellcheck disable=SC2086
        echo $DOCKER_METADATA $DOCKER_BUILD_ARGS "$@" | xargs /kaniko/executor ${TRACE+--verbosity debug} --context "$(docker_context_path)" --dockerfile "$DOCKER_FILE" --destination "$docker_image" ${kaniko_cache_args} $kaniko_registry_mirror_option
      }

      # Used by containers tools like buildah, skopeo.
      function configure_containers_registries() {
        if [[ -n "$CONTAINER_REGISTRIES_CONFIG_FILE" ]]
        then
          BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
          mkdir -p "$BUILDTOOL_HOME/.config/containers"
          echo "${CONTAINER_REGISTRIES_CONFIG_FILE}" > "$BUILDTOOL_HOME/.config/containers/registries.conf"
          log_info "Configured $BUILDTOOL_HOME/.config/containers/registries.conf"
        fi
      }

      function publish_extra_tags() {
        if [[ -z "$DOCKER_RELEASE_EXTRA_TAGS" ]]
        then
          return
        fi
        # check if tag matches pattern
        # shellcheck disable=SC2154
        matches=$(python3 -c "import re;print('match' if re.match(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', '$docker_tag') else '')")
        if [[ "$matches" ]]
        then
          # apply extra tags substitution
          extra_tags=$(python3 -c "import re;print(re.sub(r'$DOCKER_RELEASE_EXTRA_TAGS_PATTERN', r'$DOCKER_RELEASE_EXTRA_TAGS', '$docker_tag'))")
          log_info "Pushing extra tags (evaluated from original tag \\e[33;1m${docker_tag}\\e[0m)..."
          for extra_tag in $extra_tags
          do
            log_info "... pushing extra tag: \\e[33;1m${extra_tag}\\e[0m..."
            # shellcheck disable=SC2086,SC2154
            skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_RELEASE_IMAGE" "docker://$docker_repository:$extra_tag"
          done
        else
          log_info "Extra tags configured, but the released tag (\\e[33;1m${docker_tag}\\e[0m) doesn't match \$DOCKER_RELEASE_EXTRA_TAGS_PATTERN..."
        fi
      }

      init_workspace

      # ENDSCRIPT
  extends: ".docker-base"
  image:
    name: "$DOCKER_SKOPEO_IMAGE"
    entrypoint:
      - ''
  stage: publish
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ "${SEMREL_INFO_ON}" && "${DOCKER_SEMREL_RELEASE_DISABLED}" != "true" ]]
      then
        if [[ -z "${SEMREL_INFO_NEXT_VERSION}" ]]
        then
          log_warn "[semantic-release] no new version to release: skip"
          exit 0
        else
          DOCKER_RELEASE_IMAGE="${DOCKER_RELEASE_IMAGE%:*}:$SEMREL_INFO_NEXT_VERSION"
          log_info "[semantic-release] new Image tag is set: $DOCKER_RELEASE_IMAGE"
        fi
      fi

      if [[ "$DOCKER_SNAPSHOT_IMAGE" == "$DOCKER_RELEASE_IMAGE" ]]
      then
        log_warn "\\e[93mYou should consider distinguishing snapshot and release images as they do not differ. Skipping publish phase as image has already been created by previous job.\\e[0m"
        exit 0
      fi
    - |
      log_info "Skopeo version:"
      skopeo -v
    - BUILDTOOL_HOME=${BUILDTOOL_HOME:-$HOME}
    - log_info "Copying ${DOCKER_SNAPSHOT_IMAGE} to ${DOCKER_RELEASE_IMAGE}..."
    - skopeo copy --src-authfile "$BUILDTOOL_HOME/skopeo/.docker/src-config.json" --dest-authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" ${DOCKER_PUBLISH_ARGS} "docker://$DOCKER_SNAPSHOT_IMAGE" "docker://$DOCKER_RELEASE_IMAGE"
    - 'log_info "Well done your image is pushed and can be pulled with: docker pull $DOCKER_RELEASE_IMAGE"

'
    - docker_digest=$(skopeo inspect --authfile "$BUILDTOOL_HOME/skopeo/.docker/dest-config.json" --format='{{ .Digest }}' "docker://$DOCKER_RELEASE_IMAGE")
    - docker_repository=${DOCKER_RELEASE_IMAGE%:*}
    - docker_tag=${DOCKER_RELEASE_IMAGE##*:}
    - |
      {
        echo "docker_image=$DOCKER_RELEASE_IMAGE"
        echo "docker_image_digest=$docker_repository@$docker_digest"
        echo "docker_repository=$docker_repository"
        echo "docker_tag=$docker_tag"
        echo "docker_digest=$docker_digest"
      } > docker.env
    - publish_extra_tags
  artifacts:
    reports:
      dotenv:
        - docker.env
  rules:
    - if: $CI_COMMIT_TAG && ($SEMREL_INFO_ON == null || $SEMREL_INFO_ON == "" || $DOCKER_SEMREL_RELEASE_DISABLED == "true")
    - if: "$CI_COMMIT_REF_NAME !~ $PROD_REF"
      when: never
    - if: $DOCKER_SNAPSHOT_IMAGE == $DOCKER_RELEASE_IMAGE && ($SEMREL_INFO_ON == null || $SEMREL_INFO_ON == "" || $DOCKER_SEMREL_RELEASE_DISABLED == "true")
      when: never
    - if: $PUBLISH_ON_PROD == "false"
      when: never
    - if: $DOCKER_PROD_PUBLISH_STRATEGY == "manual"
      when: manual
    - if: $DOCKER_PROD_PUBLISH_STRATEGY == "auto"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/hendisantika/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:b15b9c9a5417972b9cef1fd66f9cfaeaa831efd6fb4df8037deb0d4575aa9c11
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:b15b9c9a5417972b9cef1fd66f9cfaeaa831efd6fb4df8037deb0d4575aa9c11
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sebastienraillet/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:ea0c2cf3d5c850a3f85b5c9189f57db56531c9f8b36a03e1867f0d06c092fa53
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:ea0c2cf3d5c850a3f85b5c9189f57db56531c9f8b36a03e1867f0d06c092fa53
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/l.stoetzel/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:255157eea920312b5cd441e357ee7cfa28fe3b486012d092d09d4482d226550b
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:255157eea920312b5cd441e357ee7cfa28fe3b486012d092d09d4482d226550b
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/alexrecuenco/cloned-renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.16.0@sha256:0a4bb41e47dd5f73fd2d6ed253de36805e15712c7b39d42da4e23cf93a52862a
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.16.0@sha256:0a4bb41e47dd5f73fd2d6ed253de36805e15712c7b39d42da4e23cf93a52862a
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/kjgrahn/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/matthewbrahms/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.16.0@sha256:0a4bb41e47dd5f73fd2d6ed253de36805e15712c7b39d42da4e23cf93a52862a
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.16.0@sha256:0a4bb41e47dd5f73fd2d6ed253de36805e15712c7b39d42da4e23cf93a52862a
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/stalb/renovate-runner
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:c346f686fb743048e797d63fd6d15eca1e1cff2088dc8ea3ae3fa9ef4f0278b7
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:c346f686fb743048e797d63fd6d15eca1e1cff2088dc8ea3ae3fa9ef4f0278b7
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:51Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/nachiketsrao-group/renovate-pipeline
[90m2025-07-31T09:07:51Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:latest
  script:
    - renovate --autodiscover
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: https://gitlab.com/api/v4/
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
    LOG_LEVEL: debug
    GITHUB_COM_TOKEN: "$GITHUB_TOKEN"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ceda-unibas/tools/ceda-renovate
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:52Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/saichethan111/renovate-runner
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:9481be9a0116f1d7830e0d7413e81266b641a53aef3b828dfa7d4672392bef62
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:9481be9a0116f1d7830e0d7413e81266b641a53aef3b828dfa7d4672392bef62
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/KyrakerzNetgo/renovate-runner
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.16.0@sha256:82d27838476864ab2521dc732e7dc2974beabcdcbc4d969ff3e8aa7503a213c2
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.16.0@sha256:82d27838476864ab2521dc732e7dc2974beabcdcbc4d969ff3e8aa7503a213c2
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ctmc-m1/renovate-runner
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - check
  - ".post"
renovate:
  stage: check
  image: ghcr.io/renovatebot/renovate:37.373.0
  script:
    - renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
  variables:
    RENOVATE_CONFIG_FILE: renovate-config.js
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/louismanhnguyen1998/renovate-ci
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/spring-boot-mongodb-angular-todo-app/renovate-bot
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  LOG_LEVEL: info
  RENOVATE_GL_HOST: gitlab-com
  RENOVATE_HOST_RULES: |
    [
      {"hostType": "docker", "matchHost": "registry.ops.gitlab.net","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"},
      {"hostType": "helm", "matchHost": "https://registry.ops.gitlab.net/gitlab-com/gl-infra/charts","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"}
    ]
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".id_tokens"
    - ".renovate"
    - ".renovate_token"
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_NOTIFY"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  environment:
    name: renovate
  tags:
    - gitlab-org
  timeout: 2h
stages:
  - ".pre"
  - build
  - test
  - deploy
  - notify
  - ".post"
".id_tokens":
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
".renovate_token":
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
maintain-renovate-projects:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
  extends:
    - ".id_tokens"
    - ".renovate_token"
  stage: build
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"
      when: manual
  allow_failure: true
  tags:
    - gitlab-org
  environment:
    name: readonly
    action: verify
  image: ruby:3.4.4
  script:
    - ruby scripts/maintain-soos-enabled-projects.rb
renovate:dry-run:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".id_tokens"
    - ".renovate"
    - ".renovate_token"
  stage: test
  needs: []
  resource_group: production
  environment:
    name: readonly
    action: verify
  tags:
    - gitlab-org
  timeout: 2h
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - config*.js
".runway":
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
renovate-runway:
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".runway"
    - renovate
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_NOTIFY"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  environment:
    name: renovate
  tags:
    - gitlab-org
  timeout: 2h
renovate-runway:dry-run:
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".runway"
    - renovate:dry-run
  stage: test
  needs: []
  resource_group: production
  environment:
    name: readonly
    action: verify
  tags:
    - gitlab-org
  timeout: 2h
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - config*.js
renovate:notify:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    SLACK_WEBHOOK_URL:
      file: false
      vault: renovate/notifier/slack_webhook_url@shared
  extends:
    - ".id_tokens"
    - ".renovate_token"
  stage: deploy
  environment:
    name: readonly
    action: verify
  needs: []
  variables:
    PROJECTS_YAML: projects/${RENOVATE_GL_HOST}.yaml
  tags:
    - gitlab-org
  image: ruby:3.4.4
  script:
    - bundle install
    - ruby scripts/notify.rb
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_NOTIFY
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - Gemfile
          - Gemfile.lock
          - projects/*
          - scripts/notify.rb
      when: manual
      allow_failure: true
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/aschaber1/renovate-runner
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.91.1@sha256:f5db3f8c5c7fd126842d599aa053825f9e73f02cbfd1e50a40a6818d52e0ab23
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.12.0@sha256:2d85a9fc6e9f57176a57d9179c2b6de8dd4c7e62b4bdabe18a3172bbb59e93a1
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.12.0@sha256:2d85a9fc6e9f57176a57d9179c2b6de8dd4c7e62b4bdabe18a3172bbb59e93a1
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jlosito/renovate-gitlab-bot
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull-push
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_IGNORE_INIT_ERRORS: 'true'
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu validate
".plan:detailed_exitcode:warning:false":
  extends:
".plan:detailed_exitcode:warning:true":
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: false
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    exit_codes:
      - 2
  artifacts:
    when: always
plan:
  extends:
    - ".plan:detailed_exitcode:warning:false"
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    access: none
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/plan.cache"
    reports:
      terraform:
        - "$GITLAB_TOFU_ROOT_DIR/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - "args=\"\"\nif [ \"false\" == \"true\" ]; then \n  echo \"Planning for a destroy\"\n  args=\"-destroy\"\nfi\n"
    - gitlab-tofu plan $args
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$GITLAB_TOFU_STATE_NAME"
    action: start
  resource_group: "$GITLAB_TOFU_STATE_NAME"
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: never
    - when: on_success
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_APPLY_NO_PLAN: false
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu apply
  needs:
    - plan
stages:
  - ".pre"
  - forks
  - run
  - ".post"
".opentofu:bridge_job_stage:true":
  stage: opentofu
".opentofu:bridge_job_stage:false":
  stage: ".pre"
opentofu:
  stage: ".pre"
  rules:
    - if: '"false" == "false"'
      when: never
    - when: on_success
  extends: ".opentofu:bridge_job_stage:false"
  trigger:
    include:
      - project: components/opentofu
        file: "/templates/validate-plan-apply.yml"
        ref: 0.44.0
        inputs:
          stage_validate: forks
          stage_build: forks
          stage_deploy: forks
          version: 0.44.0
          base_os: alpine
          opentofu_version: 1.8.4
          image_registry_base: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu"
          image_name: gitlab-opentofu
          image_digest: ''
          job_name_prefix: ''
          root_dir: forks
          state_name: forks
          plan_name: plan
          plan_artifacts_access: none
          var_file: config.tfvars
          fmt_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          validate_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          plan_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          apply_rules:
            - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
              when: never
            - when: on_success
          warning_on_non_empty_plan: false
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_VAR_gitlab_bot_token: "$GITLAB_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false"
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
".node":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --docker-files bot_image/docker_files/ --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - bot_image/docker_files/
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node --experimental-strip-types ./scripts/delete-pipelines.ts
  rules:
    - if: "$DELETE_PIPELINES"
".pages":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
pages:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  publish: public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
      needs:
        - execute
    - if: "$CI_MERGE_REQUEST_IID"
      when: manual
      needs: []
      allow_failure: true
pages-dry-run:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      allow_failure: true
      needs:
        - execute
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/laurent.croq/test-tbc-renovate
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  RENOVATE_IMAGE: docker.io/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_AUTODISCOVER: true
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_REGISTRY_ALIASES: '{"$$CI_SERVER_FQDN": "$CI_SERVER_FQDN"}'
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_ONBOARDING_CONFIG: "{\n  \"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\",\n    \":dependencyDashboard\"\n  ],\n  \"labels\": [\n    \"dependencies\"\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?_IMAGE:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    },\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?image:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    }\n  ] \n}"
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  unscope_variables
  eval_all_secrets

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.6.1
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
test:
  image: alpine:3.21
  script: echo ok
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/macmpf/renovate-runner
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:full
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tmee/renovate
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=tmee/*"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  tags:
    - selfhosted
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/zavoloklom/renovate-bot
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - update
  - ".post"
renovate:
  stage: update
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  image: renovate/renovate
  script:
    - renovate --platform=gitlab --autodiscover --autodiscover-namespaces=dclint,gitlab-formatters
  variables:
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
    GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
[0m
[90m2025-07-31T09:07:52Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lx-industries/renovate-config
[90m2025-07-31T09:07:52Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "*.json"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dj-kanban/renovatebot
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=dj-kanban/* --onboarding=false --pr-concurrent-limit=0 --pr-hourly-limit=0"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/garuda-linux/tools/renovate-runner
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate8562903/renovate-runner
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
image: renovate/renovate:32.6.12
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@company.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tr4200812/renovate-gitlab-bot
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull-push
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_IGNORE_INIT_ERRORS: 'true'
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu validate
".plan:detailed_exitcode:warning:false":
  extends:
".plan:detailed_exitcode:warning:true":
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: false
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    exit_codes:
      - 2
  artifacts:
    when: always
plan:
  extends:
    - ".plan:detailed_exitcode:warning:false"
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    access: none
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/plan.cache"
    reports:
      terraform:
        - "$GITLAB_TOFU_ROOT_DIR/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - "args=\"\"\nif [ \"false\" == \"true\" ]; then \n  echo \"Planning for a destroy\"\n  args=\"-destroy\"\nfi\n"
    - gitlab-tofu plan $args
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$GITLAB_TOFU_STATE_NAME"
    action: start
  resource_group: "$GITLAB_TOFU_STATE_NAME"
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: never
    - when: on_success
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_APPLY_NO_PLAN: false
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu apply
  needs:
    - plan
stages:
  - ".pre"
  - test
  - forks
  - run
  - ".post"
".opentofu:bridge_job_stage:true":
  stage: opentofu
".opentofu:bridge_job_stage:false":
  stage: ".pre"
opentofu:
  stage: ".pre"
  rules:
    - if: '"false" == "false"'
      when: never
    - when: on_success
  extends: ".opentofu:bridge_job_stage:false"
  trigger:
    include:
      - project: components/opentofu
        file: "/templates/validate-plan-apply.yml"
        ref: 0.44.0
        inputs:
          stage_validate: forks
          stage_build: forks
          stage_deploy: forks
          version: 0.44.0
          base_os: alpine
          opentofu_version: 1.8.4
          image_registry_base: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu"
          image_name: gitlab-opentofu
          image_digest: ''
          job_name_prefix: ''
          root_dir: forks
          state_name: forks
          plan_name: plan
          plan_artifacts_access: none
          var_file: config.tfvars
          fmt_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          validate_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          plan_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          apply_rules:
            - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
              when: never
            - when: on_success
          warning_on_non_empty_plan: false
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_VAR_gitlab_bot_token: "$GITLAB_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false"
danger-review:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
    - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
    - bundle install
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
danger-review dry-run:
  rules:
    - if: "'false' == 'false'"
      when: never
    - - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
      - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
      - bundle install
    - unset DANGER_GITLAB_API_TOKEN
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
  extends: danger-review
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
".node":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --docker-files bot_image/docker_files/ --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - bot_image/docker_files/
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node --experimental-strip-types ./scripts/delete-pipelines.ts
  rules:
    - if: "$DELETE_PIPELINES"
".pages":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
pages:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  publish: public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
      needs:
        - execute
    - if: "$CI_MERGE_REQUEST_IID"
      when: manual
      needs: []
      allow_failure: true
pages-dry-run:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      allow_failure: true
      needs:
        - execute
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/personal-marioxe301/renovate-bot
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_TOKEN: "$RENOVATE_TOKEN"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/blauwe-knop/tools/renovate-config
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: https://gitlab.com/api/v4/
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_TOKEN: "${RENOVATE_TOKEN}"
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-namespaces=blauwe-knop/tools,blauwe-knop/vorderingenoverzicht,blauwe-knop/connect --onboarding=false"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/test3855748/renovate-runner-demo
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.140.1@sha256:6f25520b552141e28f1aae862e0d96f9c193e3b6956b358e5da072e283b3c95d
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/chargerrobotics3786/common/renovate-configurations
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:07:53Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/op_so/projects/renovate
[90m2025-07-31T09:07:53Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:full
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:54Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:07:54Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/conferences-pvulliemin/renovate/demo/renovate/renovate-runner
[90m2025-07-31T09:07:54Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:07:54Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/release-process/tools/renovate-bot
[90m2025-07-31T09:07:54Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  RENOVATE_EXTRA_FLAGS:
    value: "--autodiscover"
    description: Extra flags for renovatebot run
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      variables:
        RENOVATE_DRY_RUN: full
    - if: "$CI_PIPELINE_SOURCE =~ /^(schedule|web)$/"
      when: on_success
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
[0m
[90m2025-07-31T09:07:55Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/datastelsel.nl/ci/renovate
[90m2025-07-31T09:07:55Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["gitlab>datastelsel.nl/ci/renovate"]}'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_FILTER: datastelsel.nl/ci/**,datastelsel.nl/federatief/simulation/**
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_ONBOARDING_CONFIG_FILE_NAME: ".renovaterc.json"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
".validate_renovate_config":
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  variables:
    CI_RENOVATE_CONFIG_FILE: ".renovaterc.json"
  script:
    - renovate-config-validator --strict "${CI_RENOVATE_CONFIG_FILE}"
  rules:
    - changes:
        compare_to: "${CI_DEFAULT_BRANCH}"
        paths:
          - "${CI_RENOVATE_CONFIG_FILE}"
Validate Renovate config:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  variables:
    CI_RENOVATE_CONFIG_FILE: ".renovaterc.json"
  script:
    - - renovate-config-validator --strict "${CI_RENOVATE_CONFIG_FILE}"
    - renovate-config-validator --strict default.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  extends: ".validate_renovate_config"
[0m
[90m2025-07-31T09:07:55Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/t1m01-group/t1m0-renovate
[90m2025-07-31T09:07:55Z[0m [32mINF[0m [1m
renovate:
  image: node:24
  variables:
    RENOVATE_CONFIG_FILE: renovate-config.json
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json"}'
    RENOVATE_TOKEN: "$GITLAB_TOKEN"
    LOG_LEVEL: DEBUG
  script:
    - npm install -g renovate
    - renovate
[0m
[90m2025-07-31T09:07:55Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m2
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pedrodavid-sandbox/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/BjoernPetersen/renovate-reproduction-proxy
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zekihan/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/armbiant/gnome-renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/incubateur-territoires/devops/renovate-runner-generator
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/tests/renovate-webhook-test
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/amaro.marino/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/btwseeu78/helm-renovate-test
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hivebox/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/treilly94/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/giacomo.materozzi/test-renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/niclas-testing/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/another15y/tbc/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/armbiant/gitlab-renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/marge-org/marge-renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/VladNosenko/renovate-playground
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/test-renovate1/renovate-runner-test
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/northamp/tools/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/keeneproject/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/niclasheinz/renovate-configurations
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matthewhughes/renovate-configs
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/gitlab-webhook-renovate-proxy
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matthewhughes/gitlab-renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/FuturePortal/Renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/devxy/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/patricks-projects/renovate-gitlab-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pavel.knoblokh/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/uniget-org/renovate-custom
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stoub/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/perobertson/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deadnews/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/perobertson-tools/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-test-harness
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/beber80/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pss-x/support/gitlab-ci-templates/renovate/config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lgatellier/renovate-jib
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pss-x/support/gitlab-ci-templates/renovate/runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xrow-public/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gsuquet-tools/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/donne12/openday_addition_app
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rnickmccandless/app-project
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zel4/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joelMuehlena/renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thelabnyc/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/myapp-demo/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/amdap/adjunct/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/TimSchmittmann/ci-renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/robin.louarn/renovate-slides
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-github-release
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rconan/renovate-poc
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Orange-OpenSource/k8s-tz/tools/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/balihb/renovate-demo
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deraone/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-docker-alpine
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/axugl/cng-renovate-test
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/robin.louarn/renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Mathieu.Keller/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fun_with/fun-with-gitlab/fun-with-renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Mathieu.Keller/Test-Renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vriska/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-bot-anarcat/renovate-cron
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/anarcat/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bmaximuml/my-renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bmaximuml/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Mexico_admin/renovate-gitlab-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cedric3.olivier/minimal-renovate-reproduction
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cedric3.olivier/renovate-gitlab-component
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cedric3.olivier/renovate-cicd-components-4
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vitoyucepi/renovate-issue-30906
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/knoppiks/renovate-presets
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-osv-test
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stateless-dao/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pinarnet/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/beudbeud/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nicola.luethi/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/moerderschaf/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/softcomweb/softcomweb_renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/shoseki-renovate-bot/shoseki-renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/devsecopsstack/tools/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pgascouvaillancourt/find-renovate-mr
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/devsecopsstack/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/armbiant/gitlab-renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ethz-hpc/lustre-release
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/davidbeaa/renovate_runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/powderbooking/renovate/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/TheKangaroo/renovate-opentofu
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/talawa/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sirimangalo/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/edgeworks-public/renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate2790217/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate2790217/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xrow-public/renovate-config
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/JoeFerrin/renovate
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/KubeArchitect/renovate-runner-v2
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/JaroslavSku/renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dev6045710/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-config-sqlite
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/test7443515/renovate-bot
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/chargerrobotics3786/common/renovate-runner
[90m2025-07-31T09:08:05Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdetroye/renovate-reproduction
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate:validate may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning, jobs:renovate:dry-run may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:05Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cedric3.olivier/minimal-renovate-reproduction
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: cedric3.olivier/renovate-cicd-components-4
  LOG_LEVEL: debug
  RENOVATE_REGISTRY_ALIASES: '{ "$$CI_SERVER_FQDN": "gitlab.com"  }'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/talawa/renovate-runner
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate-config-validator may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/hivebox/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
image: renovate/renovate:35.62
stages:
  - ".pre"
  - renovate
  - ".post"
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/"
  RENOVATE_GIT_AUTHOR: Loukas Mertzanis Bot <loukas.mertzanis@gmail.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
  RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/renovate.json"
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/"
run_renovate:
  stage: renovate
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/armbiant/gnome-renovate-bot
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - updates
  - ".post"
default:
  interruptible: true
variables:
  LOG_FILE_LEVEL: debug
  LOG_FILE: renovate-log.ndjson
  LOG_LEVEL: warn
".template:renovate":
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:4ea79d1d1fdcd90272062937cdbc9f7830ed6aadb2fa0ff196a3969166fc91c1
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
renovate bot:
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:4ea79d1d1fdcd90272062937cdbc9f7830ed6aadb2fa0ff196a3969166fc91c1
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
  extends: ".template:renovate"
  only:
    - main
dry run:
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:4ea79d1d1fdcd90272062937cdbc9f7830ed6aadb2fa0ff196a3969166fc91c1
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
  extends: ".template:renovate"
  variables:
    RENOVATE_DRY_RUN: full
  except:
    - main
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/keeneproject/renovate-runner
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
renovate:
  stage: deploy
  image: renovate/renovate:40.49.7
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  script:
    - renovate
  artifacts:
    when: always
    paths:
      - "$LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/Mathieu.Keller/renovate-runner
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
image: renovate/renovate:38.67
stages:
  - ".pre"
  - renovate
  - ".post"
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <mathieu.keller@hansecom.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
run_renovate:
  stage: renovate
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renovate-bot-anarcat/renovate-cron
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.440.7-slim@sha256:42bedb4c35c5403faf50e82283f4f92f902addf9986a1f91281d9aa25d8a4a32
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:40.62.1@sha256:ae81e55a741faea2befce0caeafc8ae0ef2de014a104d63a67df59c7d168b1e7
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "${CI_PROJECT_DIR}"
renovate:validate:
  stage: test
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - config.js
      allow_failure: false
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
image: "${CI_RENOVATE_IMAGE_FULL}"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pinarnet/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - tests
  - dependencies
  - ".post"
".renovate":
  image: ghcr.io/renovatebot/renovate:40.59.3
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"], "vulnerabilityAlerts": {"enabled": true}, "osvVulnerabilityAlerts": true }'
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_NAMESPACES: '["pinarnet"]'
    RENOVATE_REVIEWERS: '["@alejandropinarruiz"]'
    RENOVATE_ASSIGNEES: '["@alejandropinarruiz"]'
    RENOVATE_PR_HOURLY_LIMIT: 0
    RENOVATE_PR_CONCURRENT_LIMIT: 0
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$RENOVATE_BASE_DIR/cache/renovate/repository/"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
check_config:
  image: ghcr.io/renovatebot/renovate:40.59.3
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"], "vulnerabilityAlerts": {"enabled": true}, "osvVulnerabilityAlerts": true }'
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_NAMESPACES: '["pinarnet"]'
    RENOVATE_REVIEWERS: '["@alejandropinarruiz"]'
    RENOVATE_ASSIGNEES: '["@alejandropinarruiz"]'
    RENOVATE_PR_HOURLY_LIMIT: 0
    RENOVATE_PR_CONCURRENT_LIMIT: 0
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$RENOVATE_BASE_DIR/cache/renovate/repository/"
  script:
    - renovate-config-validator
  extends: ".renovate"
  stage: tests
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_SLUG == "main"
    - when: never
renovate:
  image: ghcr.io/renovatebot/renovate:40.59.3
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"], "vulnerabilityAlerts": {"enabled": true}, "osvVulnerabilityAlerts": true }'
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_NAMESPACES: '["pinarnet"]'
    RENOVATE_REVIEWERS: '["@alejandropinarruiz"]'
    RENOVATE_ASSIGNEES: '["@alejandropinarruiz"]'
    RENOVATE_PR_HOURLY_LIMIT: 0
    RENOVATE_PR_CONCURRENT_LIMIT: 0
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$RENOVATE_BASE_DIR/cache/renovate/repository/"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: dependencies
  resource_group: renovate
  interruptible: true
  needs:
    - job: check_config
      artifacts: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/northamp/tools/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  RENOVATE_IMAGE: registry.hub.docker.com/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_REGISTRY_ALIASES: '{"$$CI_SERVER_FQDN": "$CI_SERVER_FQDN"}'
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_ONBOARDING_CONFIG: "{\n  \"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\",\n    \":dependencyDashboard\"\n  ],\n \"labels\": [\n   \"dependencies\"\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?_IMAGE:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    },\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?image:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    }\n  ] \n}"
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  unscope_variables
  eval_all_secrets

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.5.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.5.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.5.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout 5 -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T 5 -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/chargerrobotics3786/common/renovate-runner
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "main"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_ONBOARDING: false
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_NAMESPACES: chargerrobotics3786
    RENOVATE_ONBOARDING_CONFIG: '{"extends": ["gitlab>chargerrobotics3786/common/renovate-configurations"]}'
    RENOVATE_PR_FOOTER: This PR has been generated by [Renovate Bot](https://github.com/renovatebot/renovate). TA-14
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/xrow-public/renovate-config
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/niclas-testing/renovate-config
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_BRANCH_PREFIX: deps
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate:validate may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/devsecopsstack/tools/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - build
  - test
  - ".post"
variables:
  RENOVATE_IMAGE: registry.hub.docker.com/renovate/renovate:latest
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
      when: never
    - when: always
".renovate-base":
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
renovate-validator:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: test
  dependencies: []
  variables:
    RENOVATE_DRY_RUN: 'true'
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/joelMuehlena/renovate-bot
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - test
  - maintainance
  - ".post"
renovate-config-validator:
  stage: test
  image: ghcr.io/renovatebot/renovate:40.37.1
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:
  image: ghcr.io/renovatebot/renovate:40.37.1
  stage: maintainance
  variables:
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
    RENOVATE_PR_HOURLY_LIMIT: 80
    RENOVATE_REPOSITORY_CACHE: enabled
    LOG_FILE: renovate-log.ndjson
    LOG_FILE_LEVEL: debug
    RENOVATE_EXTRA_FLAGS: joelMuehlena/homelab joelMuehlena/renovate-bot
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cedric3.olivier/renovate-cicd-components-4
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/marge-org/marge-renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/nicola.luethi/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: artifacts.bedag.cloud/ghcr/renovatebot/renovate:37.363.9@sha256:070e708cf4bc83c29083f3263b8f747b477fa0ef448bf7303c454ffaa910f549
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/stoub/renovate-config
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
".test-policy":
  rules:
    - if: "$CI_COMMIT_TAG"
    - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
    - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
      when: manual
      allow_failure: true
    - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
      allow_failure: true
    - when: on_success
variables:
  TBC_TRACKING_IMAGE: registry.gitlab.com/to-be-continuous/tools/tracking:master
  GITLEAKS_IMAGE: registry.hub.docker.com/zricethezav/gitleaks:latest
  GITLEAKS_ARGS: "--verbose"
  GITLEAKS_RULES: ''
  PROD_REF: "/^(master|main)$/"
  INTEG_REF: "/^develop$/"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.425.1@sha256:05476b953f68ea766dd67f55cd34e0388b6aa2aa7c2185bf33a28c5588441bd7
  GIT_DESCRIBE_OPTIONS: --exclude "0.0.0*"
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".gitleaks-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  function install_gitleaks_rules() {
    if [[ -f ".gitleaks.toml" ]]
    then
      log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
    elif [[ "$GITLEAKS_RULES" ]]
    then
      log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
      echo "$GITLEAKS_RULES" > .gitleaks.toml
    else
      log_info "No Gitleaks rules found: use default"
    fi
  }

  unscope_variables

  # ENDSCRIPT
gitleaks:
  image:
    name: "$GITLEAKS_IMAGE"
    entrypoint:
      - ''
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - gitleaks
        - 2.5.2
  stage: test
  needs: []
  variables:
    GIT_DEPTH: 0
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      function install_gitleaks_rules() {
        if [[ -f ".gitleaks.toml" ]]
        then
          log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
        elif [[ "$GITLEAKS_RULES" ]]
        then
          log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
          echo "$GITLEAKS_RULES" > .gitleaks.toml
        else
          log_info "No Gitleaks rules found: use default"
        fi
      }

      unscope_variables

      # ENDSCRIPT
    - mkdir -p -m 777 reports
    - install_gitleaks_rules
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - gitleaks detect ${TRACE+--log-level debug} --source . $gitleaks_rule_opts --report-path reports/gitleaks.native.json $GITLEAKS_ARGS
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/gitleaks.*
  rules:
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  parallel:
    matrix:
      - RENOVATE_CONFIG_FILE: default.json
      - RENOVATE_CONFIG_FILE: docker.json
      - RENOVATE_CONFIG_FILE: go.json
      - RENOVATE_CONFIG_FILE: renovate.json
".release-notes-before-script":
  - []
".release-notes-after-script":
  - []
prepare-release-notes:
  image: registry.gitlab.com/sylva-projects/sylva-elements/container-images/ci-image/ci-release-image:v1.0.32
  stage: test
  script:
    - git fetch --tags
    - PREVIOUS_TAG=$(git describe --tags ${GIT_DESCRIBE_OPTIONS} --abbrev=0 ${CI_COMMIT_TAG}^)
    - - []
    - echo "Checking for merged MRs since ${PREVIOUS_TAG}"
    - generate-release.py --token ${RELEASE_NOTES_READ_API_TOKEN} --project-id ${CI_PROJECT_ID} --starting-tag ${PREVIOUS_TAG} --end-tag ${CI_COMMIT_TAG} | tee -a release-notes.md
    - - []
  artifacts:
    paths:
      - release-notes.md
    when: always
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG !~ /0\\.0\\.0.*/"
      when: always
create-release-notes:
  stage: test
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare-release-notes
      artifacts: true
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG !~ /0\\.0\\.0.*/"
  script:
    - echo "running creating release notes for ${CI_COMMIT_TAG}"
  release:
    name: "${CI_PROJECT_NAME}: ${CI_COMMIT_TAG}"
    tag_name: "$CI_COMMIT_TAG"
    description: release-notes.md
    ref: "$CI_COMMIT_SHA"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-docker-alpine
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/stateless-dao/renovate
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.161.6@sha256:c643bcac07ef1d63f98b57855f991591a92773f0d2ab899acc6d01600caa7532
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/donne12/openday_addition_app
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
renovate:
  image: renovate/renovate:latest
  stage: ".pre"
  script:
    - renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  tags:
    - renovate
  variables:
    LOG_LEVEL: debug
    RENOVATE_TOKEN: "${GITLAB_TOKEN}"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: https://gitlab.com/api/v4/
    RENOVATE_REPOSITORY_LIST: donne12/openday_addition_app
    RENOVATE_BASE_BRANCHES: main
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
image: node:14
stages:
  - ".pre"
  - release
  - ".post"
release:
  stage: release
  script:
    - npm ci
    - git config --global user.email "donnesiaku@yahoo.com"
    - git config --global user.name "Dieudonné ESIAKU"
    - npx semantic-release
  only:
    - main
  variables:
    GL_TOKEN: "${GITLAB_TOKEN}"
  tags:
    - semantic-release
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-github-release
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - when: never
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$RENOVATE_CACHE_DIR"
  variables:
    CI_RENOVATE_IMAGE: renovate/renovate
    LOG_FILE: renovate-log.ndjson
    LOG_FILE_LEVEL: debug
    LOG_LEVEL: debug
    RENOVATE_CACHE_DIR: "$CI_PROJECT_PATH/.renovate-cache"
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
    RENOVATE_REPOSITORY_CACHE: enabled
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/thelabnyc/renovate-config
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pss-x/support/gitlab-ci-templates/renovate/runner
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
".renovate":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
".renovate-workflow-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
".renovate-all-workflow-rule":
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
".renovate-dry-workflow-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
".renovate:validate":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends: ".renovate"
  variables:
    RENOVATE_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_EXTRA_FLAGS
  rules:
    - when: on_success
  allow_failure: false
".renovate:run":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends: ".renovate"
  variables:
    RENOVATE_EXTRA_FLAGS: ''
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - - if: $CI_PIPELINE_SOURCE == "schedule"
        when: on_success
  allow_failure: false
".renovate:run-all":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends: ".renovate"
  variables:
    RENOVATE_EXTRA_FLAGS: "--schedule="
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
        when: on_success
  allow_failure: false
stages:
  - ".pre"
  - renovate:validate-config
  - renovate:dry-run
  - renovate:run
  - ".post"
renovate:validate:
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends:
    - ".renovate:validate"
  variables:
    RENOVATE_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_EXTRA_FLAGS
  rules:
    - when: on_success
  allow_failure: false
  stage: renovate:validate-config
renovate:dry-run:
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends:
    - ".renovate:run"
  variables:
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=true --autodiscover-filter=pss-x/support/**"
    RENOVATE_DRY_RUN: full
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - - if: $CI_PIPELINE_SOURCE == "schedule"
        when: never
      - when: always
  allow_failure: false
  stage: renovate:dry-run
renovate:run:
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends:
    - ".renovate:run"
  variables:
    RENOVATE_EXTRA_FLAGS: ''
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - - if: $CI_PIPELINE_SOURCE == "schedule"
        when: on_success
  allow_failure: false
  stage: renovate:run
  needs:
    - job: renovate:validate
      artifacts: true
[0m
[90m2025-07-31T09:08:06Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/robin.louarn/renovate-bot
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
stages:
  - ".pre"
  - "✅ test"
  - "\U0001F916 bot"
  - ".post"
default:
  interruptible: true
  image: node@sha256:5e4044ff6001d06e7748e35bfa4f80c73cf5f5a7360a1b782995e038a01b0585
  before_script:
    - corepack enable pnpm
    - pnpm config set store-dir .pnpm-store
".pnpm":
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
    policy: pull
"\U0001F9BA validation":
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
    policy: pull-push
  extends: ".pnpm"
  stage: "✅ test"
  script:
    - pnpm install
    - pnpm test:ci
"\U0001F916 renovate":
  stage: "\U0001F916 bot"
  variables:
    LOG_LEVEL: info
    RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
  script:
    - pnpm install
    - pnpm start $RENOVATE_EXTRA_FLAGS $RENOVATE_REPOSITORIES
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        RENOVATE_EXTRA_FLAGS: "--dry-run"
    - when: always
  cache:
    - key:
        files:
          - pnpm-lock.yaml
      paths:
        - ".pnpm-store"
      policy: pull
    - key: "$CI_COMMIT_REF_SLUG-renovate"
      paths:
        - "$CI_PROJECT_DIR/renovate/cache/renovate/repository/"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$CI_PROJECT_DIR/renovate-log.ndjson"
"\U0001F4DD comment":
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
    policy: pull
  extends: ".pnpm"
  stage: "\U0001F916 bot"
  variables:
    INPUT_PUBLISH: pnpm changeset version
  script:
    - pnpm install
    - pnpm changesets-gitlab comment
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
"\U0001F516 release":
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
    policy: pull
  extends: ".pnpm"
  stage: "\U0001F916 bot"
  variables:
    INPUT_PUBLISH: pnpm changeset tag
  script:
    - pnpm install
    - pnpm set //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}
    - pnpm set registry https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - pnpm changesets-gitlab
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lgatellier/renovate-jib
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.124.2@sha256:085e2cbece2f9b88ed7c6ffbdcb3220bd41d7ed40204db7937018bd69a6a301f
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_GIT_AUTHOR: Renovate Automation Bot <renovate-bot@nowhere.fr>
  RENOVATE_CONFIG_FILE: config.js
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/beber80/renovate
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rnickmccandless/app-project
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pss-x/support/gitlab-ci-templates/renovate/config
[90m2025-07-31T09:08:06Z[0m [32mINF[0m [1m
".allow-hotfix-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^hotfix\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: on_success
".block-hotfix-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^hotfix\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".allow-next-hotfix-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^hotfix\\/^next/"
      when: on_success
".block-next-hotfix-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^hotfix\\/^next/"
      when: never
".allow-infrastructure-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^infrastructure\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: on_success
".block-infrastructure-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^infrastructure\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".allow-integration-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^integration\\/.*/"
      when: on_success
".block-integration-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^integration\\/.*/"
      when: never
".allow-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: on_success
".block-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".block-expect-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH !~ /^release\\/(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".allow-next-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/^next/"
      when: on_success
".block-next-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/^next/"
      when: never
".block-expect-next-release-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH !~ /^release\\/^next/"
      when: never
".allow-release-candidate-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/rc(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: on_success
".block-release-candidate-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/rc(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".block-expect-release-candidate-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH !~ /^release\\/rc(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/"
      when: never
".allow-development-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^(development|develop|dev|(development\\/.*))/"
      when: on_success
".block-development-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^(development|develop|dev|(development\\/.*))/"
      when: never
".block-expect-development-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH !~ /^(development|develop|dev|(development\\/.*))/"
      when: never
".allow-feature-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^feature\\/.*/"
      when: on_success
".block-feature-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^feature\\/.*/"
      when: never
".allow-main-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /(^main$|^master$)/"
      when: on_success
".block-main-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /(^main$|^master$)/"
      when: never
".block-expect-main-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH !~ /(^main$|^master$)/"
      when: never
".allow-renovate-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^renovate\\/.*/"
      when: on_success
".block-renovate-rule":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^renovate\\/.*/"
      when: never
".allow-merge-request-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
".block-merge-request-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
".allow-schedule-job-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
".block-schedule-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
".allow-tag-rule":
  rules:
    - if: "$CI_COMMIT_TAG =~ /^v\\d+\\.\\d+\\.\\d+([~\\-\\+]+.+)?/"
      when: on_success
".block-tag-rule":
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
".any-branch-rule":
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: "$CI_MERGE_REQUEST_IID != null"
      when: on_success
    - if: "$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^renovate\\/.*/"
      when: on_success
".default-branch-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH =~ /^renovate\\/.*/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$CI_DEFAULT_BRANCH == $CI_COMMIT_REF_NAME && $CI_COMMIT_BRANCH !~ /^renovate\\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\\/.*/"
      when: on_success
".non-default-branch-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH =~ /^renovate\\/.*/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$CI_DEFAULT_BRANCH != $CI_COMMIT_REF_NAME && $CI_COMMIT_BRANCH !~ /^renovate\\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\\/.*/"
      when: on_success
".scheduled-and-protected-branch-rule":
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_REF_NAME !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^infrastructure\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
      when: on_success
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
      when: on_success
".merge-request-scheduled-and-protected-branch-rule":
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^infrastructure\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_REF_NAME !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^infrastructure\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
      when: on_success
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
      when: on_success
".lint-commits":
  image:
    name: registry.gitlab.com/pss-x/support/containers/commitlint:1.0.16@sha256:32438d7606658c76861c28954408801fb1d73ceb49124849849ee682aa7987f3
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | commitlint
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: "$CI_MERGE_REQUEST_IID != null"
      when: on_success
    - if: "$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^renovate\\/.*/"
      when: on_success
lint-commits:
  image:
    name: registry.gitlab.com/pss-x/support/containers/commitlint:1.0.16@sha256:32438d7606658c76861c28954408801fb1d73ceb49124849849ee682aa7987f3
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | commitlint
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: "$CI_MERGE_REQUEST_IID != null"
      when: on_success
    - if: "$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^renovate\\/.*/"
      when: on_success
  extends: ".lint-commits"
  stage: lint:commit
".releaserc": "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
".default-value": "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
".configuration-rc":
  variables:
    VERSION_FILE: release_info
    READ_ME_FILE: README.md
    CHANGELOG_FILE: CHANGELOG.md
    COPYING_FILE: COPYING.md
  image: registry.gitlab.com/pss-x/support/containers/semantic-release:1.0.1
  before_script:
    - "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
    - '[ -f ".releaserc.json" ] || echo "${DEFAULT_RELEASERC}" > .releaserc.json'
    - "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
".version":
  variables:
    VERSION_FILE: release_info
    READ_ME_FILE: README.md
    CHANGELOG_FILE: CHANGELOG.md
    COPYING_FILE: COPYING.md
    SEMANTIC_RELEASE_EXTRA_ARGS: ''
  image: registry.gitlab.com/pss-x/support/containers/semantic-release:1.0.1
  before_script:
    - - "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
      - '[ -f ".releaserc.json" ] || echo "${DEFAULT_RELEASERC}" > .releaserc.json'
      - "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
  extends:
    - ".configuration-rc"
  script:
    - npx semantic-release --dry-run --generate-notes false $SEMANTIC_RELEASE_EXTRA_ARGS
    - "if [ ! -f \".next-version\" ]; then\n  echo -e \"\\e[33mWarning: There are no relevant changes, so no new version is released, Using version information from $VERSION_FILE file...\\e[0m\"\n  if [ -f \"$VERSION_FILE\" ]; then\n    CURRENT_VERSION=$(cat $VERSION_FILE)\n    VERSION=$(echo \"${CURRENT_VERSION}\" | sed 's/RELEASE_VERSION=//')\n    touch .next-version\n    echo \"${VERSION}\" > $CI_PROJECT_DIR/.next-version\n  else\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1 \n  fi \nelse\n  VERSION=$(cat .next-version)\nfi\n"
    - echo "VERSION=$VERSION" > version.env
    - export VERSION=$VERSION
    - cat version.env
  allow_failure: false
  artifacts:
    reports:
      dotenv: version.env
    paths:
      - ".next-version"
    expire_in: never
".release":
  variables:
    VERSION_FILE: release_info
    READ_ME_FILE: README.md
    CHANGELOG_FILE: CHANGELOG.md
    COPYING_FILE: COPYING.md
    SEMANTIC_RELEASE_EXTRA_ARGS: ''
  image: registry.gitlab.com/pss-x/support/containers/semantic-release:1.0.1
  before_script:
    - - "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
      - '[ -f ".releaserc.json" ] || echo "${DEFAULT_RELEASERC}" > .releaserc.json'
      - "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
  extends:
    - ".configuration-rc"
  script:
    - npx semantic-release $SEMANTIC_RELEASE_EXTRA_ARGS
    - |
      if [ -f "$CI_PROJECT_DIR/.next-version" ]; then
        echo "RELEASE_VERSION=`cat $CI_PROJECT_DIR/.next-version`"
      fi
  allow_failure: false
version:
  variables:
    VERSION_FILE: release_info
    READ_ME_FILE: README.md
    CHANGELOG_FILE: CHANGELOG.md
    COPYING_FILE: COPYING.md
    SEMANTIC_RELEASE_EXTRA_ARGS: ''
  image: registry.gitlab.com/pss-x/support/containers/semantic-release:1.0.1
  before_script:
    - - "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
      - '[ -f ".releaserc.json" ] || echo "${DEFAULT_RELEASERC}" > .releaserc.json'
      - "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
  extends:
    - ".version"
  script:
    - npx semantic-release --dry-run --generate-notes false $SEMANTIC_RELEASE_EXTRA_ARGS
    - "if [ ! -f \".next-version\" ]; then\n  echo -e \"\\e[33mWarning: There are no relevant changes, so no new version is released, Using version information from $VERSION_FILE file...\\e[0m\"\n  if [ -f \"$VERSION_FILE\" ]; then\n    CURRENT_VERSION=$(cat $VERSION_FILE)\n    VERSION=$(echo \"${CURRENT_VERSION}\" | sed 's/RELEASE_VERSION=//')\n    touch .next-version\n    echo \"${VERSION}\" > $CI_PROJECT_DIR/.next-version\n  else\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1 \n  fi \nelse\n  VERSION=$(cat .next-version)\nfi\n"
    - echo "VERSION=$VERSION" > version.env
    - export VERSION=$VERSION
    - cat version.env
  allow_failure: false
  artifacts:
    reports:
      dotenv:
        - version.env
    paths:
      - ".next-version"
    expire_in: never
  stage: version
  rules:
    - - if: "$CI_COMMIT_TAG"
        when: never
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        when: never
      - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_REF_NAME !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^infrastructure\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
        when: on_success
      - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
        when: on_success
release:
  variables:
    VERSION_FILE: release_info
    READ_ME_FILE: README.md
    CHANGELOG_FILE: CHANGELOG.md
    COPYING_FILE: COPYING.md
    SEMANTIC_RELEASE_EXTRA_ARGS: ''
  image: registry.gitlab.com/pss-x/support/containers/semantic-release:1.0.1
  before_script:
    - - "DEFAULT_RELEASERC=$(cat <<EOF\n{\n  \"branches\": [\"+([0-9])?(.{+([0-9]),x}).x\", \"main\", \"master\", \"release\", {\"name\": \"development\", \"prerelease\": true}],\n  \"tagFormat\": \"v\\${version}\",\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        { \"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\" },\n        { \"type\": \"ci\", \"scope\": \"deps\", \"release\": \"patch\" },\n        { \"type\": \"refactor\", \"release\": \"patch\"},\n        { \"type\": \"style\", \"release\": \"patch\"},\n        { \"scope\": \"no-release\", \"release\": false }\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }],\n    [\"@semantic-release/release-notes-generator\", {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"]\n      }\n    }],\n    [\"@semantic-release/exec\", {\n      \"verifyReleaseCmd\": \"echo \\${nextRelease.version} > .next-version\"\n    }],\n    [\"semantic-release-replace-plugin\", {\n      \"replacements\": [{\n        \"files\": [\"${READ_ME_FILE}\"],\n        \"from\": \"    ref: .*\",\n        \"to\": \"    ref: v\\${nextRelease.version} # select desired version here\"\n      },\n      {\n        \"files\": [\"${VERSION_FILE}\"],\n        \"from\": \"RELEASE_VERSION=.*\",\n        \"to\": \"RELEASE_VERSION=\\${nextRelease.version}\"\n      }]\n    }],\n    [\"@semantic-release/changelog\", {\n      \"changelogFile\": \"${CHANGELOG_FILE}\",\n      \"changelogTitle\": \"# Semantic Versioning Changelog\"\n    }],     \n    [\"@semantic-release/gitlab\", {\n      \"gitlabUrl\": \"https://gitlab.com\",\n      \"assets\": [\n          { \"path\": \"${READ_ME_FILE}\", \"label\": \"ReadME\", \"type\": \"runbook\"},\n          { \"path\": \"${CHANGELOG_FILE}\", \"label\": \"Changelog\", \"type\": \"other\"},\n          { \"path\": \"${COPYING_FILE}\", \"label\": \"Copying\", \"type\": \"other\" }\n        ]\n    }],\n    [\"@semantic-release/git\", {\n      \"assets\": [\"${READ_ME_FILE}\", \"${CHANGELOG_FILE}\", \"${VERSION_FILE}\"],\n      \"message\": \"chore(release): semantic-release modified repo for v\\${nextRelease.version} [skip ci]\"\n    }]\n  ],\n  \"preset\": \"angular\"\n}\nEOF\n)\n"
      - '[ -f ".releaserc.json" ] || echo "${DEFAULT_RELEASERC}" > .releaserc.json'
      - "if [[ \"$VERSION_FILE\" != \"\" ]]; then\n  if [ ! -f \"$VERSION_FILE\" ]; then\n    echo -e \"\\e[31mError: $VERSION_FILE file doesn't exist.\\e[0m\"\n    exit 1\n  else\n    echo \"VERSION_FILE=$VERSION_FILE\"\n    if [[ $(tail -c 1 $VERSION_FILE) != \"\\n\" ]]; then\n      cat $VERSION_FILE || echo \"\"\n    else\n      cat $VERSION_FILE \n    fi\n  fi\nfi\nif [[ \"$READ_ME_FILE\" != \"\" ]]; then\n  if [ ! -f \"$READ_ME_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${READ_ME_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"READ_ME_FILE=$READ_ME_FILE\"\n    # head -10 $READ_ME_FILE\n  fi\nfi \nif [[ \"$CHANGELOG_FILE\" != \"\" ]]; then\n  if [ ! -f \"$CHANGELOG_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${CHANGELOG_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"CHANGELOG_FILE=$CHANGELOG_FILE\"\n    # head -10 $CHANGELOG_FILE\n  fi\nfi\nif [[ \"$COPYING_FILE\" != \"\" ]]; then\n  if [ ! -f \"$COPYING_FILE\" ]; then\n    echo -e \"\\e[33mWarning: ${COPYING_FILE} is not found in repository.\\e[0m\"\n  else\n    echo \"COPYING_FILE=$COPYING_FILE\"\n    # head -10 $COPYING_FILE\n  fi\nfi\n"
  extends:
    - ".release"
  script:
    - npx semantic-release $SEMANTIC_RELEASE_EXTRA_ARGS
    - |
      if [ -f "$CI_PROJECT_DIR/.next-version" ]; then
        echo "RELEASE_VERSION=`cat $CI_PROJECT_DIR/.next-version`"
      fi
  allow_failure: false
  stage: release
  rules:
    - - if: "$CI_COMMIT_TAG"
        when: never
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        when: never
      - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_REF_NAME !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^infrastructure\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
        when: on_success
      - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH !~ /^renovate\/.*/ && $CI_COMMIT_BRANCH !~ /^integration\/.*/ && $CI_COMMIT_BRANCH !~ /^hotfix\/.*/
        when: on_success
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
".renovate":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
".renovate-workflow-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
".renovate-all-workflow-rule":
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
".renovate-dry-workflow-rule":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
".renovate:validate":
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends: ".renovate"
  variables:
    RENOVATE_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_EXTRA_FLAGS
  rules:
    - when: on_success
  allow_failure: false
renovate:validate:
  image:
    name: ghcr.io/renovatebot/renovate:39
    pull_policy: always
  cache:
    key: renovate-${CI_COMMIT_REF_SLUG}
    paths:
      - renovate/cache/renovate/repository/
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  extends:
    - ".renovate:validate"
  variables:
    RENOVATE_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_EXTRA_FLAGS
  rules:
    - when: on_success
  allow_failure: false
  stage: test
stages:
  - ".pre"
  - lint:commit
  - version
  - test
  - release
  - ".post"
[0m
[90m2025-07-31T09:08:06Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/uniget-org/renovate-custom
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/edgeworks-public/renovate-bot
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
default:
  tags:
    - gitlab-runner
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
    - if: $CI_PIPELINE_SOURCE == "web"
    - when: always
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovate_bot@gitlab.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_ONBOARDING_CONFIG_FILE_NAME: renovate.json5
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: info
  RENOVATE_AUTODISCOVER: 'true'
  LOG_LEVEL: info
  RENOVATE_CONFIG_FILE: base-config/config.js
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=true"
  CI_RENOVATE_IMAGE: cr.geekfarmer.dev/renovate/renovate
  DOCKER_AUTH_CONFIG: |
    {
      "auths": {
        "${NEXUS_REGISTRY}": {
                 "username": "${NEXUS_USERNAME}",
                 "password": "${NEXUS_PASSWORD}"
        }
      }
    }
stages:
  - ".pre"
  - test
  - deploy
  - ".post"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
renovate-lint:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  extends: renovate-config-validator
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
renovate:
  stage: deploy
  resource_group: production
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
gitlab-token-cleanup:
  stage: ".post"
  image:
    name: "${NEXUS_REGISTRY}/alpine:latest"
  interruptible: false
  script: "set -eo pipefail\napk add --no-cache curl jq\nif [[ -z $RENOVATE_TOKEN ]]\nthen \n  echo \"RENOVATE_TOKEN is NULL. Exiting..\"\n  exit 1\nelse\n  TOKEN_ID=$(curl --request GET --header \"PRIVATE-TOKEN: $RENOVATE_TOKEN\" \"https://gitlab.com/api/v4/personal_access_tokens/self\" | jq .id)\n  ROTATED_TOKEN=$(curl --request POST --header \"PRIVATE-TOKEN: $RENOVATE_TOKEN\" \"https://gitlab.com/api/v4/personal_access_tokens/$TOKEN_ID/rotate\" | jq -r .token)\n  echo -e \"\\nRotated GitLab Token\"\ncurl --request PUT --header \"PRIVATE-TOKEN: $ROTATED_TOKEN\" \\\n \"https://gitlab.com/api/v4/projects/52914869/variables/RENOVATE_TOKEN\" --form \"value=$ROTATED_TOKEN\"\nfi\n"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/devsecopsstack/renovate
[90m2025-07-31T09:08:07Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/softcomweb/softcomweb_renovate
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.440.7@sha256:1ee424e0ed4d8e64e5bb2d442d6bc72b3809bb9d0cf804f4b7180caa47d6002a
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.16.0@sha256:c7dc4526336b439a6a8f4097129c016876676cf54d42db096648072c396cfa98
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.16.0@sha256:c7dc4526336b439a6a8f4097129c016876676cf54d42db096648072c396cfa98
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/amdap/adjunct/renovate
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.142.7@sha256:8327ee1726142dcc504d349d84c0e7f41656867e598ea7669bb7cf23786610a2
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_HOST_RULES: '[{"matchHost": "${CI_REGISTRY}", "username": "${CI_USER_NAME}", "password": "${CI_USER_PASSWORD}"},{"domainName": "docker.io", "username": "${DOCKERHUB_USER_NAME}", "password": "${DOCKERHUB_USER_PASSWORD}"}]'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - LOG_LEVEL=debug renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - LOG_LEVEL=debug renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - LOG_LEVEL=debug renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.16.0@sha256:123cab42b52f54c892738445e147c9d8512bb19c0cedc6b383518a427ed474bc
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.16.0@sha256:123cab42b52f54c892738445e147c9d8512bb19c0cedc6b383518a427ed474bc
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/Orange-OpenSource/k8s-tz/tools/renovate
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".lint-script": "# BEGSCRIPT\necho \"\U0001F575️ checking if commitlint config file is present\"\nif [ ! -f \"${COMMITLINT_CONFIG_FILE}\" ]\nthen\n  echo \"\U0001F527 using default configuration for commitlint\"\n  echo \"module.exports = {  extends: ['@commitlint/config-conventional'], rules: {'body-max-line-length': [0, 'always', 150]} };\" > \"${COMMITLINT_CONFIG_FILE}\"\nfi\n# ENDSCRIPT\n"
lint:commit:
  stage: build
  image:
    name: commitlint/commitlint:latest
    entrypoint:
      - ''
  variables:
    COMMITLINT_CONFIG_FILE: commitlint.config.js
  before_script:
    - apk add --no-cache git
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - "# BEGSCRIPT\necho \"\U0001F575️ checking if commitlint config file is present\"\nif [ ! -f \"${COMMITLINT_CONFIG_FILE}\" ]\nthen\n  echo \"\U0001F527 using default configuration for commitlint\"\n  echo \"module.exports = {  extends: ['@commitlint/config-conventional'], rules: {'body-max-line-length': [0, 'always', 150]} };\" > \"${COMMITLINT_CONFIG_FILE}\"\nfi\n# ENDSCRIPT\n"
    - commitlint --color --verbose --from "${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --to HEAD
  rules:
    - if: $COMMIT_CHECK_DISABLED == "true" || $JOBS_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-commitlint/"
      when: never
    - if: "$CI_MERGE_REQUEST_ID"
variables:
  GIT_MAX_COMMIT: '1'
  GIT_MAIN_BRANCH: main
  MARKDOWN_PATH_EXCLUSION: "$PATH_EXCLUSION"
  YAML_PATH_EXCLUSION: "$PATH_EXCLUSION"
  REUSE_ALLOW_FAILURE: 'true'
  REUSE_LINT_ENABLED: 'true'
  REUSE_LINT_DOCKER_IMAGE: registry.gitlab.com/Orange-OpenSource/k8s-tz/tools/reuse-lint
  KUBE_SCORE_OPTS: ''
  RENOVATE_CONFIG_FILE: renovate.json
  RENOVATE_IMAGE: renovate/renovate:latest
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_TOKEN: "$BOT_TOKEN"
  GITLEAKS_IMAGE: docker.io/zricethezav/gitleaks:latest
  GITLEAKS_ARGS: "--verbose --redact"
  GITLEAKS_RULES: ''
  PROD_REF: "/^(master|main)$/"
  INTEG_REF: "/^develop$/"
  SEMREL_IMAGE: docker.io/library/node:lts-slim
  SEMREL_HOOKS_DIR: "."
  SEMREL_TAG_FORMAT: "$${version}"
  SEMREL_REQUIRED_PLUGINS_FILE: semrel-required-plugins.txt
  SEMREL_VERIFY_CONDITIONS_CMD: verify-conditions.sh
  SEMREL_VERIFY_RELEASE_CMD: verify-release.sh
  SEMREL_PREPARE_CMD: prepare.sh
  SEMREL_PUBLISH_CMD: publish.sh
  SEMREL_SUCCESS_CMD: success.sh
  SEMREL_FAIL_CMD: fail.sh
  SEMREL_VERSION: latest
  SEMREL_EXEC_VERSION: latest
  SEMREL_CONFIG_DIR: "."
  SEMREL_CHANGELOG_ENABLED: false
  SEMREL_CHANGELOG_FILE: CHANGELOG.md
  SEMREL_CHANGELOG_TITLE: ''
  SEMREL_DRY_RUN: false
  SEMREL_EXTRA_ARGS: ''
  SEMREL_AUTO_RELEASE_ENABLED: 'true'
  SEMREL_COMMIT_MESSAGE: ''
  SEMREL_RELEASE_DISABLED: false
  SEMREL_INFO_ON: prod
  SEMREL_COMMIT_SPEC: angular
  SEMREL_COMMIT_ANALYZER_PLUGIN: "@semantic-release/commit-analyzer"
  SEMREL_RELEASE_NOTES_GENERATOR_PLUGIN: "@semantic-release/release-notes-generator"
  SEMREL_GITLAB_PLUGIN: "@semantic-release/gitlab"
  SEMREL_CHANGELOG_PLUGIN: "@semantic-release/changelog"
  SEMREL_GIT_PLUGIN: "@semantic-release/git"
  SEMREL_EXEC_PLUGIN: "@semantic-release/exec"
  SEMREL_BRANCHES_REF: "/^(master|main)$/"
  PATH_EXCLUSION: "./ci"
  GITLAB_TOKEN: "$BOT_TOKEN"
  TEMPLATE_VERSION_VARNAME: "|__SET_ME__|"
  TEMPLATE_FILES_TO_BUMP: ''
  GITLAB_CI_FILES: gitlab-ci-renovate-lint*.yml
  SEMREL_GPG_SIGNKEY: "$BOT_GIT_PRIVATE_KEY_FILE"
  TEMPLATE_TEMPLATE_VERSION: 1.8.45
  PROJECT_TO_ALLOW_PUSH_TO: "${CI_PROJECT_PATH}"
  BRANCH_TO_ALLOW_PUSH_TO: "${CI_DEFAULT_BRANCH}"
  BRANCH_UNLOCKED_ACCESS_LEVEL: maintainer
  BRANCH_LOCKED_ACCESS_LEVEL: no access
".git-max-commits-script": "# BEGSCRIPT\necho \"\U0001F575️  Checking that we have less than ${GIT_MAX_COMMIT} in the branch\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\nNB_COMMITS=$(git rev-list --count \"${COMMON_ANCESTOR}..HEAD\")\nif [ \"${NB_COMMITS}\" -gt \"${GIT_MAX_COMMIT}\" ]\nthen\n  echo \"\U0001F622 the number of your commits (${NB_COMMITS}) is greater than allowed (${GIT_MAX_COMMIT})\"\n  exit 1\nfi\necho \"\U0001F642 All good!\"\n# ENDSCRIPT\n"
lint:git:max-commits:
  stage: build
  image:
    name: bitnami/git
  before_script:
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - "# BEGSCRIPT\necho \"\U0001F575️  Checking that we have less than ${GIT_MAX_COMMIT} in the branch\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\nNB_COMMITS=$(git rev-list --count \"${COMMON_ANCESTOR}..HEAD\")\nif [ \"${NB_COMMITS}\" -gt \"${GIT_MAX_COMMIT}\" ]\nthen\n  echo \"\U0001F622 the number of your commits (${NB_COMMITS}) is greater than allowed (${GIT_MAX_COMMIT})\"\n  exit 1\nfi\necho \"\U0001F642 All good!\"\n# ENDSCRIPT\n"
  rules:
    - if: $GIT_MAX_COMMITS_CHECK_DISABLED == "true" || $JOBS_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-maxcommits/"
      when: never
    - if: "$CI_MERGE_REQUEST_ID"
".git-signed-scripts": "# BEGSCRIPT\necho \"\U0001F575️  Checking that the submitted commits are signed\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\ngit log --pretty=format:'%h:%s' \"${COMMON_ANCESTOR}..HEAD\" | while read -r commit\ndo\n  printf \".\"\n  hash=$(echo \"${commit}\" | awk -F  \":\" '{print $1}')\n  title=$(echo \"${commit}\" | awk -F  \":\" '{print $2}')\n  git cat-file commit \"${hash}\" | grep gpgsig  > /dev/null || FAILED=true\n  if [ \"${FAILED}\" ]\n  then\n    touch /tmp/failed\n    echo \"\"\n    echo \"⚠️ Commit ${title} (${hash}) is not signed\"\n  fi\ndone\necho \"\"\nif [ -e /tmp/failed ]\nthen\n  echo \"\U0001F622 Some git are not well signed\"\n  rm /tmp/failed\n  exit 1\nelse\n  echo \"\U0001F642 All good!\"\nfi\n# ENDSCRIPT\n"
lint:git:signed:
  stage: build
  image:
    name: bitnami/git
  before_script:
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - "# BEGSCRIPT\necho \"\U0001F575️  Checking that the submitted commits are signed\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\ngit log --pretty=format:'%h:%s' \"${COMMON_ANCESTOR}..HEAD\" | while read -r commit\ndo\n  printf \".\"\n  hash=$(echo \"${commit}\" | awk -F  \":\" '{print $1}')\n  title=$(echo \"${commit}\" | awk -F  \":\" '{print $2}')\n  git cat-file commit \"${hash}\" | grep gpgsig  > /dev/null || FAILED=true\n  if [ \"${FAILED}\" ]\n  then\n    touch /tmp/failed\n    echo \"\"\n    echo \"⚠️ Commit ${title} (${hash}) is not signed\"\n  fi\ndone\necho \"\"\nif [ -e /tmp/failed ]\nthen\n  echo \"\U0001F622 Some git are not well signed\"\n  rm /tmp/failed\n  exit 1\nelse\n  echo \"\U0001F642 All good!\"\nfi\n# ENDSCRIPT\n"
  rules:
    - if: $GIT_SIGNED_CHECK_DISABLED == "true" || $JOBS_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-gitsigned/"
      when: never
    - if: "$CI_MERGE_REQUEST_ID"
lint:markdown:
  stage: build
  image:
    name: 06kellyjac/markdownlint-cli:latest
  script:
    - |
      if [ -z "$MARKDOWN_PATH_EXCLUSION" ]
      then
        markdownlint .
      else
        markdownlint --ignore "$MARKDOWN_PATH_EXCLUSION" .
      fi
  rules:
    - if: $MARKDOWN_CHECK_DISABLED == "true" || $JOBS_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-markdownlint/"
      when: never
    - if: "$CI_MERGE_REQUEST_ID"
      changes:
        paths:
          - "**/*.md"
lint:yaml:
  stage: build
  image:
    name: registry.gitlab.com/pipeline-components/yamllint
  before_script:
    - "if [ -z \"${YAML_PATH_EXCLUSION}\" ]\nthen\n  echo \"\U0001F575️ No path exclusion set\"\n  export PATH_EXCL_CMD=\"\"\nelse\n  echo \"\U0001F575️ Path exclusion set to ${YAML_PATH_EXCLUSION}\"\n  export PATH_EXCL_CMD=\"-type d -path ${YAML_PATH_EXCLUSION} -prune -o\"\nfi\n"
  script:
    - pip install yamllint-junit
    - |
      find . $PATH_EXCL_CMD -iname '*.y*ml' -print |
      xargs yamllint -f parsable | tee /dev/stderr |
      yamllint-junit -o yamllint-junit.xml
  artifacts:
    reports:
      junit:
        - yamllint-junit.xml
  rules:
    - if: $YAML_CHECK_DISABLED == "true" || $JOBS_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-yamllint/"
      when: never
    - if: "$CI_MERGE_REQUEST_ID"
      changes:
        paths:
          - "**/*.yml"
          - "**/*.yaml"
lint:reuse:
  stage: build
  image:
    name: fsfe/reuse:5.0.2-debian
    entrypoint:
      - ''
  needs: []
  script:
    - reuse lint
  rules:
    - if: $REUSE_LINT_ENABLED != "true"
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /skip-reuse-link-check/"
      when: never
    - if: $REUSE_ALLOW_FAILURE == "true"
      when: on_success
    - when: on_success
".renovate-base":
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
lint:renovate:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator --strict
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - when: never
  parallel:
    matrix:
      - RENOVATE_CONFIG_FILE: config.js
      - RENOVATE_CONFIG_FILE: applications.json
      - RENOVATE_CONFIG_FILE: default.json
      - RENOVATE_CONFIG_FILE: docker.json
      - RENOVATE_CONFIG_FILE: go.json
      - RENOVATE_CONFIG_FILE: renovate.json
      - RENOVATE_CONFIG_FILE: xk6.json
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_BRANCH =~ "/renovate\/" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
".test-policy":
  rules:
    - if: "$CI_COMMIT_TAG"
    - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
    - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
      when: manual
      allow_failure: true
    - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
      allow_failure: true
    - when: on_success
".gitleaks-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          fi
          ;;
        contains*)
          # shellcheck disable=SC2076
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  function install_gitleaks_rules() {
    if [[ -f ".gitleaks.toml" ]]
    then
      log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
    elif [[ "$GITLEAKS_RULES" ]]
    then
      log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
      echo "$GITLEAKS_RULES" > .gitleaks.toml
    else
      log_info "No Gitleaks rules found: use default"
    fi
  }

  unscope_variables

  # ENDSCRIPT
gitleaks:
  image:
    name: "$GITLEAKS_IMAGE"
    entrypoint:
      - ''
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - gitleaks
        - 2.7.3
  stage: test
  needs: []
  variables:
    GIT_DEPTH: '10'
    GITLEAKS_ARGS: "--verbose"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      function install_gitleaks_rules() {
        if [[ -f ".gitleaks.toml" ]]
        then
          log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
        elif [[ "$GITLEAKS_RULES" ]]
        then
          log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
          echo "$GITLEAKS_RULES" > .gitleaks.toml
        else
          log_info "No Gitleaks rules found: use default"
        fi
      }

      unscope_variables

      # ENDSCRIPT
    - mkdir -p -m 777 reports
    - install_gitleaks_rules
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - |
      log_opts=""
      if [[ "$CI_MERGE_REQUEST_DIFF_BASE_SHA" ]]
      then
        log_info "Merge Request only analysis (\\e[33;1m${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}\\e[0m)"
        log_opts="${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}"
      else
        log_info "Full branch analysis (\\e[33;1m${CI_COMMIT_SHA}\\e[0m and ancestors)"
        log_opts="${CI_COMMIT_SHA}"
      fi
    - gitleaks git ${TRACE+--log-level debug} $gitleaks_rule_opts --log-opts "$log_opts" --report-path reports/gitleaks.native.json $GITLEAKS_ARGS .
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/gitleaks.*
  rules:
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
".semrel-scripts": "# BEGSCRIPT\nset -e\n\nfunction log_info() {\n    echo -e \"[\\\\e[1;94mINFO\\\\e[0m] $*\"\n}\n\nfunction log_warn() {\n    echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n    echo -e \"[\\\\e[1;91mERROR\\\\e[0m] $*\"\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction assert_defined() {\n  if [[ -z \"$1\" ]]\n  then\n    log_error \"$2\"\n    exit 1\n  fi\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n\n  # configure for npm\n  echo \"$certs\" > /tmp/custom-ca.pem\n  export NODE_EXTRA_CA_CERTS=/tmp/custom-ca.pem\n\n  # import in Java keystore (if keytool command found)\n  if command -v keytool > /dev/null\n  then\n    # shellcheck disable=SC2046\n    javahome=${JAVA_HOME:-$(dirname $(readlink -f $(command -v java)))/..}\n    # shellcheck disable=SC2086\n    keystore=${JAVA_KEYSTORE_PATH:-$(ls -1 $javahome/jre/lib/security/cacerts 2>/dev/null || ls -1 $javahome/lib/security/cacerts 2>/dev/null || echo \"\")}\n    if [[ -f \"$keystore\" ]]\n    then\n      storepass=${JAVA_KEYSTORE_PASSWORD:-changeit}\n      nb_certs=$(echo \"$certs\" | grep -c 'END CERTIFICATE')\n      log_info \"importing $nb_certs certificates in Java keystore \\\\e[33;1m$keystore\\\\e[0m...\"\n      for idx in $(seq 0 $((nb_certs - 1)))\n      do\n        # TODO: use keytool option -trustcacerts ?\n        if echo \"$certs\" | awk \"n==$idx { print }; /END CERTIFICATE/ { n++ }\" | keytool -noprompt -import -alias \"imported CA Cert $idx\" -keystore \"$keystore\" -storepass \"$storepass\"\n        then\n          log_info \"... CA certificate [$idx] successfully imported\"\n        else\n          log_warn \"... Failed importing CA certificate [$idx]: abort\"\n          return\n        fi\n      done\n    else\n      log_warn \"Java keystore \\\\e[33;1m$keystore\\\\e[0m not found: could not import CA certificates\"\n    fi\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue;\n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue;\n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        fi\n        ;;\n      contains*)\n        # shellcheck disable=SC2076\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ ! __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v node > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)      \n      if node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$url','$decoded').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully dl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\nfunction download_file() {\n  if command -v wget &> /dev/null\n  then\n    wget \"$1\" -O \"$2\"\n  elif command -v curl &> /dev/null\n  then\n    curl -sfL \"$1\" -o \"$2\"\n  elif command -v node &> /dev/null\n  then\n    node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$1','$2').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\"\n  else\n    fail \"wget, curl or node required\"\n  fi\n}\n\nfunction github_get_latest_version() {\n  if command -v curl &> /dev/null\n  then\n    curl -sSf -I \"https://github.com/$1/releases/latest\" | awk -F '/' -v RS='\\r\\n' '/location:/ {print $NF}'\n  elif command -v node &> /dev/null\n  then\n    node -e \"const https=require('https'); const options={hostname:'github.com', path:'/$1/releases/latest', method:'HEAD'}; https.request(options, (res) => {tokens=res.headers.location.split('/'); console.log(tokens[tokens.length-1]); res.req.destroy()}).end();\"\n  else\n    fail \"curl or node required\"\n  fi\n}\n\nfunction maybe_install_packages() {\n  if command -v apt-get > /dev/null\n  then\n    # Debian\n    if ! dpkg --status \"$@\" > /dev/null\n    then\n      apt-get update\n      apt-get install --no-install-recommends --yes --quiet \"$@\"\n    fi\n  elif command -v apk > /dev/null\n  then\n    # Alpine\n    if ! apk info --installed \"$@\" > /dev/null\n    then\n      apk add --no-cache \"$@\"\n    fi\n  else\n    log_error \"... didn't find any supported package manager to install $*\"\n    exit 1\n  fi\n}\n\nfunction extract_release_config_from_package_json() {\n  package_json=\"./package.json\"\n  if [[ -f \"${package_json}\" ]]; then\n    release_config=$(node -pe \"JSON.stringify(require('${package_json}').release, null, 2)\")\n    case \"$release_config\" in\n      \"undefined\"|\"null\") release_config=\"\" ;;\n    esac\n    echo \"$release_config\"\n  fi\n}\n\nfunction prepare_semantic_release() {\n  git config --global --add safe.directory \"$(pwd)\"\n  if [[ -f \".releaserc\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc\"\n  elif [[ -f \".releaserc.yml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yml\"\n  elif [[ -f \".releaserc.yaml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yaml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yaml\"\n  elif [[ -f \".releaserc.json\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.json\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.json\"\n  elif [[ -f \".releaserc.js\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.js\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.js\"\n  else\n    releaseConfig=\"$(extract_release_config_from_package_json)\"\n    if [[ -n \"${releaseConfig}\" ]]; then\n      log_info \"release configuration found in \\\\e[33;1mpackage.json\\\\e[0m file\"\n      # exporting release configuration in dedicated file for required plugins installation\n      semrelConfigFile=\".release_config_from_package_json\"\n      echo \"${releaseConfig}\" > \"${semrelConfigFile}\"\n    else\n      log_info \"semantic release configuration file not found, generating default \\\\e[33;1m.releaserc\\\\e[0m\"\n      semrelConfigFile=\".releaserc\"\n      if [[ -n \"$TRACE\" ]]; then\n        debug=\"true\"\n      else\n        debug=\"false\"\n      fi\n      commitPresetConfig=$(generate_commit_preset_conf)\n      changelogPluginConfig=$(generate_changelog_plugin_conf)\n      execPluginConfig=$(generate_exec_plugin_conf)\n      gitPluginConfig=$(generate_git_plugin_conf)\n      {\n        echo \"debug: ${debug}\"\n        echo \"\"\n        echo \"tagFormat: '${SEMREL_TAG_FORMAT}'\"\n        echo \"\"\n        echo \"plugins: \"\n        echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - - '${SEMREL_RELEASE_NOTES_GENERATOR_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - '${SEMREL_GITLAB_PLUGIN}'\"\n        echo \"${changelogPluginConfig}\"\n        echo \"${execPluginConfig}\"\n        echo \"${gitPluginConfig}\"\n        echo \"\"\n        echo \"branches:\"\n        echo \"  - '${CI_COMMIT_REF_NAME}'\"\n      } > \"${semrelConfigFile}\"\n      cat \"${semrelConfigFile}\"\n    fi\n  fi\n}\n\nfunction install_semantic_release_plugins() {\n  log_info \"installing required plugins\"\n\n  # shellcheck disable=SC2046\n  if [[ -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" ]]; then\n    while IFS= read -r line || [[ -n \"$line\" ]]\n    do\n      required_plugins=\"${required_plugins} $line\"\n    done <<< $(cat \"${SEMREL_REQUIRED_PLUGINS_FILE}\")\n  fi\n\n  # shellcheck disable=SC2046\n  while IFS= read -r line || [[ -n \"$line\" ]]\n  do\n    plugin=$(echo \"$line\" | cut -d\\\" -f2)\n    required_plugins=\"${required_plugins} $plugin\"\n  done <<< $(yq eval \".plugins[]\" \"${semrelConfigFile}\" -o=json --indent 0)\n\n  # shellcheck disable=SC2086\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" ${required_plugins}\n  \n  if [[ ! -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" && -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    case \"$SEMREL_COMMIT_SPEC\" in\n      cc)\n        SEMREL_COMMIT_SPEC=conventionalcommits\n        ;;\n    esac\n    npm install --global \"conventional-changelog-$SEMREL_COMMIT_SPEC\" \n  fi\n\n  if [[ -n \"$TRACE\" ]]; then\n      if [[ -f \"./package.json\" ]]; then\n        log_info \"Installed devDependencies...\"\n        npm pkg get devDependencies\n      fi\n      log_info \"Globally installed packages...\"\n      npm list --global\n    fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_commit_preset_conf() {\n  if [[ -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    if [[ \"${SEMREL_COMMIT_SPEC}\" == \"cc\" ]]; then\n      conventionalCommits=\"conventionalcommits\"  \n    fi   \n    echo \"    - preset: '${conventionalCommits:-$SEMREL_COMMIT_SPEC}'\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_changelog_plugin_conf() {\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]]; then\n    if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]] || [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n      if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n        changeLogConfig=\"changelogFile: '${SEMREL_CHANGELOG_FILE}'\"\n      fi\n      if [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n        changeLogConfig=$(echo -e \"${changeLogConfig:+${changeLogConfig}\\n      }changelogTitle: '${SEMREL_CHANGELOG_TITLE}'\")\n      fi\n      echo \"  - - '${SEMREL_CHANGELOG_PLUGIN}'\"\n      echo \"    - ${changeLogConfig}\"\n    else\n      echo \"  - '${SEMREL_CHANGELOG_PLUGIN}'\"\n    fi\n  else\n    echo \"\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_git_plugin_conf() {\n  # git plugin has default changelog file as asset by default so\n  # we need to add it explicitly if the user configured a custom changelogFile\n  echo \"  - - '${SEMREL_GIT_PLUGIN}'\"\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]] && [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n    echo \"    - assets:\"\n    echo \"      - '${SEMREL_CHANGELOG_FILE}'\"\n    echo \"      - 'package.json'\"\n    echo \"      - 'package-lock.json'\"\n    echo \"      - 'npm-shrinkwrap.json'\"\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"      message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  else\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"    - message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_exec_plugin_conf() {\n  scriptsConfig=\"\"\n  tabs=\"    - \"\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_CONDITIONS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=\"${tabs}verifyConditionsCmd: '${scriptPath}'\"\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_RELEASE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}verifyReleaseCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PREPARE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}prepareCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PUBLISH_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}publishCmd: '\\\"${scriptPath}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${options.branch}\\\" \\\"\\${commits.length}\\\" \\\"\\${Date.now()}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_SUCCESS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}successCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_FAIL_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}failCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  if [[ -n \"${scriptsConfig}\" ]]; then\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"${scriptsConfig}\"\n  else\n    echo \"\"\n  fi\n}\n\nfunction maybe_install_yq() {\n  if ! command -v yq > /dev/null\n  then\n    yq_version=$(github_get_latest_version mikefarah/yq)\n    yq_binary=yq_linux_amd64\n    yq_url=\"https://github.com/mikefarah/yq/releases/download/${yq_version}/${yq_binary}.tar.gz\"\n    yq_cache=\"$XDG_CACHE_HOME/yq-$(echo \"$yq_url\" | md5sum | cut -d\" \" -f1)\"\n\n    if [[ -f \"$yq_cache\" ]]\n    then\n      log_info \"yq found in cache: reuse\"\n    else\n      log_info \"yq not found in cache: download\"\n      log_info \"Download latest yq version: \\\\e[32m$yq_url\\\\e[0m\"\n      download_file \"${yq_url}\" \"${yq_binary}.tar.gz\"\n      tar xvf \"${yq_binary}.tar.gz\"\n      mkdir -p \"$XDG_CACHE_HOME\"\n      mv \"${yq_binary}\" \"$yq_cache\"\n    fi \n    ln -s \"$yq_cache\" /usr/bin/yq\n  fi\n}\n\nfunction dotenv_semrel_info() {\n  # removing user conf as we need to override it temporarily (git reset will put things back to normal)\n  # see https://www.npmjs.com/package/cosmiconfig for configuration files resolution order (we will use .releaserc)\n  releaserc_file=\"${semrelConfigFile}\"\n  rm -f \"package.json\"\n\n  yq eval -oyaml -P 'with_entries(select((.key | . != \"plugins\") and (.key | . != \"verifyConditions\")))' \"${releaserc_file}\" > \"${releaserc_file}.new\"\n\n  # Generating the hook scripts that will generate the dotenv file\n  # The dotenv file is generated in $TMPDIR so it will survive the git reset\n  dotenv_tmp=\"$(mktemp -t semrel-info-XXXXXXXXXX.dotenv)\"\n  commitPresetConfig=$(generate_commit_preset_conf)\n  export_last_version_hook_script=\"./export-last-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_LAST_VERSION=\\$1\\\"\"\n    echo \"} > \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_last_version_hook_script}\"\n  chmod +x ${export_last_version_hook_script}\n\n  export_next_version_hook_script=\"./export-next-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION=\\$1\\\"\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION_TYPE=\\$2\\\"\"\n    echo \"} >> \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_next_version_hook_script}\"\n  chmod +x ${export_next_version_hook_script}\n\n  if [[ -n \"$TRACE\" ]]; then\n    echo \"generated analyzeCommits hook script:\"\n    cat \"${export_last_version_hook_script}\"\n    echo \"generated verifyRelease hook script:\"\n    cat \"${export_next_version_hook_script}\"\n  fi\n\n  # Generating temporary semantic-release config\n  {\n    echo \"\"\n    echo \"# injected (replace your plugins) plugins by the template to generate dotenv\"\n    echo \"\"\n    echo \"plugins:\"\n    echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n    echo \"${commitPresetConfig}\"\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"    - analyzeCommitsCmd: '\\\"${export_last_version_hook_script}\\\" \\\"\\${lastRelease.version}\\\"'\"\n    echo \"      verifyReleaseCmd: '\\\"${export_next_version_hook_script}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\"\n    echo \"\"\n  } >> \"${releaserc_file}.new\"\n\n  mv -f \"${releaserc_file}.new\" \".releaserc\"\n\n  if [[ -n \"$TRACE\" ]]; then\n    log_info \"--- generated .releaserc:\"\n    cat \".releaserc\"\n  fi\n\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" \"${SEMREL_EXEC_PLUGIN}@${SEMREL_EXEC_VERSION}\"\n  semantic-release --dry-run\n\n  # Rollback temporary semantic-release configuration\n  git reset --hard\n\n  mv \"${dotenv_tmp}\" ./semrel.out.env\n\n  log_info \"--- semrel dotenv artifact:\"\n  cat ./semrel.out.env\n}\n\nfunction configure_commit_signing() {\n  if [[ -z \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    log_info \"No GPG key provided.\"\n    return\n  fi\n\n  log_info \"Setting commit signing up.\"\n\n  if [[ ! -f \"${HOME}/.gnupg\" ]]; then\n    log_info \"creating GPG base configuration\"\n    gpg -k\n  fi\n\n  if [[ ! -f \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    fail \"SEMREL_GPG_SIGNKEY is not a file.\"\n  fi\n\n  if ! gpg --batch --dry-run --yes --import \"${SEMREL_GPG_SIGNKEY}\"; then\n    fail \"Could not import GPG key.\"\n  fi\n\n  # import the key and extract its ID from the command output\n  _GPG_KEY_ID=$(gpg --batch --yes --import \"${SEMREL_GPG_SIGNKEY}\" 2>&1 | grep \"key [A-F0-9]\" | head -n 1 | sed -e 's/^.*key \\([A-F0-9]*\\): .*$/\\1/g')\n\n  if [[ -z \"${_GPG_KEY_ID}\" ]]; then\n      fail \"Could not extract key ID from gpg --import command.\"\n  fi\n\n  git config --global commit.gpgsign true\n  git config --global user.signingkey \"${_GPG_KEY_ID}\"\n\n  log_info \"Commit signing setup complete.\"\n}\n\nfunction clear_vault_env() {\n  # unset service container env when Vault variant is enabled (SemRel censors them all due to 'SECRET' in the name)\n  # shellcheck disable=SC2046\n  unset $(env | awk -F '=' '/^VAULT_SECRETS_PROVIDER_/{print $1}' | xargs)\n}\n\nunscope_variables\neval_all_secrets\n\n# ENDSCRIPT\n"
".semrel-base":
  image: "$SEMREL_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - semrel
        - 3.15.0
  before_script:
    - "# BEGSCRIPT\nset -e\n\nfunction log_info() {\n    echo -e \"[\\\\e[1;94mINFO\\\\e[0m] $*\"\n}\n\nfunction log_warn() {\n    echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n    echo -e \"[\\\\e[1;91mERROR\\\\e[0m] $*\"\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction assert_defined() {\n  if [[ -z \"$1\" ]]\n  then\n    log_error \"$2\"\n    exit 1\n  fi\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n\n  # configure for npm\n  echo \"$certs\" > /tmp/custom-ca.pem\n  export NODE_EXTRA_CA_CERTS=/tmp/custom-ca.pem\n\n  # import in Java keystore (if keytool command found)\n  if command -v keytool > /dev/null\n  then\n    # shellcheck disable=SC2046\n    javahome=${JAVA_HOME:-$(dirname $(readlink -f $(command -v java)))/..}\n    # shellcheck disable=SC2086\n    keystore=${JAVA_KEYSTORE_PATH:-$(ls -1 $javahome/jre/lib/security/cacerts 2>/dev/null || ls -1 $javahome/lib/security/cacerts 2>/dev/null || echo \"\")}\n    if [[ -f \"$keystore\" ]]\n    then\n      storepass=${JAVA_KEYSTORE_PASSWORD:-changeit}\n      nb_certs=$(echo \"$certs\" | grep -c 'END CERTIFICATE')\n      log_info \"importing $nb_certs certificates in Java keystore \\\\e[33;1m$keystore\\\\e[0m...\"\n      for idx in $(seq 0 $((nb_certs - 1)))\n      do\n        # TODO: use keytool option -trustcacerts ?\n        if echo \"$certs\" | awk \"n==$idx { print }; /END CERTIFICATE/ { n++ }\" | keytool -noprompt -import -alias \"imported CA Cert $idx\" -keystore \"$keystore\" -storepass \"$storepass\"\n        then\n          log_info \"... CA certificate [$idx] successfully imported\"\n        else\n          log_warn \"... Failed importing CA certificate [$idx]: abort\"\n          return\n        fi\n      done\n    else\n      log_warn \"Java keystore \\\\e[33;1m$keystore\\\\e[0m not found: could not import CA certificates\"\n    fi\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue;\n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue;\n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        fi\n        ;;\n      contains*)\n        # shellcheck disable=SC2076\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ ! __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v node > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)      \n      if node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$url','$decoded').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully dl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\nfunction download_file() {\n  if command -v wget &> /dev/null\n  then\n    wget \"$1\" -O \"$2\"\n  elif command -v curl &> /dev/null\n  then\n    curl -sfL \"$1\" -o \"$2\"\n  elif command -v node &> /dev/null\n  then\n    node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$1','$2').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\"\n  else\n    fail \"wget, curl or node required\"\n  fi\n}\n\nfunction github_get_latest_version() {\n  if command -v curl &> /dev/null\n  then\n    curl -sSf -I \"https://github.com/$1/releases/latest\" | awk -F '/' -v RS='\\r\\n' '/location:/ {print $NF}'\n  elif command -v node &> /dev/null\n  then\n    node -e \"const https=require('https'); const options={hostname:'github.com', path:'/$1/releases/latest', method:'HEAD'}; https.request(options, (res) => {tokens=res.headers.location.split('/'); console.log(tokens[tokens.length-1]); res.req.destroy()}).end();\"\n  else\n    fail \"curl or node required\"\n  fi\n}\n\nfunction maybe_install_packages() {\n  if command -v apt-get > /dev/null\n  then\n    # Debian\n    if ! dpkg --status \"$@\" > /dev/null\n    then\n      apt-get update\n      apt-get install --no-install-recommends --yes --quiet \"$@\"\n    fi\n  elif command -v apk > /dev/null\n  then\n    # Alpine\n    if ! apk info --installed \"$@\" > /dev/null\n    then\n      apk add --no-cache \"$@\"\n    fi\n  else\n    log_error \"... didn't find any supported package manager to install $*\"\n    exit 1\n  fi\n}\n\nfunction extract_release_config_from_package_json() {\n  package_json=\"./package.json\"\n  if [[ -f \"${package_json}\" ]]; then\n    release_config=$(node -pe \"JSON.stringify(require('${package_json}').release, null, 2)\")\n    case \"$release_config\" in\n      \"undefined\"|\"null\") release_config=\"\" ;;\n    esac\n    echo \"$release_config\"\n  fi\n}\n\nfunction prepare_semantic_release() {\n  git config --global --add safe.directory \"$(pwd)\"\n  if [[ -f \".releaserc\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc\"\n  elif [[ -f \".releaserc.yml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yml\"\n  elif [[ -f \".releaserc.yaml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yaml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yaml\"\n  elif [[ -f \".releaserc.json\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.json\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.json\"\n  elif [[ -f \".releaserc.js\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.js\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.js\"\n  else\n    releaseConfig=\"$(extract_release_config_from_package_json)\"\n    if [[ -n \"${releaseConfig}\" ]]; then\n      log_info \"release configuration found in \\\\e[33;1mpackage.json\\\\e[0m file\"\n      # exporting release configuration in dedicated file for required plugins installation\n      semrelConfigFile=\".release_config_from_package_json\"\n      echo \"${releaseConfig}\" > \"${semrelConfigFile}\"\n    else\n      log_info \"semantic release configuration file not found, generating default \\\\e[33;1m.releaserc\\\\e[0m\"\n      semrelConfigFile=\".releaserc\"\n      if [[ -n \"$TRACE\" ]]; then\n        debug=\"true\"\n      else\n        debug=\"false\"\n      fi\n      commitPresetConfig=$(generate_commit_preset_conf)\n      changelogPluginConfig=$(generate_changelog_plugin_conf)\n      execPluginConfig=$(generate_exec_plugin_conf)\n      gitPluginConfig=$(generate_git_plugin_conf)\n      {\n        echo \"debug: ${debug}\"\n        echo \"\"\n        echo \"tagFormat: '${SEMREL_TAG_FORMAT}'\"\n        echo \"\"\n        echo \"plugins: \"\n        echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - - '${SEMREL_RELEASE_NOTES_GENERATOR_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - '${SEMREL_GITLAB_PLUGIN}'\"\n        echo \"${changelogPluginConfig}\"\n        echo \"${execPluginConfig}\"\n        echo \"${gitPluginConfig}\"\n        echo \"\"\n        echo \"branches:\"\n        echo \"  - '${CI_COMMIT_REF_NAME}'\"\n      } > \"${semrelConfigFile}\"\n      cat \"${semrelConfigFile}\"\n    fi\n  fi\n}\n\nfunction install_semantic_release_plugins() {\n  log_info \"installing required plugins\"\n\n  # shellcheck disable=SC2046\n  if [[ -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" ]]; then\n    while IFS= read -r line || [[ -n \"$line\" ]]\n    do\n      required_plugins=\"${required_plugins} $line\"\n    done <<< $(cat \"${SEMREL_REQUIRED_PLUGINS_FILE}\")\n  fi\n\n  # shellcheck disable=SC2046\n  while IFS= read -r line || [[ -n \"$line\" ]]\n  do\n    plugin=$(echo \"$line\" | cut -d\\\" -f2)\n    required_plugins=\"${required_plugins} $plugin\"\n  done <<< $(yq eval \".plugins[]\" \"${semrelConfigFile}\" -o=json --indent 0)\n\n  # shellcheck disable=SC2086\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" ${required_plugins}\n  \n  if [[ ! -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" && -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    case \"$SEMREL_COMMIT_SPEC\" in\n      cc)\n        SEMREL_COMMIT_SPEC=conventionalcommits\n        ;;\n    esac\n    npm install --global \"conventional-changelog-$SEMREL_COMMIT_SPEC\" \n  fi\n\n  if [[ -n \"$TRACE\" ]]; then\n      if [[ -f \"./package.json\" ]]; then\n        log_info \"Installed devDependencies...\"\n        npm pkg get devDependencies\n      fi\n      log_info \"Globally installed packages...\"\n      npm list --global\n    fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_commit_preset_conf() {\n  if [[ -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    if [[ \"${SEMREL_COMMIT_SPEC}\" == \"cc\" ]]; then\n      conventionalCommits=\"conventionalcommits\"  \n    fi   \n    echo \"    - preset: '${conventionalCommits:-$SEMREL_COMMIT_SPEC}'\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_changelog_plugin_conf() {\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]]; then\n    if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]] || [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n      if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n        changeLogConfig=\"changelogFile: '${SEMREL_CHANGELOG_FILE}'\"\n      fi\n      if [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n        changeLogConfig=$(echo -e \"${changeLogConfig:+${changeLogConfig}\\n      }changelogTitle: '${SEMREL_CHANGELOG_TITLE}'\")\n      fi\n      echo \"  - - '${SEMREL_CHANGELOG_PLUGIN}'\"\n      echo \"    - ${changeLogConfig}\"\n    else\n      echo \"  - '${SEMREL_CHANGELOG_PLUGIN}'\"\n    fi\n  else\n    echo \"\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_git_plugin_conf() {\n  # git plugin has default changelog file as asset by default so\n  # we need to add it explicitly if the user configured a custom changelogFile\n  echo \"  - - '${SEMREL_GIT_PLUGIN}'\"\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]] && [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n    echo \"    - assets:\"\n    echo \"      - '${SEMREL_CHANGELOG_FILE}'\"\n    echo \"      - 'package.json'\"\n    echo \"      - 'package-lock.json'\"\n    echo \"      - 'npm-shrinkwrap.json'\"\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"      message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  else\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"    - message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_exec_plugin_conf() {\n  scriptsConfig=\"\"\n  tabs=\"    - \"\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_CONDITIONS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=\"${tabs}verifyConditionsCmd: '${scriptPath}'\"\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_RELEASE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}verifyReleaseCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PREPARE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}prepareCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PUBLISH_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}publishCmd: '\\\"${scriptPath}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${options.branch}\\\" \\\"\\${commits.length}\\\" \\\"\\${Date.now()}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_SUCCESS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}successCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_FAIL_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}failCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  if [[ -n \"${scriptsConfig}\" ]]; then\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"${scriptsConfig}\"\n  else\n    echo \"\"\n  fi\n}\n\nfunction maybe_install_yq() {\n  if ! command -v yq > /dev/null\n  then\n    yq_version=$(github_get_latest_version mikefarah/yq)\n    yq_binary=yq_linux_amd64\n    yq_url=\"https://github.com/mikefarah/yq/releases/download/${yq_version}/${yq_binary}.tar.gz\"\n    yq_cache=\"$XDG_CACHE_HOME/yq-$(echo \"$yq_url\" | md5sum | cut -d\" \" -f1)\"\n\n    if [[ -f \"$yq_cache\" ]]\n    then\n      log_info \"yq found in cache: reuse\"\n    else\n      log_info \"yq not found in cache: download\"\n      log_info \"Download latest yq version: \\\\e[32m$yq_url\\\\e[0m\"\n      download_file \"${yq_url}\" \"${yq_binary}.tar.gz\"\n      tar xvf \"${yq_binary}.tar.gz\"\n      mkdir -p \"$XDG_CACHE_HOME\"\n      mv \"${yq_binary}\" \"$yq_cache\"\n    fi \n    ln -s \"$yq_cache\" /usr/bin/yq\n  fi\n}\n\nfunction dotenv_semrel_info() {\n  # removing user conf as we need to override it temporarily (git reset will put things back to normal)\n  # see https://www.npmjs.com/package/cosmiconfig for configuration files resolution order (we will use .releaserc)\n  releaserc_file=\"${semrelConfigFile}\"\n  rm -f \"package.json\"\n\n  yq eval -oyaml -P 'with_entries(select((.key | . != \"plugins\") and (.key | . != \"verifyConditions\")))' \"${releaserc_file}\" > \"${releaserc_file}.new\"\n\n  # Generating the hook scripts that will generate the dotenv file\n  # The dotenv file is generated in $TMPDIR so it will survive the git reset\n  dotenv_tmp=\"$(mktemp -t semrel-info-XXXXXXXXXX.dotenv)\"\n  commitPresetConfig=$(generate_commit_preset_conf)\n  export_last_version_hook_script=\"./export-last-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_LAST_VERSION=\\$1\\\"\"\n    echo \"} > \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_last_version_hook_script}\"\n  chmod +x ${export_last_version_hook_script}\n\n  export_next_version_hook_script=\"./export-next-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION=\\$1\\\"\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION_TYPE=\\$2\\\"\"\n    echo \"} >> \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_next_version_hook_script}\"\n  chmod +x ${export_next_version_hook_script}\n\n  if [[ -n \"$TRACE\" ]]; then\n    echo \"generated analyzeCommits hook script:\"\n    cat \"${export_last_version_hook_script}\"\n    echo \"generated verifyRelease hook script:\"\n    cat \"${export_next_version_hook_script}\"\n  fi\n\n  # Generating temporary semantic-release config\n  {\n    echo \"\"\n    echo \"# injected (replace your plugins) plugins by the template to generate dotenv\"\n    echo \"\"\n    echo \"plugins:\"\n    echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n    echo \"${commitPresetConfig}\"\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"    - analyzeCommitsCmd: '\\\"${export_last_version_hook_script}\\\" \\\"\\${lastRelease.version}\\\"'\"\n    echo \"      verifyReleaseCmd: '\\\"${export_next_version_hook_script}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\"\n    echo \"\"\n  } >> \"${releaserc_file}.new\"\n\n  mv -f \"${releaserc_file}.new\" \".releaserc\"\n\n  if [[ -n \"$TRACE\" ]]; then\n    log_info \"--- generated .releaserc:\"\n    cat \".releaserc\"\n  fi\n\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" \"${SEMREL_EXEC_PLUGIN}@${SEMREL_EXEC_VERSION}\"\n  semantic-release --dry-run\n\n  # Rollback temporary semantic-release configuration\n  git reset --hard\n\n  mv \"${dotenv_tmp}\" ./semrel.out.env\n\n  log_info \"--- semrel dotenv artifact:\"\n  cat ./semrel.out.env\n}\n\nfunction configure_commit_signing() {\n  if [[ -z \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    log_info \"No GPG key provided.\"\n    return\n  fi\n\n  log_info \"Setting commit signing up.\"\n\n  if [[ ! -f \"${HOME}/.gnupg\" ]]; then\n    log_info \"creating GPG base configuration\"\n    gpg -k\n  fi\n\n  if [[ ! -f \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    fail \"SEMREL_GPG_SIGNKEY is not a file.\"\n  fi\n\n  if ! gpg --batch --dry-run --yes --import \"${SEMREL_GPG_SIGNKEY}\"; then\n    fail \"Could not import GPG key.\"\n  fi\n\n  # import the key and extract its ID from the command output\n  _GPG_KEY_ID=$(gpg --batch --yes --import \"${SEMREL_GPG_SIGNKEY}\" 2>&1 | grep \"key [A-F0-9]\" | head -n 1 | sed -e 's/^.*key \\([A-F0-9]*\\): .*$/\\1/g')\n\n  if [[ -z \"${_GPG_KEY_ID}\" ]]; then\n      fail \"Could not extract key ID from gpg --import command.\"\n  fi\n\n  git config --global commit.gpgsign true\n  git config --global user.signingkey \"${_GPG_KEY_ID}\"\n\n  log_info \"Commit signing setup complete.\"\n}\n\nfunction clear_vault_env() {\n  # unset service container env when Vault variant is enabled (SemRel censors them all due to 'SECRET' in the name)\n  # shellcheck disable=SC2046\n  unset $(env | awk -F '=' '/^VAULT_SECRETS_PROVIDER_/{print $1}' | xargs)\n}\n\nunscope_variables\neval_all_secrets\n\n# ENDSCRIPT\n"
    - maybe_install_packages ca-certificates git openssh-client gpg gpg-agent
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
    - maybe_install_yq
    - cd "${SEMREL_CONFIG_DIR}"
    - prepare_semantic_release
    - install_semantic_release_plugins
    - clear_vault_env
  variables:
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
    npm_config_cache: "$CI_PROJECT_DIR/.npm"
  cache:
    key: "$CI_COMMIT_REF_SLUG-SEMREL"
    when: always
    paths:
      - "$CI_PROJECT_DIR/.npm"
      - "$XDG_CACHE_HOME"
semantic-release-info:
  image: "$SEMREL_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - semrel
        - 3.15.0
  before_script:
    - "# BEGSCRIPT\nset -e\n\nfunction log_info() {\n    echo -e \"[\\\\e[1;94mINFO\\\\e[0m] $*\"\n}\n\nfunction log_warn() {\n    echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n    echo -e \"[\\\\e[1;91mERROR\\\\e[0m] $*\"\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction assert_defined() {\n  if [[ -z \"$1\" ]]\n  then\n    log_error \"$2\"\n    exit 1\n  fi\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n\n  # configure for npm\n  echo \"$certs\" > /tmp/custom-ca.pem\n  export NODE_EXTRA_CA_CERTS=/tmp/custom-ca.pem\n\n  # import in Java keystore (if keytool command found)\n  if command -v keytool > /dev/null\n  then\n    # shellcheck disable=SC2046\n    javahome=${JAVA_HOME:-$(dirname $(readlink -f $(command -v java)))/..}\n    # shellcheck disable=SC2086\n    keystore=${JAVA_KEYSTORE_PATH:-$(ls -1 $javahome/jre/lib/security/cacerts 2>/dev/null || ls -1 $javahome/lib/security/cacerts 2>/dev/null || echo \"\")}\n    if [[ -f \"$keystore\" ]]\n    then\n      storepass=${JAVA_KEYSTORE_PASSWORD:-changeit}\n      nb_certs=$(echo \"$certs\" | grep -c 'END CERTIFICATE')\n      log_info \"importing $nb_certs certificates in Java keystore \\\\e[33;1m$keystore\\\\e[0m...\"\n      for idx in $(seq 0 $((nb_certs - 1)))\n      do\n        # TODO: use keytool option -trustcacerts ?\n        if echo \"$certs\" | awk \"n==$idx { print }; /END CERTIFICATE/ { n++ }\" | keytool -noprompt -import -alias \"imported CA Cert $idx\" -keystore \"$keystore\" -storepass \"$storepass\"\n        then\n          log_info \"... CA certificate [$idx] successfully imported\"\n        else\n          log_warn \"... Failed importing CA certificate [$idx]: abort\"\n          return\n        fi\n      done\n    else\n      log_warn \"Java keystore \\\\e[33;1m$keystore\\\\e[0m not found: could not import CA certificates\"\n    fi\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue;\n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue;\n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        fi\n        ;;\n      contains*)\n        # shellcheck disable=SC2076\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ ! __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v node > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)      \n      if node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$url','$decoded').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully dl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\nfunction download_file() {\n  if command -v wget &> /dev/null\n  then\n    wget \"$1\" -O \"$2\"\n  elif command -v curl &> /dev/null\n  then\n    curl -sfL \"$1\" -o \"$2\"\n  elif command -v node &> /dev/null\n  then\n    node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$1','$2').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\"\n  else\n    fail \"wget, curl or node required\"\n  fi\n}\n\nfunction github_get_latest_version() {\n  if command -v curl &> /dev/null\n  then\n    curl -sSf -I \"https://github.com/$1/releases/latest\" | awk -F '/' -v RS='\\r\\n' '/location:/ {print $NF}'\n  elif command -v node &> /dev/null\n  then\n    node -e \"const https=require('https'); const options={hostname:'github.com', path:'/$1/releases/latest', method:'HEAD'}; https.request(options, (res) => {tokens=res.headers.location.split('/'); console.log(tokens[tokens.length-1]); res.req.destroy()}).end();\"\n  else\n    fail \"curl or node required\"\n  fi\n}\n\nfunction maybe_install_packages() {\n  if command -v apt-get > /dev/null\n  then\n    # Debian\n    if ! dpkg --status \"$@\" > /dev/null\n    then\n      apt-get update\n      apt-get install --no-install-recommends --yes --quiet \"$@\"\n    fi\n  elif command -v apk > /dev/null\n  then\n    # Alpine\n    if ! apk info --installed \"$@\" > /dev/null\n    then\n      apk add --no-cache \"$@\"\n    fi\n  else\n    log_error \"... didn't find any supported package manager to install $*\"\n    exit 1\n  fi\n}\n\nfunction extract_release_config_from_package_json() {\n  package_json=\"./package.json\"\n  if [[ -f \"${package_json}\" ]]; then\n    release_config=$(node -pe \"JSON.stringify(require('${package_json}').release, null, 2)\")\n    case \"$release_config\" in\n      \"undefined\"|\"null\") release_config=\"\" ;;\n    esac\n    echo \"$release_config\"\n  fi\n}\n\nfunction prepare_semantic_release() {\n  git config --global --add safe.directory \"$(pwd)\"\n  if [[ -f \".releaserc\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc\"\n  elif [[ -f \".releaserc.yml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yml\"\n  elif [[ -f \".releaserc.yaml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yaml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yaml\"\n  elif [[ -f \".releaserc.json\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.json\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.json\"\n  elif [[ -f \".releaserc.js\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.js\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.js\"\n  else\n    releaseConfig=\"$(extract_release_config_from_package_json)\"\n    if [[ -n \"${releaseConfig}\" ]]; then\n      log_info \"release configuration found in \\\\e[33;1mpackage.json\\\\e[0m file\"\n      # exporting release configuration in dedicated file for required plugins installation\n      semrelConfigFile=\".release_config_from_package_json\"\n      echo \"${releaseConfig}\" > \"${semrelConfigFile}\"\n    else\n      log_info \"semantic release configuration file not found, generating default \\\\e[33;1m.releaserc\\\\e[0m\"\n      semrelConfigFile=\".releaserc\"\n      if [[ -n \"$TRACE\" ]]; then\n        debug=\"true\"\n      else\n        debug=\"false\"\n      fi\n      commitPresetConfig=$(generate_commit_preset_conf)\n      changelogPluginConfig=$(generate_changelog_plugin_conf)\n      execPluginConfig=$(generate_exec_plugin_conf)\n      gitPluginConfig=$(generate_git_plugin_conf)\n      {\n        echo \"debug: ${debug}\"\n        echo \"\"\n        echo \"tagFormat: '${SEMREL_TAG_FORMAT}'\"\n        echo \"\"\n        echo \"plugins: \"\n        echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - - '${SEMREL_RELEASE_NOTES_GENERATOR_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - '${SEMREL_GITLAB_PLUGIN}'\"\n        echo \"${changelogPluginConfig}\"\n        echo \"${execPluginConfig}\"\n        echo \"${gitPluginConfig}\"\n        echo \"\"\n        echo \"branches:\"\n        echo \"  - '${CI_COMMIT_REF_NAME}'\"\n      } > \"${semrelConfigFile}\"\n      cat \"${semrelConfigFile}\"\n    fi\n  fi\n}\n\nfunction install_semantic_release_plugins() {\n  log_info \"installing required plugins\"\n\n  # shellcheck disable=SC2046\n  if [[ -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" ]]; then\n    while IFS= read -r line || [[ -n \"$line\" ]]\n    do\n      required_plugins=\"${required_plugins} $line\"\n    done <<< $(cat \"${SEMREL_REQUIRED_PLUGINS_FILE}\")\n  fi\n\n  # shellcheck disable=SC2046\n  while IFS= read -r line || [[ -n \"$line\" ]]\n  do\n    plugin=$(echo \"$line\" | cut -d\\\" -f2)\n    required_plugins=\"${required_plugins} $plugin\"\n  done <<< $(yq eval \".plugins[]\" \"${semrelConfigFile}\" -o=json --indent 0)\n\n  # shellcheck disable=SC2086\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" ${required_plugins}\n  \n  if [[ ! -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" && -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    case \"$SEMREL_COMMIT_SPEC\" in\n      cc)\n        SEMREL_COMMIT_SPEC=conventionalcommits\n        ;;\n    esac\n    npm install --global \"conventional-changelog-$SEMREL_COMMIT_SPEC\" \n  fi\n\n  if [[ -n \"$TRACE\" ]]; then\n      if [[ -f \"./package.json\" ]]; then\n        log_info \"Installed devDependencies...\"\n        npm pkg get devDependencies\n      fi\n      log_info \"Globally installed packages...\"\n      npm list --global\n    fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_commit_preset_conf() {\n  if [[ -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    if [[ \"${SEMREL_COMMIT_SPEC}\" == \"cc\" ]]; then\n      conventionalCommits=\"conventionalcommits\"  \n    fi   \n    echo \"    - preset: '${conventionalCommits:-$SEMREL_COMMIT_SPEC}'\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_changelog_plugin_conf() {\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]]; then\n    if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]] || [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n      if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n        changeLogConfig=\"changelogFile: '${SEMREL_CHANGELOG_FILE}'\"\n      fi\n      if [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n        changeLogConfig=$(echo -e \"${changeLogConfig:+${changeLogConfig}\\n      }changelogTitle: '${SEMREL_CHANGELOG_TITLE}'\")\n      fi\n      echo \"  - - '${SEMREL_CHANGELOG_PLUGIN}'\"\n      echo \"    - ${changeLogConfig}\"\n    else\n      echo \"  - '${SEMREL_CHANGELOG_PLUGIN}'\"\n    fi\n  else\n    echo \"\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_git_plugin_conf() {\n  # git plugin has default changelog file as asset by default so\n  # we need to add it explicitly if the user configured a custom changelogFile\n  echo \"  - - '${SEMREL_GIT_PLUGIN}'\"\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]] && [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n    echo \"    - assets:\"\n    echo \"      - '${SEMREL_CHANGELOG_FILE}'\"\n    echo \"      - 'package.json'\"\n    echo \"      - 'package-lock.json'\"\n    echo \"      - 'npm-shrinkwrap.json'\"\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"      message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  else\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"    - message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_exec_plugin_conf() {\n  scriptsConfig=\"\"\n  tabs=\"    - \"\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_CONDITIONS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=\"${tabs}verifyConditionsCmd: '${scriptPath}'\"\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_RELEASE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}verifyReleaseCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PREPARE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}prepareCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PUBLISH_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}publishCmd: '\\\"${scriptPath}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${options.branch}\\\" \\\"\\${commits.length}\\\" \\\"\\${Date.now()}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_SUCCESS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}successCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_FAIL_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}failCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  if [[ -n \"${scriptsConfig}\" ]]; then\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"${scriptsConfig}\"\n  else\n    echo \"\"\n  fi\n}\n\nfunction maybe_install_yq() {\n  if ! command -v yq > /dev/null\n  then\n    yq_version=$(github_get_latest_version mikefarah/yq)\n    yq_binary=yq_linux_amd64\n    yq_url=\"https://github.com/mikefarah/yq/releases/download/${yq_version}/${yq_binary}.tar.gz\"\n    yq_cache=\"$XDG_CACHE_HOME/yq-$(echo \"$yq_url\" | md5sum | cut -d\" \" -f1)\"\n\n    if [[ -f \"$yq_cache\" ]]\n    then\n      log_info \"yq found in cache: reuse\"\n    else\n      log_info \"yq not found in cache: download\"\n      log_info \"Download latest yq version: \\\\e[32m$yq_url\\\\e[0m\"\n      download_file \"${yq_url}\" \"${yq_binary}.tar.gz\"\n      tar xvf \"${yq_binary}.tar.gz\"\n      mkdir -p \"$XDG_CACHE_HOME\"\n      mv \"${yq_binary}\" \"$yq_cache\"\n    fi \n    ln -s \"$yq_cache\" /usr/bin/yq\n  fi\n}\n\nfunction dotenv_semrel_info() {\n  # removing user conf as we need to override it temporarily (git reset will put things back to normal)\n  # see https://www.npmjs.com/package/cosmiconfig for configuration files resolution order (we will use .releaserc)\n  releaserc_file=\"${semrelConfigFile}\"\n  rm -f \"package.json\"\n\n  yq eval -oyaml -P 'with_entries(select((.key | . != \"plugins\") and (.key | . != \"verifyConditions\")))' \"${releaserc_file}\" > \"${releaserc_file}.new\"\n\n  # Generating the hook scripts that will generate the dotenv file\n  # The dotenv file is generated in $TMPDIR so it will survive the git reset\n  dotenv_tmp=\"$(mktemp -t semrel-info-XXXXXXXXXX.dotenv)\"\n  commitPresetConfig=$(generate_commit_preset_conf)\n  export_last_version_hook_script=\"./export-last-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_LAST_VERSION=\\$1\\\"\"\n    echo \"} > \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_last_version_hook_script}\"\n  chmod +x ${export_last_version_hook_script}\n\n  export_next_version_hook_script=\"./export-next-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION=\\$1\\\"\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION_TYPE=\\$2\\\"\"\n    echo \"} >> \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_next_version_hook_script}\"\n  chmod +x ${export_next_version_hook_script}\n\n  if [[ -n \"$TRACE\" ]]; then\n    echo \"generated analyzeCommits hook script:\"\n    cat \"${export_last_version_hook_script}\"\n    echo \"generated verifyRelease hook script:\"\n    cat \"${export_next_version_hook_script}\"\n  fi\n\n  # Generating temporary semantic-release config\n  {\n    echo \"\"\n    echo \"# injected (replace your plugins) plugins by the template to generate dotenv\"\n    echo \"\"\n    echo \"plugins:\"\n    echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n    echo \"${commitPresetConfig}\"\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"    - analyzeCommitsCmd: '\\\"${export_last_version_hook_script}\\\" \\\"\\${lastRelease.version}\\\"'\"\n    echo \"      verifyReleaseCmd: '\\\"${export_next_version_hook_script}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\"\n    echo \"\"\n  } >> \"${releaserc_file}.new\"\n\n  mv -f \"${releaserc_file}.new\" \".releaserc\"\n\n  if [[ -n \"$TRACE\" ]]; then\n    log_info \"--- generated .releaserc:\"\n    cat \".releaserc\"\n  fi\n\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" \"${SEMREL_EXEC_PLUGIN}@${SEMREL_EXEC_VERSION}\"\n  semantic-release --dry-run\n\n  # Rollback temporary semantic-release configuration\n  git reset --hard\n\n  mv \"${dotenv_tmp}\" ./semrel.out.env\n\n  log_info \"--- semrel dotenv artifact:\"\n  cat ./semrel.out.env\n}\n\nfunction configure_commit_signing() {\n  if [[ -z \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    log_info \"No GPG key provided.\"\n    return\n  fi\n\n  log_info \"Setting commit signing up.\"\n\n  if [[ ! -f \"${HOME}/.gnupg\" ]]; then\n    log_info \"creating GPG base configuration\"\n    gpg -k\n  fi\n\n  if [[ ! -f \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    fail \"SEMREL_GPG_SIGNKEY is not a file.\"\n  fi\n\n  if ! gpg --batch --dry-run --yes --import \"${SEMREL_GPG_SIGNKEY}\"; then\n    fail \"Could not import GPG key.\"\n  fi\n\n  # import the key and extract its ID from the command output\n  _GPG_KEY_ID=$(gpg --batch --yes --import \"${SEMREL_GPG_SIGNKEY}\" 2>&1 | grep \"key [A-F0-9]\" | head -n 1 | sed -e 's/^.*key \\([A-F0-9]*\\): .*$/\\1/g')\n\n  if [[ -z \"${_GPG_KEY_ID}\" ]]; then\n      fail \"Could not extract key ID from gpg --import command.\"\n  fi\n\n  git config --global commit.gpgsign true\n  git config --global user.signingkey \"${_GPG_KEY_ID}\"\n\n  log_info \"Commit signing setup complete.\"\n}\n\nfunction clear_vault_env() {\n  # unset service container env when Vault variant is enabled (SemRel censors them all due to 'SECRET' in the name)\n  # shellcheck disable=SC2046\n  unset $(env | awk -F '=' '/^VAULT_SECRETS_PROVIDER_/{print $1}' | xargs)\n}\n\nunscope_variables\neval_all_secrets\n\n# ENDSCRIPT\n"
    - maybe_install_packages ca-certificates git openssh-client gpg gpg-agent
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
    - maybe_install_yq
    - cd "${SEMREL_CONFIG_DIR}"
    - prepare_semantic_release
    - install_semantic_release_plugins
    - clear_vault_env
  variables:
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
    npm_config_cache: "$CI_PROJECT_DIR/.npm"
  cache:
    key: "$CI_COMMIT_REF_SLUG-SEMREL"
    when: always
    paths:
      - "$CI_PROJECT_DIR/.npm"
      - "$XDG_CACHE_HOME"
  extends: ".semrel-base"
  stage: ".pre"
  script:
    - dotenv_semrel_info
  artifacts:
    reports:
      dotenv:
        - "${SEMREL_CONFIG_DIR}/semrel.out.env"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $SEMREL_INFO_ON == "prod" && $CI_COMMIT_REF_NAME =~ $PROD_REF
    - if: $SEMREL_INFO_ON == "branches-ref" && $CI_COMMIT_REF_NAME =~ $SEMREL_BRANCHES_REF
    - if: $SEMREL_INFO_ON == "protected" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $SEMREL_INFO_ON == "all"
semantic-release:
  image: "$SEMREL_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - semrel
        - 3.15.0
  before_script:
    - "# BEGSCRIPT\nset -e\n\nfunction log_info() {\n    echo -e \"[\\\\e[1;94mINFO\\\\e[0m] $*\"\n}\n\nfunction log_warn() {\n    echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n    echo -e \"[\\\\e[1;91mERROR\\\\e[0m] $*\"\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction assert_defined() {\n  if [[ -z \"$1\" ]]\n  then\n    log_error \"$2\"\n    exit 1\n  fi\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n\n  # configure for npm\n  echo \"$certs\" > /tmp/custom-ca.pem\n  export NODE_EXTRA_CA_CERTS=/tmp/custom-ca.pem\n\n  # import in Java keystore (if keytool command found)\n  if command -v keytool > /dev/null\n  then\n    # shellcheck disable=SC2046\n    javahome=${JAVA_HOME:-$(dirname $(readlink -f $(command -v java)))/..}\n    # shellcheck disable=SC2086\n    keystore=${JAVA_KEYSTORE_PATH:-$(ls -1 $javahome/jre/lib/security/cacerts 2>/dev/null || ls -1 $javahome/lib/security/cacerts 2>/dev/null || echo \"\")}\n    if [[ -f \"$keystore\" ]]\n    then\n      storepass=${JAVA_KEYSTORE_PASSWORD:-changeit}\n      nb_certs=$(echo \"$certs\" | grep -c 'END CERTIFICATE')\n      log_info \"importing $nb_certs certificates in Java keystore \\\\e[33;1m$keystore\\\\e[0m...\"\n      for idx in $(seq 0 $((nb_certs - 1)))\n      do\n        # TODO: use keytool option -trustcacerts ?\n        if echo \"$certs\" | awk \"n==$idx { print }; /END CERTIFICATE/ { n++ }\" | keytool -noprompt -import -alias \"imported CA Cert $idx\" -keystore \"$keystore\" -storepass \"$storepass\"\n        then\n          log_info \"... CA certificate [$idx] successfully imported\"\n        else\n          log_warn \"... Failed importing CA certificate [$idx]: abort\"\n          return\n        fi\n      done\n    else\n      log_warn \"Java keystore \\\\e[33;1m$keystore\\\\e[0m not found: could not import CA certificates\"\n    fi\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue;\n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue;\n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ ^\"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\"$ ]]; then continue;\n        fi\n        ;;\n      contains*)\n        # shellcheck disable=SC2076\n        if [[ -z \"$_not\" ]] && [[ ! \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" =~ \"$_cmp_val\" ]]; then continue;\n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ ! __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        elif [[ \"$_not\" ]] && [[ __\"$_cmp_val\"__ =~ __\"$_cond_val\"__ ]]; then continue;\n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v node > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)      \n      if node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$url','$decoded').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully dl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\nfunction download_file() {\n  if command -v wget &> /dev/null\n  then\n    wget \"$1\" -O \"$2\"\n  elif command -v curl &> /dev/null\n  then\n    curl -sfL \"$1\" -o \"$2\"\n  elif command -v node &> /dev/null\n  then\n    node -e \"const fs=require('fs');function dlFile(url,file,maxRedir=5){return new Promise((resolve,reject)=>{let redirCount=0;const req=require(url.split(':')[0]).get(url,res=>{res.statusCode>=300&&res.statusCode<400&&res.headers.location&&redirCount<maxRedir?(redirCount++,console.log('Follow redirect ('+redirCount+'): '+res.headers.location),dlFile(res.headers.location,file,maxRedir).then(resolve).catch(reject)):200===res.statusCode?(res.pipe(fs.createWriteStream(file)).on('finish',()=>resolve()),res.on('error',reject)):reject(new Error('HTTP error: '+res.statusCode))});req.on('error',reject)})}dlFile('$1','$2').then(()=>{console.log('Download complete'),process.exit(0)}).catch(e=>{console.error('Error:',e),process.exit(1)});\"\n  else\n    fail \"wget, curl or node required\"\n  fi\n}\n\nfunction github_get_latest_version() {\n  if command -v curl &> /dev/null\n  then\n    curl -sSf -I \"https://github.com/$1/releases/latest\" | awk -F '/' -v RS='\\r\\n' '/location:/ {print $NF}'\n  elif command -v node &> /dev/null\n  then\n    node -e \"const https=require('https'); const options={hostname:'github.com', path:'/$1/releases/latest', method:'HEAD'}; https.request(options, (res) => {tokens=res.headers.location.split('/'); console.log(tokens[tokens.length-1]); res.req.destroy()}).end();\"\n  else\n    fail \"curl or node required\"\n  fi\n}\n\nfunction maybe_install_packages() {\n  if command -v apt-get > /dev/null\n  then\n    # Debian\n    if ! dpkg --status \"$@\" > /dev/null\n    then\n      apt-get update\n      apt-get install --no-install-recommends --yes --quiet \"$@\"\n    fi\n  elif command -v apk > /dev/null\n  then\n    # Alpine\n    if ! apk info --installed \"$@\" > /dev/null\n    then\n      apk add --no-cache \"$@\"\n    fi\n  else\n    log_error \"... didn't find any supported package manager to install $*\"\n    exit 1\n  fi\n}\n\nfunction extract_release_config_from_package_json() {\n  package_json=\"./package.json\"\n  if [[ -f \"${package_json}\" ]]; then\n    release_config=$(node -pe \"JSON.stringify(require('${package_json}').release, null, 2)\")\n    case \"$release_config\" in\n      \"undefined\"|\"null\") release_config=\"\" ;;\n    esac\n    echo \"$release_config\"\n  fi\n}\n\nfunction prepare_semantic_release() {\n  git config --global --add safe.directory \"$(pwd)\"\n  if [[ -f \".releaserc\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc\"\n  elif [[ -f \".releaserc.yml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yml\"\n  elif [[ -f \".releaserc.yaml\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.yaml\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.yaml\"\n  elif [[ -f \".releaserc.json\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.json\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.json\"\n  elif [[ -f \".releaserc.js\" ]]; then\n    log_info \"\\\\e[33;1m.releaserc.js\\\\e[0m file found\"\n    semrelConfigFile=\".releaserc.js\"\n  else\n    releaseConfig=\"$(extract_release_config_from_package_json)\"\n    if [[ -n \"${releaseConfig}\" ]]; then\n      log_info \"release configuration found in \\\\e[33;1mpackage.json\\\\e[0m file\"\n      # exporting release configuration in dedicated file for required plugins installation\n      semrelConfigFile=\".release_config_from_package_json\"\n      echo \"${releaseConfig}\" > \"${semrelConfigFile}\"\n    else\n      log_info \"semantic release configuration file not found, generating default \\\\e[33;1m.releaserc\\\\e[0m\"\n      semrelConfigFile=\".releaserc\"\n      if [[ -n \"$TRACE\" ]]; then\n        debug=\"true\"\n      else\n        debug=\"false\"\n      fi\n      commitPresetConfig=$(generate_commit_preset_conf)\n      changelogPluginConfig=$(generate_changelog_plugin_conf)\n      execPluginConfig=$(generate_exec_plugin_conf)\n      gitPluginConfig=$(generate_git_plugin_conf)\n      {\n        echo \"debug: ${debug}\"\n        echo \"\"\n        echo \"tagFormat: '${SEMREL_TAG_FORMAT}'\"\n        echo \"\"\n        echo \"plugins: \"\n        echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - - '${SEMREL_RELEASE_NOTES_GENERATOR_PLUGIN}'\"\n        echo \"${commitPresetConfig}\"\n        echo \"  - '${SEMREL_GITLAB_PLUGIN}'\"\n        echo \"${changelogPluginConfig}\"\n        echo \"${execPluginConfig}\"\n        echo \"${gitPluginConfig}\"\n        echo \"\"\n        echo \"branches:\"\n        echo \"  - '${CI_COMMIT_REF_NAME}'\"\n      } > \"${semrelConfigFile}\"\n      cat \"${semrelConfigFile}\"\n    fi\n  fi\n}\n\nfunction install_semantic_release_plugins() {\n  log_info \"installing required plugins\"\n\n  # shellcheck disable=SC2046\n  if [[ -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" ]]; then\n    while IFS= read -r line || [[ -n \"$line\" ]]\n    do\n      required_plugins=\"${required_plugins} $line\"\n    done <<< $(cat \"${SEMREL_REQUIRED_PLUGINS_FILE}\")\n  fi\n\n  # shellcheck disable=SC2046\n  while IFS= read -r line || [[ -n \"$line\" ]]\n  do\n    plugin=$(echo \"$line\" | cut -d\\\" -f2)\n    required_plugins=\"${required_plugins} $plugin\"\n  done <<< $(yq eval \".plugins[]\" \"${semrelConfigFile}\" -o=json --indent 0)\n\n  # shellcheck disable=SC2086\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" ${required_plugins}\n  \n  if [[ ! -f \"${SEMREL_REQUIRED_PLUGINS_FILE}\" && -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    case \"$SEMREL_COMMIT_SPEC\" in\n      cc)\n        SEMREL_COMMIT_SPEC=conventionalcommits\n        ;;\n    esac\n    npm install --global \"conventional-changelog-$SEMREL_COMMIT_SPEC\" \n  fi\n\n  if [[ -n \"$TRACE\" ]]; then\n      if [[ -f \"./package.json\" ]]; then\n        log_info \"Installed devDependencies...\"\n        npm pkg get devDependencies\n      fi\n      log_info \"Globally installed packages...\"\n      npm list --global\n    fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_commit_preset_conf() {\n  if [[ -n \"${SEMREL_COMMIT_SPEC}\" ]]; then\n    if [[ \"${SEMREL_COMMIT_SPEC}\" == \"cc\" ]]; then\n      conventionalCommits=\"conventionalcommits\"  \n    fi   \n    echo \"    - preset: '${conventionalCommits:-$SEMREL_COMMIT_SPEC}'\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_changelog_plugin_conf() {\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]]; then\n    if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]] || [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n      if [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n        changeLogConfig=\"changelogFile: '${SEMREL_CHANGELOG_FILE}'\"\n      fi\n      if [[ -n \"${SEMREL_CHANGELOG_TITLE}\" ]]; then\n        changeLogConfig=$(echo -e \"${changeLogConfig:+${changeLogConfig}\\n      }changelogTitle: '${SEMREL_CHANGELOG_TITLE}'\")\n      fi\n      echo \"  - - '${SEMREL_CHANGELOG_PLUGIN}'\"\n      echo \"    - ${changeLogConfig}\"\n    else\n      echo \"  - '${SEMREL_CHANGELOG_PLUGIN}'\"\n    fi\n  else\n    echo \"\"\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_git_plugin_conf() {\n  # git plugin has default changelog file as asset by default so\n  # we need to add it explicitly if the user configured a custom changelogFile\n  echo \"  - - '${SEMREL_GIT_PLUGIN}'\"\n  if [[ \"${SEMREL_CHANGELOG_ENABLED}\" = \"true\" ]] && [[ -n \"${SEMREL_CHANGELOG_FILE}\" ]]; then\n    echo \"    - assets:\"\n    echo \"      - '${SEMREL_CHANGELOG_FILE}'\"\n    echo \"      - 'package.json'\"\n    echo \"      - 'package-lock.json'\"\n    echo \"      - 'npm-shrinkwrap.json'\"\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"      message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  else\n    if [[ -n \"${SEMREL_COMMIT_MESSAGE}\" ]]; then\n      echo \"    - message: \\\"${SEMREL_COMMIT_MESSAGE}\\\"\"\n    fi\n  fi\n}\n\n# this script console output is inserted in generated file: DO NOT ADD LOGS\nfunction generate_exec_plugin_conf() {\n  scriptsConfig=\"\"\n  tabs=\"    - \"\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_CONDITIONS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=\"${tabs}verifyConditionsCmd: '${scriptPath}'\"\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_VERIFY_RELEASE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}verifyReleaseCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PREPARE_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}prepareCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_PUBLISH_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}publishCmd: '\\\"${scriptPath}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${options.branch}\\\" \\\"\\${commits.length}\\\" \\\"\\${Date.now()}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_SUCCESS_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}successCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  scriptPath=${SEMREL_HOOKS_DIR}/${SEMREL_FAIL_CMD}\n  if [[ -f \"${scriptPath}\" ]]; then\n    chmod +x \"${scriptPath}\"\n    scriptsConfig=$(echo -e \"${scriptsConfig}\\n${tabs}failCmd: '\\\"${scriptPath}\\\" \\\"\\${lastRelease.version}\\\" \\\"\\${nextRelease.version}\\\"'\")\n    tabs=\"      \"\n  fi\n  if [[ -n \"${scriptsConfig}\" ]]; then\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"${scriptsConfig}\"\n  else\n    echo \"\"\n  fi\n}\n\nfunction maybe_install_yq() {\n  if ! command -v yq > /dev/null\n  then\n    yq_version=$(github_get_latest_version mikefarah/yq)\n    yq_binary=yq_linux_amd64\n    yq_url=\"https://github.com/mikefarah/yq/releases/download/${yq_version}/${yq_binary}.tar.gz\"\n    yq_cache=\"$XDG_CACHE_HOME/yq-$(echo \"$yq_url\" | md5sum | cut -d\" \" -f1)\"\n\n    if [[ -f \"$yq_cache\" ]]\n    then\n      log_info \"yq found in cache: reuse\"\n    else\n      log_info \"yq not found in cache: download\"\n      log_info \"Download latest yq version: \\\\e[32m$yq_url\\\\e[0m\"\n      download_file \"${yq_url}\" \"${yq_binary}.tar.gz\"\n      tar xvf \"${yq_binary}.tar.gz\"\n      mkdir -p \"$XDG_CACHE_HOME\"\n      mv \"${yq_binary}\" \"$yq_cache\"\n    fi \n    ln -s \"$yq_cache\" /usr/bin/yq\n  fi\n}\n\nfunction dotenv_semrel_info() {\n  # removing user conf as we need to override it temporarily (git reset will put things back to normal)\n  # see https://www.npmjs.com/package/cosmiconfig for configuration files resolution order (we will use .releaserc)\n  releaserc_file=\"${semrelConfigFile}\"\n  rm -f \"package.json\"\n\n  yq eval -oyaml -P 'with_entries(select((.key | . != \"plugins\") and (.key | . != \"verifyConditions\")))' \"${releaserc_file}\" > \"${releaserc_file}.new\"\n\n  # Generating the hook scripts that will generate the dotenv file\n  # The dotenv file is generated in $TMPDIR so it will survive the git reset\n  dotenv_tmp=\"$(mktemp -t semrel-info-XXXXXXXXXX.dotenv)\"\n  commitPresetConfig=$(generate_commit_preset_conf)\n  export_last_version_hook_script=\"./export-last-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_LAST_VERSION=\\$1\\\"\"\n    echo \"} > \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_last_version_hook_script}\"\n  chmod +x ${export_last_version_hook_script}\n\n  export_next_version_hook_script=\"./export-next-version.sh\"\n  {\n    echo \"#!/bin/bash\"\n    echo \"{\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION=\\$1\\\"\"\n    echo \"echo \\\"SEMREL_INFO_NEXT_VERSION_TYPE=\\$2\\\"\"\n    echo \"} >> \\\"${dotenv_tmp}\\\"\"\n  } > \"${export_next_version_hook_script}\"\n  chmod +x ${export_next_version_hook_script}\n\n  if [[ -n \"$TRACE\" ]]; then\n    echo \"generated analyzeCommits hook script:\"\n    cat \"${export_last_version_hook_script}\"\n    echo \"generated verifyRelease hook script:\"\n    cat \"${export_next_version_hook_script}\"\n  fi\n\n  # Generating temporary semantic-release config\n  {\n    echo \"\"\n    echo \"# injected (replace your plugins) plugins by the template to generate dotenv\"\n    echo \"\"\n    echo \"plugins:\"\n    echo \"  - - '${SEMREL_COMMIT_ANALYZER_PLUGIN}'\"\n    echo \"${commitPresetConfig}\"\n    echo \"  - - '${SEMREL_EXEC_PLUGIN}'\"\n    echo \"    - analyzeCommitsCmd: '\\\"${export_last_version_hook_script}\\\" \\\"\\${lastRelease.version}\\\"'\"\n    echo \"      verifyReleaseCmd: '\\\"${export_next_version_hook_script}\\\" \\\"\\${nextRelease.version}\\\" \\\"\\${nextRelease.type}\\\"'\"\n    echo \"\"\n  } >> \"${releaserc_file}.new\"\n\n  mv -f \"${releaserc_file}.new\" \".releaserc\"\n\n  if [[ -n \"$TRACE\" ]]; then\n    log_info \"--- generated .releaserc:\"\n    cat \".releaserc\"\n  fi\n\n  npm install --global \"semantic-release@${SEMREL_VERSION}\" \"${SEMREL_EXEC_PLUGIN}@${SEMREL_EXEC_VERSION}\"\n  semantic-release --dry-run\n\n  # Rollback temporary semantic-release configuration\n  git reset --hard\n\n  mv \"${dotenv_tmp}\" ./semrel.out.env\n\n  log_info \"--- semrel dotenv artifact:\"\n  cat ./semrel.out.env\n}\n\nfunction configure_commit_signing() {\n  if [[ -z \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    log_info \"No GPG key provided.\"\n    return\n  fi\n\n  log_info \"Setting commit signing up.\"\n\n  if [[ ! -f \"${HOME}/.gnupg\" ]]; then\n    log_info \"creating GPG base configuration\"\n    gpg -k\n  fi\n\n  if [[ ! -f \"${SEMREL_GPG_SIGNKEY}\" ]]; then\n    fail \"SEMREL_GPG_SIGNKEY is not a file.\"\n  fi\n\n  if ! gpg --batch --dry-run --yes --import \"${SEMREL_GPG_SIGNKEY}\"; then\n    fail \"Could not import GPG key.\"\n  fi\n\n  # import the key and extract its ID from the command output\n  _GPG_KEY_ID=$(gpg --batch --yes --import \"${SEMREL_GPG_SIGNKEY}\" 2>&1 | grep \"key [A-F0-9]\" | head -n 1 | sed -e 's/^.*key \\([A-F0-9]*\\): .*$/\\1/g')\n\n  if [[ -z \"${_GPG_KEY_ID}\" ]]; then\n      fail \"Could not extract key ID from gpg --import command.\"\n  fi\n\n  git config --global commit.gpgsign true\n  git config --global user.signingkey \"${_GPG_KEY_ID}\"\n\n  log_info \"Commit signing setup complete.\"\n}\n\nfunction clear_vault_env() {\n  # unset service container env when Vault variant is enabled (SemRel censors them all due to 'SECRET' in the name)\n  # shellcheck disable=SC2046\n  unset $(env | awk -F '=' '/^VAULT_SECRETS_PROVIDER_/{print $1}' | xargs)\n}\n\nunscope_variables\neval_all_secrets\n\n# ENDSCRIPT\n"
    - maybe_install_packages ca-certificates git openssh-client gpg gpg-agent
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
    - maybe_install_yq
    - cd "${SEMREL_CONFIG_DIR}"
    - prepare_semantic_release
    - install_semantic_release_plugins
    - clear_vault_env
  variables:
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
    npm_config_cache: "$CI_PROJECT_DIR/.npm"
  cache:
    key: "$CI_COMMIT_REF_SLUG-SEMREL"
    when: always
    paths:
      - "$CI_PROJECT_DIR/.npm"
      - "$XDG_CACHE_HOME"
  extends: ".semrel-base"
  stage: publish
  script:
    - configure_commit_signing
    - if [[ "$SEMREL_DRY_RUN" == "true" ]]; then dry_run_opt="--dry-run"; fi
    - semantic-release ${TRACE:+--debug} --ci $dry_run_opt $SEMREL_EXTRA_ARGS
  dependencies:
    - create semantic release config
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $SEMREL_RELEASE_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$CI_COMMIT_REF_NAME !~ $SEMREL_BRANCHES_REF"
      when: never
    - if: $SEMREL_AUTO_RELEASE_ENABLED == "true"
    - when: manual
      allow_failure: true
".lint-scripts": "set -e\nfunction log_info() {\n  echo -e \"[\\e[1;94mINFO\\e[0m] $*\"\n}\n\nfunction log_warn() {\n  echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n  echo -e \"[\\e[1;91mERROR\\e[0m] $*\" >&2\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue; \n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue; \n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      contains*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ \"__${_cmp_val}__\" != *\"__${_cond_val}__\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"__${_cmp_val}__\" == *\"__${_cond_val}__\"* ]]; then continue; \n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -Ev '(^|.*_ENV_)scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\n# validates an input GitLab CI YAML file\nfunction ci_lint() {\n  rc=0\n  for file in $(eval \"ls -1 $GITLAB_CI_FILES\")\n  do\n    log_info \"Validating: $file...\"\n    cilint_req=\"{\\\"content\\\": $(jq --raw-input --slurp '.'  < \"${file:-/dev/stdin}\")}\"\n    cilint_resp=$(curl -s --header \"Content-Type: application/json\" --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/ci/lint --data \"$cilint_req\")\n    if [ \"$(echo \"$cilint_resp\" | jq -r '.valid')\" == \"true\" ]\n    then\n      log_info \" ... valid\"\n    else\n      log_error \" ... invalid\"\n      echo \"$cilint_resp\" | jq\n      rc=1\n    fi\n  done\n  exit $rc\n}\n\nunscope_variables\neval_all_secrets\n"
".gitlab-ci-base":
  before_script:
    - "set -e\nfunction log_info() {\n  echo -e \"[\\e[1;94mINFO\\e[0m] $*\"\n}\n\nfunction log_warn() {\n  echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n  echo -e \"[\\e[1;91mERROR\\e[0m] $*\" >&2\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue; \n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue; \n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      contains*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ \"__${_cmp_val}__\" != *\"__${_cond_val}__\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"__${_cmp_val}__\" == *\"__${_cond_val}__\"* ]]; then continue; \n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -Ev '(^|.*_ENV_)scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\n# validates an input GitLab CI YAML file\nfunction ci_lint() {\n  rc=0\n  for file in $(eval \"ls -1 $GITLAB_CI_FILES\")\n  do\n    log_info \"Validating: $file...\"\n    cilint_req=\"{\\\"content\\\": $(jq --raw-input --slurp '.'  < \"${file:-/dev/stdin}\")}\"\n    cilint_resp=$(curl -s --header \"Content-Type: application/json\" --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/ci/lint --data \"$cilint_req\")\n    if [ \"$(echo \"$cilint_resp\" | jq -r '.valid')\" == \"true\" ]\n    then\n      log_info \" ... valid\"\n    else\n      log_error \" ... invalid\"\n      echo \"$cilint_resp\" | jq\n      rc=1\n    fi\n  done\n  exit $rc\n}\n\nunscope_variables\neval_all_secrets\n"
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
gitlab-ci-lint:
  before_script:
    - "set -e\nfunction log_info() {\n  echo -e \"[\\e[1;94mINFO\\e[0m] $*\"\n}\n\nfunction log_warn() {\n  echo -e \"[\\\\e[1;93mWARN\\\\e[0m] $*\"\n}\n\nfunction log_error() {\n  echo -e \"[\\e[1;91mERROR\\e[0m] $*\" >&2\n}\n\nfunction fail() {\n  log_error \"$*\"\n  exit 1\n}\n\nfunction install_ca_certs() {\n  certs=$1\n  if [[ -z \"$certs\" ]]\n  then\n    return\n  fi\n\n  # import in system\n  if echo \"$certs\" >> /etc/ssl/certs/ca-certificates.crt\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/certs/ca-certificates.crt\\\\e[0m\"\n  fi\n  if echo \"$certs\" >> /etc/ssl/cert.pem\n  then\n    log_info \"CA certificates imported in \\\\e[33;1m/etc/ssl/cert.pem\\\\e[0m\"\n  fi\n}\n\nfunction unscope_variables() {\n  _scoped_vars=$(env | awk -F '=' \"/^scoped__[a-zA-Z0-9_]+=/ {print \\$1}\" | sort)\n  if [[ -z \"$_scoped_vars\" ]]; then return; fi\n  log_info \"Processing scoped variables...\"\n  for _scoped_var in $_scoped_vars\n  do\n    _fields=${_scoped_var//__/:}\n    _condition=$(echo \"$_fields\" | cut -d: -f3)\n    case \"$_condition\" in\n    if) _not=\"\";;\n    ifnot) _not=1;;\n    *)\n      log_warn \"... unrecognized condition \\\\e[1;91m$_condition\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n    ;;\n    esac\n    _target_var=$(echo \"$_fields\" | cut -d: -f2)\n    _cond_var=$(echo \"$_fields\" | cut -d: -f4)\n    _cond_val=$(eval echo \"\\$${_cond_var}\")\n    _test_op=$(echo \"$_fields\" | cut -d: -f5)\n    case \"$_test_op\" in\n    defined)\n      if [[ -z \"$_not\" ]] && [[ -z \"$_cond_val\" ]]; then continue; \n      elif [[ \"$_not\" ]] && [[ \"$_cond_val\" ]]; then continue; \n      fi\n      ;;\n    equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)\n      # comparison operator\n      # sluggify actual value\n      _cond_val=$(echo \"$_cond_val\" | tr '[:punct:]' '_')\n      # retrieve comparison value\n      _cmp_val_prefix=\"scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__\"\n      _cmp_val=${_scoped_var#\"$_cmp_val_prefix\"}\n      # manage 'ignore case'\n      if [[ \"$_test_op\" == *_ic ]]\n      then\n        # lowercase everything\n        _cond_val=$(echo \"$_cond_val\" | tr '[:upper:]' '[:lower:]')\n        _cmp_val=$(echo \"$_cmp_val\" | tr '[:upper:]' '[:lower:]')\n      fi\n      case \"$_test_op\" in\n      equals*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      startswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != \"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == \"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      endswith*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\" ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\" ]]; then continue; \n        fi\n        ;;\n      contains*)\n        if [[ -z \"$_not\" ]] && [[ \"$_cond_val\" != *\"$_cmp_val\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"$_cond_val\" == *\"$_cmp_val\"* ]]; then continue; \n        fi\n        ;;\n      in*)\n        if [[ -z \"$_not\" ]] && [[ \"__${_cmp_val}__\" != *\"__${_cond_val}__\"* ]]; then continue; \n        elif [[ \"$_not\" ]] && [[ \"__${_cmp_val}__\" == *\"__${_cond_val}__\"* ]]; then continue; \n        fi\n        ;;\n      esac\n      ;;\n    *)\n      log_warn \"... unrecognized test operator \\\\e[1;91m${_test_op}\\\\e[0m in \\\\e[33;1m${_scoped_var}\\\\e[0m\"\n      continue\n      ;;\n    esac\n    # matches\n    _val=$(eval echo \"\\$${_target_var}\")\n    log_info \"... apply \\\\e[32m${_target_var}\\\\e[0m from \\\\e[32m\\$${_scoped_var}\\\\e[0m${_val:+ (\\\\e[33;1moverwrite\\\\e[0m)}\"\n    _val=$(eval echo \"\\$${_scoped_var}\")\n    export \"${_target_var}\"=\"${_val}\"\n  done\n  log_info \"... done\"\n}\n\n# evaluate and export a secret\n# - $1: secret variable name\nfunction eval_secret() {\n  name=$1\n  value=$(eval echo \"\\$${name}\")\n  case \"$value\" in\n  @b64@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | base64 -d > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded base64 secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding base64 secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @hex@*)\n    decoded=$(mktemp)\n    errors=$(mktemp)\n    if echo \"$value\" | cut -c6- | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\x\\1/gI' | xargs printf > \"${decoded}\" 2> \"${errors}\"\n    then\n      # shellcheck disable=SC2086\n      export ${name}=\"$(cat ${decoded})\"\n      log_info \"Successfully decoded hexadecimal secret \\\\e[33;1m${name}\\\\e[0m\"\n    else\n      fail \"Failed decoding hexadecimal secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n    fi\n    ;;\n  @url@*)\n    url=$(echo \"$value\" | cut -c6-)\n    if command -v curl > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if curl -s -S -f --connect-timeout \"${TBC_SECRET_URL_TIMEOUT:-5}\" -o \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully curl'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    elif command -v wget > /dev/null\n    then\n      decoded=$(mktemp)\n      errors=$(mktemp)\n      if wget -T \"${TBC_SECRET_URL_TIMEOUT:-5}\" -O \"${decoded}\" \"$url\" 2> \"${errors}\"\n      then\n        # shellcheck disable=SC2086\n        export ${name}=\"$(cat ${decoded})\"\n        log_info \"Successfully wget'd secret \\\\e[33;1m${name}\\\\e[0m\"\n      else\n        log_warn \"Failed getting secret \\\\e[33;1m${name}\\\\e[0m:\\\\n$(sed 's/^/... /g' \"${errors}\")\"\n      fi\n    else\n      log_warn \"Couldn't get secret \\\\e[33;1m${name}\\\\e[0m: no http client found\"\n    fi\n    ;;\n  esac\n}\n\nfunction eval_all_secrets() {\n  encoded_vars=$(env | grep -Ev '(^|.*_ENV_)scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')\n  for var in $encoded_vars\n  do\n    eval_secret \"$var\"\n  done\n}\n\n# validates an input GitLab CI YAML file\nfunction ci_lint() {\n  rc=0\n  for file in $(eval \"ls -1 $GITLAB_CI_FILES\")\n  do\n    log_info \"Validating: $file...\"\n    cilint_req=\"{\\\"content\\\": $(jq --raw-input --slurp '.'  < \"${file:-/dev/stdin}\")}\"\n    cilint_resp=$(curl -s --header \"Content-Type: application/json\" --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/ci/lint --data \"$cilint_req\")\n    if [ \"$(echo \"$cilint_resp\" | jq -r '.valid')\" == \"true\" ]\n    then\n      log_info \" ... valid\"\n    else\n      log_error \" ... invalid\"\n      echo \"$cilint_resp\" | jq\n      rc=1\n    fi\n  done\n  exit $rc\n}\n\nunscope_variables\neval_all_secrets\n"
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".gitlab-ci-base"
  stage: build
  image: docker.io/badouralix/curl-jq:latest
  script:
    - ci_lint
  rules:
    - if: ($GITLAB_TOKEN != null && $GITLAB_TOKEN != "") && $GITLAB_CI_FILES
check-links:
  image:
    name: docker.io/lycheeverse/lychee:latest
    entrypoint:
      - ''
  stage: build
  script:
    - |
      lychee \
        --exclude www.gnu.org \
        --exclude https://to-be-continuous.gitlab.io/doc/secu/ \
        --exclude-path CHANGELOG.md \
        --exclude-path SECURITY.md \
        $LYCHEE_EXTRA_OPTS \
        *.md
tbc-check:
  image:
    name: registry.gitlab.com/to-be-continuous/tools/tbc-check:latest
    entrypoint:
      - ''
  stage: build
  script:
    - tbc-check .
  rules:
    - when: never
default:
  interruptible: true
".only on main":
  rules:
    - if: "$CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH"
    - when: never
".only on tags":
  rules:
    - if: "$CI_COMMIT_TAG"
    - when: never
create semantic release config:
  rules:
    - if: "$CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH"
    - when: never
  extends:
    - ".only on main"
  variables:
    __RELEASERC_FILE: "${SEMREL_CONFIG_DIR}/.releaserc.yml"
    __BUMPVERSION_FILE: "${SEMREL_CONFIG_DIR}/bumpversion.sh"
  stage: ".pre"
  image: python:3.13-alpine
  script:
    - if [ -f "${__RELEASERC_FILE}" ]; then echo "semrel config exists, exiting."; exit 0; fi
    - |
      cat <<EOF | tee "${__RELEASERC_FILE}"
      ---
      branches:
        - "main"
        - "master"

      plugins: [
        "@semantic-release/commit-analyzer",
        "@semantic-release/release-notes-generator",
        "@semantic-release/gitlab",
        [
        "@semantic-release/changelog",
        {
          "changelogFile": "CHANGELOG.md"
        }
        ],
        [
          "@semantic-release/exec",
          {
            "prepareCmd":
              "./bumpversion.sh \"\${lastRelease.version}\" \"\${nextRelease.version}\" \"\${nextRelease.type}\""
          }
        ],
        [
          "@semantic-release/git",
          {
            "assets": [
              $(python -c "files = \"${TEMPLATE_FILES_TO_BUMP}\".strip(); out = ', \n'.join(map(lambda s: f'\"{s.strip()}\"' if s else '', files.split(' '))); print(f'{out},' if out else '')")
              "CHANGELOG.md",
              "README.md"
            ]
          }
        ]
      ]
      tagFormat: "\${version}"

      EOF
    - if [ -f "${__BUMPVERSION_FILE}" ]; then echo "bumpversion script exists, exiting."; exit 0; fi
    - |
      cat <<\EOF | tee "${__BUMPVERSION_FILE}"
      #!/usr/bin/env bash
      # BEGSCRIPT
      function log_info() {
        >&2 echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_error() {
        >&2 echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      # check number of arguments
      if [[ "$#" -le 2 ]]; then
        log_error "Missing arguments"
        log_error "Usage: $0 <current version> <next version> <release type>"
        exit 1
      fi

      curVer=${1:=0.0.0}
      nextVer=$2
      relType=$3

      log_info "Bump version from \\e[33;1m${curVer}\\e[0m to \\e[33;1m${nextVer}\\e[0m (release type: $relType)..."

      # replace in README
      if [[ -f "README.md" ]]; then
        sed -e "s/ref: '$curVer'/ref: '$nextVer'/" README.md | tee README.md.next
        mv -f README.md.next README.md
      fi

      # replace in templates
      if [[ -n "${TEMPLATE_FILES_TO_BUMP}" ]]; then
        for template_file in $(eval "ls -1 ${TEMPLATE_FILES_TO_BUMP}"); do
          sed -e "s/${TEMPLATE_VERSION_VARNAME}: .*/${TEMPLATE_VERSION_VARNAME}: '$nextVer'/" "$template_file" | tee "$template_file.next"
          mv -f "$template_file.next" "$template_file"
        done
      fi
      # ENDSCRIPT
      EOF
    - chmod +x ${__BUMPVERSION_FILE}
  artifacts:
    paths:
      - "${__RELEASERC_FILE}"
      - "${__BUMPVERSION_FILE}"
".gitlabform":
  image: ghcr.io/gitlabform/gitlabform:4.4.0
  script:
    - gitlabform --skip-version-check ${GITLABFORM_CONFIG} ${PROJECT_TO_ALLOW_PUSH_TO}
allow push to main branch:
  image: ghcr.io/gitlabform/gitlabform:4.4.0
  script:
    - gitlabform --skip-version-check ${GITLABFORM_CONFIG} ${PROJECT_TO_ALLOW_PUSH_TO}
  stage: ".pre"
  rules:
    - if: $ALLOW_PUSH_TO_PROJECT_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH"
    - when: never
  before_script:
    - |
      cat <<EOF | tee config.yml
      config_version: 3
      gitlab:
        url: ${CI_PROJECT_URL%"$CI_PROJECT_PATH"}
      projects_and_groups:
        ${PROJECT_TO_ALLOW_PUSH_TO}:
          branches:
            ${BRANCH_TO_ALLOW_PUSH_TO}:
              protected: true
              push_access_level: ${BRANCH_UNLOCKED_ACCESS_LEVEL}
      EOF
  extends:
    - ".gitlabform"
disallow push to main branch:
  image: ghcr.io/gitlabform/gitlabform:4.4.0
  script:
    - gitlabform --skip-version-check ${GITLABFORM_CONFIG} ${PROJECT_TO_ALLOW_PUSH_TO}
  stage: ".post"
  rules:
    - if: $ALLOW_PUSH_TO_PROJECT_DISABLED == "true"
      when: never
    - if: "$CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH"
      when: always
    - when: never
  before_script:
    - |
      cat <<EOF | tee config.yml
      config_version: 3
      gitlab:
        url: ${CI_PROJECT_URL%"$CI_PROJECT_PATH"}
      projects_and_groups:
        ${PROJECT_TO_ALLOW_PUSH_TO}:
          branches:
            ${BRANCH_TO_ALLOW_PUSH_TO}:
              protected: true
              push_access_level: ${BRANCH_LOCKED_ACCESS_LEVEL}
      EOF
  extends:
    - ".gitlabform"
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: test
  dependencies: []
  variables:
    RENOVATE_DRY_RUN: 'true'
    RENOVATE_CONFIG_FILE: config.js
  script:
    - export RENOVATE_GIT_PRIVATE_KEY=$(cat "$RENOVATE_GIT_PRIVATE_KEY_FILE")
    - 'echo "LOG_LEVEL: ${LOG_LEVEL}"

'
    - 'echo "RENOVATE_CONFIG_FILE: ${RENOVATE_CONFIG_FILE}"

'
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
        LOG_LEVEL: info
    - if: "$CI_MERGE_REQUEST_ID"
      variables:
        LOG_LEVEL: info
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/another15y/tbc/renovate
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/anarcat/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.56.4@sha256:91d6114fc44ce587fd4d99f15f59643c4aae4415d13092ef5bcb03662b221994
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/matthewhughes/gitlab-renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.82.2@sha256:8ee731c270a621d749154e0fceb9e6dfb1089ae5798d36294029e0e6d6c2ba22
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=false"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/bmaximuml/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.52.2@sha256:2a8e40d78c41eaf83d935bf8deff8424f8227de05efb0c8a2c2303829f174d34
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gsuquet-tools/renovate
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.421.7@sha256:931463c360ae07e5f99b38d8fc65a7ffd4d373d496334d91512f0636f23d73c9
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate --write-discovered-repos=renovate-repos.json
    - sed "s~###RENOVATE_REPOS###~$(cat renovate-repos.json)~" templates/.gitlab-ci.yml > .gitlab-renovate-repos.yml
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - renovate-repos.json
      - ".gitlab-renovate-repos.yml"
  variables:
    RENOVATE_AUTODISCOVER: 'true'
stages:
  - ".pre"
  - deploy
  - ".post"
renovate:repos:
  stage: deploy
  needs:
    - renovate
  inherit:
    variables: false
  trigger:
    include:
      - job: renovate
        artifact: ".gitlab-renovate-repos.yml"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/deraone/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.72.0@sha256:4d165fc7a30bc02b59855fe1dc5f55b8ef2c722c36e11874f0682d4768d60836
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.17.0@sha256:5dbdae64c15c79e271d52e9c772015e868fd8168d9623e13db6eabb4a791b11e
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/zel4/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.417.0@sha256:c6ce6b96350dff7e782b6195b5001afa637b0cf0b96bb3cf580edfa7c7711f83
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.15.0@sha256:403fa1b0ea54b2479871caaa270c047ad3fd0da557426f8beabfa71c39210225
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.15.0@sha256:403fa1b0ea54b2479871caaa270c047ad3fd0da557426f8beabfa71c39210225
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vriska/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:07Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/dev6045710/renovate-runner
[90m2025-07-31T09:08:07Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.301.5@sha256:1afc375ccb85804a2fdd5fa34f2c2367bfcbf5f4c16dac881c9947cb4b6e41e2
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.12.2@sha256:cbfaae799da661c908feae9010adc513cef382ef2530cbd2c55bb451a83e33db
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.12.2@sha256:cbfaae799da661c908feae9010adc513cef382ef2530cbd2c55bb451a83e33db
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/gitlab-webhook-renovate-proxy
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
".duplication_base":
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality: "${PMDCPD_RESULTS_BASE}.json"
duplication_go:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-go
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: go
    PMDCPD_DIR_FILES: "--file-list=go_files.txt"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - find . -type f -name "*.go" ! -name "*_test.go" > go_files.txt
duplication_js:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-js
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: ecmascript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.js"
duplication_ts:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-ts
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: typescript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.ts"
lint_container:
  image: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  stage: lint
  needs: []
  rules:
    - exists:
        - "*Dockerfile"
  allow_failure: true
  script:
    - hadolint *Dockerfile
".go":
  image: golang:1.24.5-alpine3.22@sha256:daae04ebad0c21149979cd8e9db38f565ecefd8547cf4a591240dc1972cf1399
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
".go_test":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/go-test:2.8.2@sha256:9abbb32b66f8678a9ca1035e6b65d2780b6341d29c9514e745429972f119d481
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
  extends:
    - ".go"
  artifacts:
    when: always
".go_test_coverage":
  after_script:
    - gocover-cobertura -by-files < coverage.out > coverage.xml
    - go tool cover -html coverage.out -o coverage.html
    - go-junit-report < tests.txt > junit.xml
  coverage: "/total:\\s+\\(statements\\)\\s+\\d+.\\d+%/"
  artifacts:
    expose_as: Go Test Coverage Report
    paths:
      - coverage.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
lint_go:
  image: golangci/golangci-lint:v2.3.0-alpine@sha256:8cde2fcc8ccc6c8ca7d4476ac35ab30de546204368c678bc7080560e69952a62
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.golangci.yml
  extends:
    - ".go"
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - apk add jq
    - |
      if [ ! -f .golangci.yml ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - 'echo "Additional CLI args: $LINT_GO_CLI_ARGS"'
    - golangci-lint run --output.code-climate.path=gl-code-quality-report.json $LINT_GO_CLI_ARGS
  after_script:
    - cat gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality:
        - gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: true
".node":
  image: node:22-bookworm-slim
lint_md:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.markdownlint.json
  needs:
    - npm_install
  rules:
    - exists:
        - "**/*.md"
  before_script: []
  script:
    - npm run lint:md
".python":
  image: python:3.13.5-alpine3.22@sha256:37b14db89f587f9eaa890e4a442a3fe55db452b69cca1403cc730bd0fbdc8aaf
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
".djlint":
  image: python:3.13.5-alpine3.22@sha256:37b14db89f587f9eaa890e4a442a3fe55db452b69cca1403cc730bd0fbdc8aaf
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - |
      if [ ! -f .djlintrc ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q -O .djlintrc $CONFIG_FILE_LINK
      fi
  script:
    - djlint --check --lint .
lint_nunjucks:
  image: python:3.13.5-alpine3.22@sha256:37b14db89f587f9eaa890e4a442a3fe55db452b69cca1403cc730bd0fbdc8aaf
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/Nunjucks.djlintrc
  extends:
    - ".djlint"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - |
      if [ ! -f .djlintrc ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q -O .djlintrc $CONFIG_FILE_LINK
      fi
  script:
    - djlint --check --lint .
  rules:
    - exists:
        - "**/*.njk"
lint_powershell:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -EnableExit"
lint_prose:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/vale:3.7.2@sha256:94ac4b5bc4b2f87c23a0ac0f507fe7f570eae9fa68aaedf60e587d54fe7da957
    entrypoint:
      - ''
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.md"
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.vale.ini
    VALE_REPORT: vale.json
    VALE_GLOB: README.md
    VALE_INPUT: "./"
  before_script:
    - |
      if [ ! -f .vale.ini ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
    - "/vale/sync.sh"
  script:
    - vale --output="/vale/vale-glcq.tmpl" --no-exit --glob="$VALE_GLOB" $VALE_CLI_ARGS $VALE_INPUT > $VALE_REPORT
  after_script:
    - jq -r '.[].check_name' $VALE_REPORT | sort | uniq -c | sort -nr
  artifacts:
    paths:
      - "$VALE_REPORT"
    reports:
      codequality:
        - "$VALE_REPORT"
lint_sh:
  image: ubuntu:24.04
  stage: lint
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.sh"
  before_script:
    - 'apt update && apt -y install --no-install-recommends shellcheck && shellcheck --version

'
  script:
    - find . -type f -name "*.sh" -exec shellcheck {} +
lint_yaml:
  image: python:3.13.5-alpine3.22@sha256:37b14db89f587f9eaa890e4a442a3fe55db452b69cca1403cc730bd0fbdc8aaf
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.yamllint.yml
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install yamllint==1.37.1
    - |
      if [ ! -f .yamllint ] && [ ! -f .yamllint.yml ] && [ ! -f .yamllint.yaml ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - yamllint .
prepare_release:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: pre-deploy
  needs: []
  variables:
    RELEASE:
      value: '{"defaults":{"name":"$$CHANGELOG","description":"$$CHANGELOG"}}'
      expand: false
  before_script:
    - npm install -g gitlab-releaser@8.0.6
    - |
      if [ ! -f .gitlab/gitlab-releaser.json ]; then
        echo "Using config: $RELEASE"
        mkdir -p .gitlab && echo $RELEASE > .gitlab/gitlab-releaser.json
      fi
  script:
    - gitlab-releaser
  rules:
    - if: "$CI_COMMIT_TAG"
  artifacts:
    paths:
      - ".gitlab/release.json"
create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:v0.24.0@sha256:3f52d526f48e8d10625c722fa6d6423ee82aadeae1b1aa91f07b62551d96dacf
  stage: release
  needs:
    - prepare_release
    - deploy_worker
  rules:
    - if: "$CI_COMMIT_TAG"
  script:
    - release-cli create-from-file -file .gitlab/release.json
code_count:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/cloc:1.6.1@sha256:3c9fcc805d4bf890fe75fa774519f7d498e175b8d9135ff2b0f5ec09f41b3d36
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    CLOC_NOT_MATCH_FILES: package-lock.json
  script:
    - |
      echo "cloc not match files: $CLOC_NOT_MATCH_FILES"
      echo "cloc CLI args: $CLOC_CLI_ARGS"
    - cloc --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
    - cloc --json --report-file=code-count.json --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
  after_script:
    - 'cat code-count.json | jq -r ''keys[] as $k | "sloc{language=\"\($k)\"} \(.[$k] | .code)"'' | sed ''/^.*{language="\(SUM\|header\)"}.*$/d'' > metrics.txt

'
  artifacts:
    paths:
      - code-count.json
    reports:
      metrics:
        - metrics.txt
lint_renovate:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - renovate-config-validator --strict
sokrates:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-sokrates:latest
    entrypoint:
      - ''
  stage: test
  needs: []
  allow_failure: true
  rules:
    - if: "$CI_COMMIT_TAG"
  retry:
    max: 2
    when:
      - script_failure
  before_script:
    - java -XX:+PrintFlagsFinal -version | grep HeapSize
  script:
    - "/sokrates/analyze.sh"
    - if [ -z "$(ls -A _sokrates/)" ]; then exit 2; fi
  after_script:
    - echo 'sokrates run' > metrics.txt
  artifacts:
    expose_as: Sokrates Report
    paths:
      - _sokrates/
    reports:
      metrics:
        - metrics.txt
unicode_bidi_test:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  needs: []
  variables:
    FILES: ".css,Dockerfile,.handlebars,.htm,.html,.js,.json,.md,.ps1,.sh,.svg,.toml,.ts,.xml,.yml,.yaml"
  before_script:
    - npm install -g anti-trojan-source@1.4.1
  script:
    - 'echo "Checking files: $FILES"'
    - anti-trojan-source --files='./**/*{$FILES}'
".all_except_schedule":
  rules:
    - if: "$ENABLE_SCHEDULE"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
".run_without_renovate":
  rules:
    - if: "$RUN_WITH_RENOVATE"
      when: on_success
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - when: on_success
".schedule_pass_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - allow_failure: true
".schedule_fail_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - allow_failure: true
stages:
  - ".pre"
  - prepare
  - lint
  - build
  - pre-test
  - test
  - post-test
  - pre-deploy
  - deploy
  - pre-container-build
  - container-build
  - pre-container-test
  - container-test
  - post-container-test
  - container-deploy
  - pre-release
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
default:
  artifacts:
    expire_in: 15 days
lint_css:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  rules:
    - exists:
        - "**/*.css"
        - "**/*.html"
        - "**/*.handlebars"
        - "**/*.hbs"
        - "**/*.njk"
  script:
    - npm run lint:css
lint_html:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  rules:
    - exists:
        - "**/*.html"
        - "**/*.handlebars"
        - "**/*.hbs"
  script:
    - npm run lint:html
lint_js:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  rules:
    - exists:
        - "**/*.js"
        - "**/*.cjs"
        - "**/*.mjs"
  script:
    - npm run lint:js
  needs:
    - npm_install
lint_prettier:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  script:
    - npm run prettier:check
  needs:
    - npm_install
knip:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  allow_failure: true
  variables:
    KNIP_CONFIG_FILE: "./knip.json"
  before_script:
    - npm install -g knip@5.62.0
  script:
    - if [ -f "$KNIP_CONFIG_FILE" ]; then cat "$KNIP_CONFIG_FILE"; else echo "No knip config file found ($KNIP_CONFIG_FILE)"; fi
    - knip $KNIP_CLI_ARGS
  needs:
    - npm_install
lint_lockfile:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  rules:
    - exists:
        - "**/package-lock.json"
  needs: []
  before_script:
    - npm install -g lockfile-lint@4.14.1
  script:
    - 'echo "Additional CLI args: $LOCKFILE_LINT_CLI_ARGS"'
    - 'lockfile-lint --path package-lock.json --allowed-hosts npm --validate-https --validate-integrity --validate-package-names --allowed-package-name-aliases "string-width-cjs:string-width" "strip-ansi-cjs:strip-ansi" "wrap-ansi-cjs:wrap-ansi" $LOCKFILE_LINT_CLI_ARGS

'
lint_npm_package:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/NPM/.npmpackagejsonlintrc.json
    PACKAGE_PATH: "./package.json"
  needs: []
  rules:
    - when: never
  before_script:
    - npm install -g npm-package-json-lint@9.0.0
    - |
      if [ ! -f .npmpackagejsonlintrc.json ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - npmPkgJsonLint $PACKAGE_PATH
".node_test":
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  needs: []
  before_script:
    - node -v && npm -v && yarn -v
    - npm ci
  script:
    - npm test
node_lts_test:
  image: node:22-bookworm-slim
  extends:
    - ".node_test"
  stage: test
  needs:
    - npm_install
  before_script:
    - node -v && npm -v && yarn -v
    - apt-get update && apt-get -y install --no-install-recommends libatomic1
  script:
    - npm test
  coverage: "/All files[^|]*\\|[^|]*\\s+([\\d\\.]+)/"
  artifacts:
    when: always
    expose_as: Node Test Coverage Report
    paths:
      - coverage/
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    expire_in: 30 days
node_sbom:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  variables:
    SBOM_TYPE: library
  before_script:
    - npm install -g @cyclonedx/cyclonedx-npm@4.0.0
  script:
    - |
      echo "SBOM type: $SBOM_TYPE"
      echo "SBOM CLI args: $SBOM_CLI_ARGS"
    - cyclonedx-npm --output-file bom.json --mc-type $SBOM_TYPE --omit dev --short-PURLs $SBOM_CLI_ARGS
  after_script:
    - echo 'node_sbom run' > metrics.txt
  artifacts:
    paths:
      - bom.json
    reports:
      metrics:
        - metrics.txt
      cyclonedx:
        - bom.json
  needs:
    - npm_install
npm_audit:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  script:
    - npm audit
  needs:
    - npm_install
  allow_failure: true
  rules:
    - if: "$OWASP_DEPENDENCY_CHECK"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      allow_failure: false
    - when: on_success
      allow_failure: true
npm_install:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: prepare
  needs: []
  cache:
    key: "$CI_PROJECT_NAME-npm"
    paths:
      - ".npm/"
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    expire_in: 30 days
    paths:
      - node_modules/
npm_outdated:
  image: node:22-bookworm-slim
  rules:
    - if: "$RUN_WITH_RENOVATE"
      when: on_success
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - when: on_success
  extends:
    - ".node"
    - ".run_without_renovate"
  stage: test
  allow_failure: true
  script:
    - npm outdated
  needs:
    - npm_install
socket:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  needs: []
  stage: test
  allow_failure: true
  rules:
    - if: "$SOCKET_DISABLED"
      when: never
    - if: "$SOCKET_ENABLED"
    - if: "$CI_MERGE_REQUEST_IID"
      changes:
        - package-lock.json
  retry:
    max: 1
  timeout: 5m
  before_script:
    - npm i -g socket@1.0.72
  script:
    - 'echo "Socket org name: $SOCKET_ORG_NAME"'
    - 'socket scan create --report --json --repo=$CI_PROJECT_NAME --branch=$CI_COMMIT_REF_SLUG --org $SOCKET_ORG_NAME . | tee socket-report.json

'
    - |
      # Get full report link
      REPORT_ID=$(cat socket-report.json | grep "scanId" | sed -E 's/^.*"scanId": "([^"]+)".*$/\1/')
      echo "Full report: https://socket.dev/dashboard/org/${SOCKET_ORG_NAME}/sbom/${REPORT_ID}"
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  DS_EXCLUDED_ANALYZERS: ''
  DS_EXCLUDED_PATHS: spec, test, tests, tmp, node_modules
  DS_MAJOR_VERSION: 6
  DS_SCHEMA_MODEL: 15
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_ANALYZERS: ''
  DEFAULT_SAST_EXCLUDED_PATHS: spec, test, tests, tmp
  SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS"
  SCAN_KUBERNETES_MANIFESTS: 'false'
  SECRET_DETECTION_IMAGE_SUFFIX: ''
  SECRETS_ANALYZER_VERSION: '7'
  SECRET_DETECTION_EXCLUDED_PATHS: ''
  OWASP_DEPENDENCY_CHECK: owasp_dependency_check
  GITLAB_ADVANCED_SAST_ENABLED: 'true'
dependency_scanning:
  stage: test
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
  dependencies: []
  rules:
    - when: never
  needs:
    - npm_install
".ds-analyzer":
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  dependencies: []
  rules:
    - when: never
  needs:
    - npm_install
  extends: dependency_scanning
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: ''
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
".cyclonedx-reports":
  artifacts:
    access: all
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
    reports:
      cyclonedx: "**/gl-sbom-*.cdx.json"
".gemnasium-shared-rule":
  exists:
    - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
gemnasium-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium([^-]|$)/"
      when: never
    - if: ($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
        DS_REMEDIATE: 'false'
    - if: "($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
  needs: []
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium
    GEMNASIUM_LIBRARY_SCAN_ENABLED: 'true'
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
".gemnasium-maven-shared-rule":
  exists:
    - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
gemnasium-maven-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium-maven/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
        DS_REMEDIATE: 'false'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
  needs:
    - npm_install
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium-maven
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
".gemnasium-python-shared-rule":
  exists:
    - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
gemnasium-python-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium-python/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE && $CI_GITLAB_FIPS_MODE == "true"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE && $CI_GITLAB_FIPS_MODE == "true"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/ && $PIP_REQUIREMENTS_FILE"
  needs:
    - npm_install
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium-python
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
  needs: []
".sast-analyzer":
  stage: test
  artifacts:
    access: all
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - "/analyzer run"
  needs: []
  extends: sast
  allow_failure: true
".deprecated-16.8":
  stage: test
  artifacts:
    access: all
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
".gitlab-advanced-sast-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.go"
    - "**/*.java"
    - "**/*.jsp"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.cs"
    - "**/*.rb"
    - "**/*.php"
gitlab-advanced-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /gitlab-advanced-sast/"
      when: never
    - if: "$GITLAB_ADVANCED_SAST_ENABLED != 'true' && $GITLAB_ADVANCED_SAST_ENABLED != '1'"
      when: never
    - if: "($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/"
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
  variables:
    SEARCH_MAX_DEPTH: 20
    FF_GLAS_ENABLE_PHP_SUPPORT: 'true'
    SAST_ANALYZER_IMAGE_TAG: '2'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gitlab-advanced-sast:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
  cache:
    key: scan-metrics-$CI_COMMIT_REF_SLUG
    fallback_keys:
      - scan-metrics-$CI_DEFAULT_BRANCH
    paths:
      - scan_metrics.csv
  tags:
    - saas-linux-medium-amd64
bandit-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
brakeman-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
eslint-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
flawfinder-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
kubesec-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kubesec/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $SCAN_KUBERNETES_MANIFESTS == 'true'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $SCAN_KUBERNETES_MANIFESTS == 'true'"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kubesec:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
gosec-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
mobsf-android-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
mobsf-ios-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
nodejs-scan-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
phpcs-security-audit-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  needs: []
  extends: ".deprecated-16.8"
  allow_failure: true
".pmd-apex-exist-rules":
  exists:
    - "**/*.cls"
pmd-apex-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /pmd-apex/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.cls"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.cls"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/pmd-apex:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".semgrep-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.go"
    - "**/*.java"
    - "**/*.cs"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.rb"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
".semgrep-with-advanced-sast-exist-rules":
  exists:
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
security-code-scan-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 15.9 and removed in GitLab 16.0"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/390416"
    - exit 1
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
semgrep-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /semgrep/"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: registry.gitlab.com/gitlab-ci-utils/gitlab-semgrep-plus:10.2.0
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".sobelow-exist-rules":
  exists:
    - "**/mix.exs"
sobelow-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /sobelow/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/mix.exs"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/mix.exs"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/sobelow:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".spotbugs-exist-rules":
  exists:
    - "**/*.groovy"
spotbugs-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /spotbugs/"
      when: never
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.groovy"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.groovy"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 5
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  needs: []
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".secret-analyzer":
  stage: test
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: true
  variables:
    GIT_DEPTH: '50'
  artifacts:
    access: all
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
secret_detection:
  stage: test
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: true
  variables:
    GIT_DEPTH: '50'
  artifacts:
    access: all
    reports:
      secret_detection:
        - gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
  extends: ".secret-analyzer"
  rules:
    - if: "$SECRET_DETECTION_DISABLED == 'true' || $SECRET_DETECTION_DISABLED == '1'"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
  script:
    - "/analyzer run"
  needs: []
json_schema_secure:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: test
  needs: []
  before_script:
    - npm install -g ajv-cli@5.0.0
  script:
    - 'echo "JSON schemas: $JSON_SCHEMAS"'
    - |
      # Test each schema and catch errors to flag any failed, ensuring all schemas are tested
      RESULT=passed
      for SCHEMA in ${JSON_SCHEMAS//,/ }; do
        ajv -s /usr/local/lib/node_modules/ajv-cli/node_modules/ajv/lib/refs/json-schema-secure.json -d $SCHEMA --all-errors --strictTypes=false || RESULT=failed
      done
      # If any schema failed, fail job
      if [ $RESULT == "failed" ]; then exit 1; fi
  allow_failure: true
  rules:
    - if: "$JSON_SCHEMAS"
osv_scanner:
  image:
    name: ghcr.io/google/osv-scanner:v2.1.0@sha256:9a1ba57d2a1506c9e9d0dfbeaf46346507e829745b70d47d77e12c38e66de8d7
    entrypoint:
      - ''
  stage: test
  variables:
    CONFIG_FILE_NAME: global-osv-scanner.toml
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/OSV-Scanner/node-osv-scanner.toml
  needs: []
  allow_failure: true
  before_script:
    - |
      # Get global config file if specified
      if [ -n "$CONFIG_FILE_LINK" ]; then
        echo "Retrieving global config $CONFIG_FILE_LINK"
        wget -O "$CONFIG_FILE_NAME" $CONFIG_FILE_LINK;
      fi
      # If global config file retrieved, append to existing config, or create config
      if [ -f "$CONFIG_FILE_NAME" ]; then
        echo "Combining config files"
        cat "$CONFIG_FILE_NAME" >> osv-scanner.toml;
        rm "$CONFIG_FILE_NAME";
      fi
  script:
    - |
      /osv-scanner scan source --format table . || if [ "$?" -eq "128" ];
        then exit 0;
      else
        /osv-scanner scan source --format json . > osv-scanner-results.json;
      fi
    - "/osv-scanner --format table . || /osv-scanner --format json . > osv-scanner-results.json"
  after_script:
    - echo 'osv_scanner run' > metrics.txt
  artifacts:
    when: on_failure
    expose_as: OSV Scanner Report
    paths:
      - osv-scanner-results.json
    reports:
      metrics:
        - metrics.txt
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - allow_failure: true
owasp_dependency_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint:
      - ''
  stage: test
  script:
    - 'echo "Additional CLI args: $ODC_ADDITIONAL_ARGS"'
    - '/usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0 --noupdate --suppression /suppressions/npm_fp_suppression.xml --suppression /suppressions/npm_na_suppressions.xml $ODC_ADDITIONAL_ARGS

'
  allow_failure: true
  artifacts:
    when: always
    expose_as: OWASP Dependency Check Report
    paths:
      - dependency-check-report.html
      - dependency-check-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
  needs:
    - npm_install
powershell-sast:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: test
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -CustomRulePath (Get-Module InjectionHunter -List | % Path) -EnableExit"
syft_sbom:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/syft:v1.29.0@sha256:f657e6c442fa95c1b7c66903dadc4987078d1fdafc4f94b316af56d117c43c96
    entrypoint:
      - ''
  stage: test
  needs: []
  script:
    - "/syft/syft $CI_PROJECT_DIR -o cyclonedx-json=syft.cdx.json"
  after_script:
    - echo 'syft_sbom run' > metrics.txt
  artifacts:
    paths:
      - syft.cdx.json
    reports:
      metrics:
        - metrics.txt
      cyclonedx:
        - syft.cdx.json
  rules:
    - exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
      when: never
    - exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      when: never
    - exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
trivy_fs:
  image:
    name: ghcr.io/aquasecurity/trivy:0.64.1@sha256:a8ca29078522f30393bdb34225e4c0994d38f37083be81a42da3a2a7e1488e9e
    entrypoint:
      - ''
  stage: test
  variables:
    TRIVY_SCANNERS: vuln
    TRIVY_REPORT_NAME_BASE: trivy
    TRIVY_JSON_REPORT_NAME: "$TRIVY_REPORT_NAME_BASE.json"
    TRIVY_CLI_ARGS: "--include-dev-deps"
    TRIVY_FAIL_SEVERITY: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
  needs: []
  allow_failure: true
  script:
    - |
      echo "Trivy scanners: $TRIVY_SCANNERS"
      echo "Trivy severity: $TRIVY_FAIL_SEVERITY"
      echo "Trivy CLI args: $TRIVY_CLI_ARGS"
      echo "Trivy report name base: $TRIVY_REPORT_NAME_BASE"
    - trivy --version
    - trivy fs --exit-code 0 --scanners "$TRIVY_SCANNERS" --no-progress --format json --output "$TRIVY_JSON_REPORT_NAME" --list-all-pkgs $TRIVY_CLI_ARGS ./
    - trivy convert --format cyclonedx --output "${TRIVY_REPORT_NAME_BASE}.cdx.json" "$TRIVY_JSON_REPORT_NAME"
    - trivy convert --format template --template "@/contrib/html.tpl" --output "${TRIVY_REPORT_NAME_BASE}.html" "$TRIVY_JSON_REPORT_NAME"
    - trivy convert --exit-code 1 --format table --severity "$TRIVY_FAIL_SEVERITY" "$TRIVY_JSON_REPORT_NAME"
  artifacts:
    paths:
      - "${TRIVY_REPORT_NAME_BASE}.*"
    when: always
  rules:
    - if: "$TRIVY_FS_ENABLED == 'true'"
check_types:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: lint
  needs:
    - npm_install
  rules:
    - exists:
        - tsconfig.json
  before_script:
    - npm i -g typescript@5.8.3
  script:
    - tsc
tag_version_check:
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
  stage: pre-deploy
  rules:
    - if: "$CI_COMMIT_TAG"
  needs: []
  script:
    - PACKAGE_VERSION=$(jq -r '.version' package.json)
    - |
      if [ $CI_COMMIT_TAG != $PACKAGE_VERSION ]; then
        echo "package.json version ($PACKAGE_VERSION) does not match git tag ($CI_COMMIT_TAG)" && exit 1;
      fi
deploy_worker:
  image: node:22-bookworm-slim
  extends:
    - ".node"
  stage: deploy
  needs:
    - npm_install
    - job: prepare_release
      artifacts: false
    - tag_version_check
    - check_types
    - lint_js
    - job: node_lts_test
      artifacts: false
  rules:
    - if: "$CI_COMMIT_TAG"
  environment:
    name: production
    deployment_tier: production
  script:
    - npm run deploy
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/moerderschaf/renovate
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.440.7@sha256:1ee424e0ed4d8e64e5bb2d442d6bc72b3809bb9d0cf804f4b7180caa47d6002a
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/TimSchmittmann/ci-renovate
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_TOKEN: "$GITLAB_ACCESS_TOKEN"
  GITHUB_COM_TOKEN: "$GITHUB_ACCESS_TOKEN"
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_ONBOARDING_BRANCH: renovate-configure
  RENOVATE_BRANCH_PREFIX: renovate-
  RENOVATE_GROUP_NAME: all
  RENOVATE_DIGEST: 'true'
  RENOVATE_PIN_DIGESTS: 'true'
  RENOVATE_BUMP_VERSION: patch
  RENOVATE_SEPARATE_MAJOR_MINOR: 'false'
  RENOVATE_STABILITY_DAYS: '14'
  RENOVATE_MINIMUM_RELEASE_AGE: '14'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-all:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: deploy
  resource_group: production
  rules:
    - if: $RENOVATE_ALL_REPOSITORIES == "true"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: " empaia/integration/app-service-performance-test empaia/integration/ci-examples empaia/integration/data-management-client empaia/integration/py-ead-validation empaia/services/annotation-service empaia/services/app-service empaia/services/clinical-data-service empaia/services/examination-service empaia/services/id-mapper-service empaia/services/job-execution-service empaia/services/job-service empaia/services/loadtus-service empaia/services/medical-data-service empaia/services/shout-out-service empaia/services/template-service empaia/services/wsi-service empaia/services/workbench-daemon empaia/services/workbench-service empaia/services/event-service empaia/services/marketplace-service empaia/services/auth-service empaia/services/minio-proxy empaia/services/harpy-service empaia/service-mocks/aaa-service-mock empaia/service-mocks/marketplace-service-mock empaia/integration/frontend-test-workspace empaia/integration/portal-workspace "
renovate-repositoy:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_REPOSITORY =~ /^empaia/"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: "$RENOVATE_REPOSITORY"
[0m
[90m2025-07-31T09:08:08Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/armbiant/gitlab-renovate-config
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
".release:semantic-release":
  image: node:22.11.0@sha256:5c76d05034644fa8ecc9c2aa84e0a83cd981d0ef13af5455b87b9adf5b216561
  variables:
    SEMANTIC_RELEASE_VERSION: 24.2.0
  script:
    - "[ -f package.json ] && npm ci"
    - npm exec semantic-release@${SEMANTIC_RELEASE_VERSION}
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
".pages:retype":
  image: node:22.11.0@sha256:5c76d05034644fa8ecc9c2aa84e0a83cd981d0ef13af5455b87b9adf5b216561
  variables:
    RETYPE_VERSION: 3.6.0
  interruptible: true
  script:
    - npm exec -p retypeapp@$RETYPE_VERSION retype build
  artifacts:
    paths:
      - public
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
".gitlab:merge-request":
  image:
    name: curlimages/curl:8.11.0@sha256:83a505ba2ba62f208ed6e410c268b7b9aa48f0f7b403c8108b9773b44199dbba
    entrypoint:
      - ''
  variables:
    SOURCE_BRANCH: "$CI_COMMIT_BRANCH"
    TARGET_BRANCH: ''
    GITLAB_TOKEN: ''
    TITLE: 'Draft: automatic merge request'
    PROJECT_ID: "$CI_PROJECT_ID"
    ASSIGNEE_ID: "$GITLAB_USER_ID"
    SQUASH: 'true'
    REMOVE_SOURCE_BRANCH: 'true'
  script:
    - '[ -n "$SOURCE_BRANCH" ]'
    - '[ -n "$TARGET_BRANCH" ]'
    - '[ -n "$GITLAB_TOKEN" ]'
    - |
      BODY="{
          \"id\": ${PROJECT_ID},
          \"source_branch\": \"${SOURCE_BRANCH}\",
          \"target_branch\": \"${TARGET_BRANCH}\",
          \"remove_source_branch\": true,
          \"squash\": ${SQUASH},
          \"title\": \"${TITLE}\",
          \"assignee_id\":\"${ASSIGNEE_ID}\"
      }"
    - curl -X POST "${CI_API_V4_URL}/projects/${PROJECT_ID}/merge_requests" --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" --header "Content-Type:application/json" --data "${BODY}"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
variables:
  INTEGRATION_BRANCH: "$CI_DEFAULT_BRANCH"
merge-request:
  image:
    name: curlimages/curl:8.11.0@sha256:83a505ba2ba62f208ed6e410c268b7b9aa48f0f7b403c8108b9773b44199dbba
    entrypoint:
      - ''
  variables:
    SOURCE_BRANCH: "$CI_COMMIT_BRANCH"
    TARGET_BRANCH: ''
    GITLAB_TOKEN: ''
    TITLE: 'Draft: automatic merge request'
    PROJECT_ID: "$CI_PROJECT_ID"
    ASSIGNEE_ID: "$GITLAB_USER_ID"
    SQUASH: 'true'
    REMOVE_SOURCE_BRANCH: 'true'
  script:
    - '[ -n "$SOURCE_BRANCH" ]'
    - '[ -n "$TARGET_BRANCH" ]'
    - '[ -n "$GITLAB_TOKEN" ]'
    - |
      BODY="{
          \"id\": ${PROJECT_ID},
          \"source_branch\": \"${SOURCE_BRANCH}\",
          \"target_branch\": \"${TARGET_BRANCH}\",
          \"remove_source_branch\": true,
          \"squash\": ${SQUASH},
          \"title\": \"${TITLE}\",
          \"assignee_id\":\"${ASSIGNEE_ID}\"
      }"
    - curl -X POST "${CI_API_V4_URL}/projects/${PROJECT_ID}/merge_requests" --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" --header "Content-Type:application/json" --data "${BODY}"
  stage: deploy
  extends: ".gitlab:merge-request"
  needs: []
  rules:
    - if: $GITLAB_TOKEN == null || $GITLAB_TOKEN == ""
      when: never
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH == $INTEGRATION_BRANCH"
      variables:
        TARGET_BRANCH: "$CI_DEFAULT_BRANCH"
        TITLE: 'Draft: next release'
        SQUASH: 'false'
    - if: "$CI_COMMIT_BRANCH =~ /^feat(?:ure)?\\/.*$/"
      variables:
        TARGET_BRANCH: "$INTEGRATION_BRANCH"
        TITLE: 'Draft: $CI_COMMIT_TITLE'
        SQUASH: 'true'
pages:
  image: node:22.11.0@sha256:5c76d05034644fa8ecc9c2aa84e0a83cd981d0ef13af5455b87b9adf5b216561
  variables:
    RETYPE_VERSION: 3.6.0
  interruptible: true
  script:
    - npm exec -p retypeapp@$RETYPE_VERSION retype build
  artifacts:
    paths:
      - public
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
  stage: deploy
  extends: ".pages:retype"
  needs: []
  rules:
    - exists:
        - retype.yml
semantic-release:
  image: node:22.11.0@sha256:5c76d05034644fa8ecc9c2aa84e0a83cd981d0ef13af5455b87b9adf5b216561
  variables:
    SEMANTIC_RELEASE_VERSION: 24.2.0
  script:
    - "[ -f package.json ] && npm ci"
    - npm exec semantic-release@${SEMANTIC_RELEASE_VERSION}
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
  stage: deploy
  extends: ".release:semantic-release"
  rules:
    - exists:
        - ".releaserc"
        - ".releaserc.{js,json,yml,yaml}"
        - release.config.js
check-config:
  stage: test
  image: ghcr.io/renovatebot/renovate:39.86.1@sha256:14ce8c0fe4aa002d41eb332d2e6b4aeccadb78ceaf9837e0816a0f09db043425
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  script:
    - git ls-files '*.json' | sed -e '/^\..*/d' -e '/package\(-lock\)\?\.json/d' | xargs renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/pavel.knoblokh/renovate-runner
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.129.1@sha256:d6d5435830fdd5648734b2ca8c6d2ee4a21437e8e04af1fca7469885122484d6
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.18.0@sha256:42a14d2cb32711506e70811f0487684d954d1fc3005b8d1695d47d6c534ef22b
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.18.0@sha256:42a14d2cb32711506e70811f0487684d954d1fc3005b8d1695d47d6c534ef22b
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/deadnews/renovate-runner
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/FuturePortal/Renovate
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["local>FuturePortal/Renovate"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  FORCE_COLOR: 3
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: run
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - run
  - ".post"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/beudbeud/renovate
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: beudbeud/renovate
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE =~ "/^(pipeline)$/"
      changes:
        - renovate.json
        - config.js
      when: always
    - if: $CI_PIPELINE_SOURCE =~ "/^(schedule)$/" && $WHICH_SCHEDULE == "renovate"
      when: always
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cedric3.olivier/renovate-gitlab-component
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bmaximuml/my-renovate-runner
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  TBC_TRACKING_IMAGE: registry.gitlab.com/to-be-continuous/tools/tracking:master
  RENOVATE_IMAGE: registry.hub.docker.com/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_DRY_RUN: full
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  unscope_variables

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.2.2
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      unscope_variables

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.2.2
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      unscope_variables

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.2.2
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      unscope_variables

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_ANALYZERS: ''
  DEFAULT_SAST_EXCLUDED_PATHS: spec, test, tests, tmp
  SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS"
  SCAN_KUBERNETES_MANIFESTS: 'false'
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.52.3@sha256:daa9c61aaeae5a3dde576f0ae1142878cde44dae8ff86ba6aa4c4b047f75bdf9
sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
".sast-analyzer":
  stage: test
  artifacts:
    access: developer
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - "/analyzer run"
  extends: sast
  allow_failure: true
".deprecated-16.8":
  stage: test
  artifacts:
    access: developer
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
".gitlab-advanced-sast-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.go"
    - "**/*.java"
    - "**/*.jsp"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.cs"
    - "**/*.rb"
    - "**/*.php"
gitlab-advanced-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /gitlab-advanced-sast/"
      when: never
    - if: "$GITLAB_ADVANCED_SAST_ENABLED != 'true' && $GITLAB_ADVANCED_SAST_ENABLED != '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/"
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
  variables:
    SEARCH_MAX_DEPTH: 20
    FF_GLAS_ENABLE_PHP_SUPPORT: 'true'
    SAST_ANALYZER_IMAGE_TAG: '2'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gitlab-advanced-sast:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
  cache:
    key: scan-metrics-$CI_COMMIT_REF_SLUG
    fallback_keys:
      - scan-metrics-$CI_DEFAULT_BRANCH
    paths:
      - scan_metrics.csv
bandit-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
brakeman-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
eslint-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
flawfinder-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
kubesec-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kubesec/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $SCAN_KUBERNETES_MANIFESTS == 'true'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $SCAN_KUBERNETES_MANIFESTS == 'true'"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kubesec:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
gosec-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
mobsf-android-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
mobsf-ios-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
nodejs-scan-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
phpcs-security-audit-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
".pmd-apex-exist-rules":
  exists:
    - "**/*.cls"
pmd-apex-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /pmd-apex/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.cls"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.cls"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/pmd-apex:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".semgrep-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.go"
    - "**/*.java"
    - "**/*.cs"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.rb"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
".semgrep-with-advanced-sast-exist-rules":
  exists:
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
security-code-scan-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 15.9 and removed in GitLab 16.0"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/390416"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
semgrep-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /semgrep/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')
      variables:
        SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS, **/*.py, **/*.go, **/*.java, **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.cjs, **/*.mjs, **/*.cs, **/*.rb, **/*.php"
      exists:
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')"
      variables:
        SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS, **/*.py, **/*.go, **/*.java, **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.cjs, **/*.mjs, **/*.cs, **/*.rb, **/*.php"
      exists:
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')"
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/semgrep:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".sobelow-exist-rules":
  exists:
    - "**/mix.exs"
sobelow-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /sobelow/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/mix.exs"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/mix.exs"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/sobelow:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".spotbugs-exist-rules":
  exists:
    - "**/*.groovy"
spotbugs-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /spotbugs/"
      when: never
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.groovy"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.groovy"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 5
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: dependencies
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
stages:
  - ".pre"
  - test
  - dependencies
  - ".post"
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate2790217/renovate-runner
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
image: renovate/renovate:32.6.12
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot drar.almstoo@capgemini.com
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  script:
    - renovate --dry-run $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:08Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/Mexico_admin/renovate-gitlab-bot
[90m2025-07-31T09:08:08Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  cache:
    key: "$__CACHE_KEY_HACK"
    paths:
      - "$TF_ROOT/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    TF_ROOT: forks
  image:
    name: "$CI_REGISTRY/components/opentofu/gitlab-opentofu:0.16.0-opentofu1.6.1"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    paths:
      - "$TF_ROOT/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    TF_ROOT: forks
    TF_STATE_NAME: forks
  image:
    name: "$CI_REGISTRY/components/opentofu/gitlab-opentofu:0.16.0-opentofu1.6.1"
  script:
    - gitlab-tofu validate
plan:
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    public: false
    paths:
      - "$TF_ROOT/plan.cache"
    reports:
      terraform:
        - "$TF_ROOT/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    paths:
      - "$TF_ROOT/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    TF_ROOT: forks
    TF_STATE_NAME: forks
  image:
    name: "$CI_REGISTRY/components/opentofu/gitlab-opentofu:0.16.0-opentofu1.6.1"
  script:
    - gitlab-tofu plan
    - gitlab-tofu plan-json
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$TF_STATE_NAME"
    action: start
  resource_group: "$TF_STATE_NAME"
  rules:
    - when: manual
      allow_failure: true
  cache:
    key: "$__CACHE_KEY_HACK"
    paths:
      - "$TF_ROOT/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    TF_ROOT: forks
    TF_STATE_NAME: forks
  image:
    name: "$CI_REGISTRY/components/opentofu/gitlab-opentofu:0.16.0-opentofu1.6.1"
  script:
    - gitlab-tofu apply
  needs:
    - plan
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false -var-file=../forks/config.tfvars"
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
stages:
  - ".pre"
  - forks
  - run
  - ".post"
".node":
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --docker-files bot_image/docker_files/ --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - bot_image/docker_files/
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node ./scripts/delete-pipelines.mjs
  rules:
    - if: "$DELETE_PIPELINES"
".pages":
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
pages:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  publish: public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
      needs:
        - execute
    - if: "$CI_MERGE_REQUEST_IID"
      when: manual
      needs: []
      allow_failure: true
pages-dry-run:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      allow_failure: true
      needs:
        - execute
[0m
[90m2025-07-31T09:08:09Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/myapp-demo/renovate-config
[90m2025-07-31T09:08:09Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  RENOVATE_IMAGE: docker.io/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_AUTODISCOVER: true
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_REGISTRY_ALIASES: '{"$$CI_SERVER_FQDN": "$CI_SERVER_FQDN"}'
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
  RENOVATE_ONBOARDING_CONFIG: "{\n  \"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\",\n    \":dependencyDashboard\"\n  ],\n  \"labels\": [\n    \"dependencies\"\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?_IMAGE:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    },\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?image:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    }\n  ] \n}"
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          fi
          ;;
        contains*)
          # shellcheck disable=SC2076
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  unscope_variables
  eval_all_secrets

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:08:10Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/treilly94/renovate
[90m2025-07-31T09:08:10Z[0m [32mINF[0m [1m
renovate:
  image: renovate/renovate:latest
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_FILTER: treilly94/*
  script:
    - renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
[0m
[90m2025-07-31T09:08:12Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/patricks-projects/renovate-gitlab-bot
[90m2025-07-31T09:08:12Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull-push
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_IGNORE_INIT_ERRORS: 'true'
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu validate
".plan:detailed_exitcode:warning:false":
  extends:
".plan:detailed_exitcode:warning:true":
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: false
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    exit_codes:
      - 2
  artifacts:
    when: always
plan:
  extends:
    - ".plan:detailed_exitcode:warning:false"
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    access: none
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/plan.cache"
    reports:
      terraform:
        - "$GITLAB_TOFU_ROOT_DIR/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - "args=\"\"\nif [ \"false\" == \"true\" ]; then \n  echo \"Planning for a destroy\"\n  args=\"-destroy\"\nfi\n"
    - gitlab-tofu plan $args
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$GITLAB_TOFU_STATE_NAME"
    action: start
  resource_group: "$GITLAB_TOFU_STATE_NAME"
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: never
    - when: manual
      allow_failure: true
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_APPLY_NO_PLAN: false
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu apply
stages:
  - ".pre"
  - forks
  - run
  - ".post"
".opentofu:bridge_job_stage:true":
  stage: opentofu
".opentofu:bridge_job_stage:false":
  stage: ".pre"
opentofu:
  stage: ".pre"
  rules:
    - if: '"false" == "false"'
      when: never
    - when: on_success
  extends: ".opentofu:bridge_job_stage:false"
  trigger:
    include:
      - project: components/opentofu
        file: "/templates/validate-plan-apply.yml"
        ref: 0.44.0
        inputs:
          stage_validate: forks
          stage_build: forks
          stage_deploy: forks
          version: 0.44.0
          base_os: alpine
          opentofu_version: 1.8.4
          image_registry_base: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu"
          image_name: gitlab-opentofu
          image_digest: ''
          job_name_prefix: ''
          root_dir: forks
          state_name: forks
          plan_name: plan
          plan_artifacts_access: none
          var_file: config.tfvars
          fmt_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          validate_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          plan_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          apply_rules:
            - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
              when: never
            - when: manual
              allow_failure: true
          warning_on_non_empty_plan: false
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false"
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
".node":
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --docker-files bot_image/docker_files/ --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - bot_image/docker_files/
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node ./scripts/delete-pipelines.mjs
  rules:
    - if: "$DELETE_PIPELINES"
".pages":
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
pages:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  publish: public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
      needs:
        - execute
    - if: "$CI_MERGE_REQUEST_IID"
      when: manual
      needs: []
      allow_failure: true
pages-dry-run:
  image: node:20.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      allow_failure: true
      needs:
        - execute
[0m
[90m2025-07-31T09:08:12Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m3
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/navenest/kubernetes/infra-apps/renovatebot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate7720314-sandbox/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/chxmxii/kubegoros
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/wdhafer/renovate-ci
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance-yarn
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/glt24-sw-deps/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jhengy-test-group/repo-renovate-demo
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/whatishouldhavedone/charts/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/skumar20592/renovatebot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance-yarn-4
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/appframework/renovate-schedule
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Julien-D/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lighting3/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/renovate-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/8hobbies/renovate-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-match-new-version
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xuhdev/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nejc/repro-renovate-hostrules
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishkarshRaj/best-practices-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/moni-public/renovate-global-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishkarshRaj/autodiscover-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/alasca.cloud/krake/krake-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishkarshRaj/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/schober-server/auxiliary/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sean.parmelee/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/walters2/bootc-renovate-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lchastel/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/xanecs/renovatetest
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-config-bootc
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/meetupbot/mitup-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/farzad_aziz/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdoyle27/renovate-test-project
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdoyle27/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rug-digitallab/infrastructure/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/binarygame/renovatebot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/briansetz/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sylva-projects/sylva-elements/renovate-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jaymbermations/Embermation-github-io
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/repros2/renovate-dry-run-platform-local
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/coopdevs/ci-cd/catalog/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joshua.beard/renovate-customfile-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hejda.cz/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/debauer/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/iforce/renovate-repro
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joshbeard/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishkarshRaj/21-feb-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rostlab/kubernetes/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-cicd-components-3
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate6361448/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/abdelrahman19.adel/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-cicd-components-2
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/akhan23wgu/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-cicd-components
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pavel.dushin/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeanphi-baconnais-experiments/my-cicd-catalog/renovate-template
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/victorwsantos/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/northamp/cicd-components/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mkrill/renovate-bug-reproduction
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/arbetsformedlingen/devops/renovate-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/davinkevin.fr/projects/renovate/davinkevin-fr-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kashaudhan/renovatebot-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nitper/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab.mike/renovate-bot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Alexand/renovate-gitlab-bot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-config-container-images
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/CentOS/automotive/container-images/renovate-config-archived
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kashaudhan/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/TheKangaroo/renovate-automerge
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bbckr/renovate-testing
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/justin-homelab/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/johan1a/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bancast/home/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ci-templates-48151/renovate-ci-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ci-templates-48151/renovate-ci-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/TheKangaroo/renovate-changelog
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pablolec/renovatesecurityalert
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tiborpilz/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/taucher2003-group/temporary-projects/renovate-issue-reproduction-24603
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elchenberg/renovate-debian-variants-of-container-images
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ccasella_seacom/renovate-bot
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/navenest/kubernetes/infra-apps/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nerzhuls-packages/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MindTooth/renovate-preset-test
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Emmylongibok1/renovate-fork
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/personal2254/reactnative-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dblbirdie/renovate-min-reproduction
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vitiuk-space/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/das-floss/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/satdevo/renovate-project
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gaia-x/data-infrastructure-federation-services/deployment-scenario/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/biomedit/test-renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nbossard/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/test9703649/renovate-runner
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/test9703649/renovate-config
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elchenberg/renovate-with-registry-url
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elchenberg/renovate-with-registry-alias
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sks-project1/renovate
[90m2025-07-31T09:08:24Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deaven/renovate-runner
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tiborpilz/renovate
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
image: renovate/renovate:37
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@tiborpilz.dev>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: renovate
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/glt24-sw-deps/renovate-runner
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_FILTER: glt24-sw-deps/**
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovate@glt24-sw-deps.com>
".renovate":
  image: ghcr.io/renovatebot/renovate:37.279.0@sha256:328686ec82a09ea7fc4326ac03a35dff926a7e85206d7f1b376d6002e04ef526
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  script:
    - renovate
renovate:
  image: ghcr.io/renovatebot/renovate:37.279.0@sha256:328686ec82a09ea7fc4326ac03a35dff926a7e85206d7f1b376d6002e04ef526
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  script:
    - renovate
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jeanphi-baconnais-experiments/my-cicd-catalog/renovate-template
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - release
  - renovate
  - ".post"
"\U0001F4E6 release-sem-rel":
  image: node:latest
  stage: release
  script:
    - 'npx  -p semantic-release-gitmoji  -p @semantic-release/git  -p @semantic-release/gitlab  -p @semantic-release/changelog  -p semantic-release@21  semantic-release

'
  when: manual
  rules:
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'schedule'"
include:
  - component: gitlab.com/jeanphi-baconnais-experiments/my-cicd-catalog/renovate-template/renovate@$CI_DEFAULT_BRANCH
    inputs:
      stage: renovate
      config-autodiscover: 'true'
      config-autodiscover-filter: "/jeanphi-baconnais-experiments/my-cicd-catalog/renovate-template/"
      token: "$GITLAB_TOKEN"
      token-github: "$GITHUB_RENOVATE_TOKEN"
    rules:
      - if: "$CI_PIPELINE_SOURCE == 'schedule'"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/iforce/renovate-repro
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/TheKangaroo/renovate-automerge
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate7720314-sandbox/renovate-runner
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
default:
  tags:
    - gitlab-org
variables:
  KUBERNETES_CPU_REQUEST: 600m
  KUBERNETES_CPU_LIMIT: 2
  KUBERNETES_MEMORY_REQUEST: 1Gi
  KUBERNETES_MEMORY_LIMIT: 2Gi
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_BASE_BRANCHES: feature/poc_renovate
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: renovate/renovate:35.62
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: renovate/renovate:35.62
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: test
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ci-templates-48151/renovate-ci-config
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
".lint:commit":
  stage: lint
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/commitlint:latest"
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | npx commitlint
".lint:markdown":
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  before_script:
    - mdl --version
  script:
    - mdl --style all --warnings README.md
".lint:yaml":
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  before_script:
    - yamllint --version
  script:
    - yamllint .
".security:gitleaks":
  stage: security
  image:
    name: registry.hub.docker.com/zricethezav/gitleaks:latest
    entrypoint:
      - ''
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - gitleaks version
  script:
    - gitleaks detect --redact --report-format json --verbose --log-level debug --log-opts="origin/${CI_DEFAULT_BRANCH}.."
".renovate:config-validator":
  stage: test
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
".release:semantic":
  stage: release
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/semantic-release:latest"
    entrypoint:
      - ''
  script:
    - npx semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  AST_ENABLE_MR_PIPELINES: 'true'
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp
iac-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  allow_failure: true
  cache: []
  script:
    - "/analyzer run"
kics-iac-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kics/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kics:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  allow_failure: true
  cache: []
  script:
    - "/analyzer run"
  extends: iac-sast
  image:
    name: "$SAST_ANALYZER_IMAGE"
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
stages:
  - ".pre"
  - lint
  - security
  - test
  - release
  - ".post"
commit:
  stage: lint
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/commitlint:latest"
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | npx commitlint
  extends: ".lint:commit"
markdown:
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  before_script:
    - mdl --version
  script:
    - mdl --style all --warnings README.md
  extends: ".lint:markdown"
yaml:
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  before_script:
    - yamllint --version
  script:
    - yamllint .
  extends: ".lint:yaml"
gitleaks:
  stage: security
  image:
    name: registry.hub.docker.com/zricethezav/gitleaks:latest
    entrypoint:
      - ''
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - gitleaks version
  script:
    - gitleaks detect --redact --report-format json --verbose --log-level debug --log-opts="origin/${CI_DEFAULT_BRANCH}.."
  extends: ".security:gitleaks"
renovate:config-validator:
  stage: test
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  extends: ".renovate:config-validator"
semantic:
  stage: release
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/semantic-release:latest"
    entrypoint:
      - ''
  script:
    - npx semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  extends: ".release:semantic"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bancast/home/renovate
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance-yarn-4
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_PLATFORM: gitlab
  RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
  RENOVATE_REPOSITORY_CACHE: enabled
  CI_RENOVATE_IMAGE: renovate/renovate
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - when: never
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/debauer/renovate
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.440.7@sha256:1ee424e0ed4d8e64e5bb2d442d6bc72b3809bb9d0cf804f4b7180caa47d6002a
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/victorwsantos/renovate-runner
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.50.1@sha256:a8848d7b7bbaca1b169afad371ec7e688f6bb1f131fa570c3d2fad8ba8165a8a
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.9.0@sha256:05d94b8e9d0f541faf2ee7663461c0e36797373b517010b7ce445423a948ba85
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.9.0@sha256:05d94b8e9d0f541faf2ee7663461c0e36797373b517010b7ce445423a948ba85
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/chxmxii/kubegoros
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: ghcr.io/renovatebot/renovate:37
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: renovate
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: chxmxii/cluster-template-coralio
stages:
  - ".pre"
  - renovate
  - ".post"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/hejda.cz/renovate
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/northamp/cicd-components/renovate
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
".renovate":
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends: ".renovate"
  script:
    - renovate
  rules:
    - if: '"true" != "true"'
renovate dry-run:
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends: ".renovate"
  script:
    - renovate --dry-run
  rules:
    - if: '"true" == "true"'
stages:
  - ".pre"
  - test-component
  - release
  - ".post"
ensure job exists:
  image: badouralix/curl-jq
  stage: test-component
  script:
    - |
      route="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs"
      count=`curl --silent $route | jq 'map(select(.name | contains("renovate"))) | length'`
      if [ "$count" != "1" ]; then
        exit 1
      fi
check description:
  image: badouralix/curl-jq
  stage: test-component
  script:
    - |
      route="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"
      desc=`curl --silent $route | jq '.description'`
      if [ "$desc" = "null" ]; then
        echo "Description not set. Please set a projet description"
        exit 1
      else
        echo "Description set"
      fi
check readme:
  image: busybox
  stage: test-component
  script: ls README.md || (echo "Please add a README.md file" && exit 1)
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/nitper/renovate-runner
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.43.1@sha256:0d0e3d71a47d191a1171cb86df986aa25a74a350932c90ed5e3ec8c58560965d
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.18.2@sha256:a80ee1252eee6098987f39135a7325278bbc8074ef8fa7b37ba4f3e2da19bcca
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.18.2@sha256:a80ee1252eee6098987f39135a7325278bbc8074ef8fa7b37ba4f3e2da19bcca
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/coopdevs/ci-cd/catalog/renovate
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
".renovate":
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends: ".renovate"
  script:
    - renovate
  rules:
    - if: '"true" != "true"'
renovate dry-run:
  stage: test-component
  image: renovate/renovate:latest
  variables:
    RENOVATE_CONFIG_FILE: renovate.json
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends: ".renovate"
  script:
    - renovate --dry-run
  rules:
    - if: '"true" == "true"'
stages:
  - ".pre"
  - test-component
  - release
  - ".post"
ensure job exists:
  image: badouralix/curl-jq
  stage: test-component
  script:
    - |
      route="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs"
      count=`curl --silent $route | jq 'map(select(.name | contains("renovate"))) | length'`
      if [ "$count" != "1" ]; then
        exit 1
      fi
check description:
  image: badouralix/curl-jq
  stage: test-component
  script:
    - |
      route="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"
      desc=`curl --silent $route | jq '.description'`
      if [ "$desc" = "null" ]; then
        echo "Description not set. Please set a projet description"
        exit 1
      else
        echo "Description set"
      fi
check readme:
  image: busybox
  stage: test-component
  script: ls README.md || (echo "Please add a README.md file" && exit 1)
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/NishkarshRaj/renovate-test
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/briansetz/renovate-test
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance-yarn
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.152.1@sha256:5147de5c825b321b6e4ae100a5d3a8b7f064cf63a78aa758409dd735d1dc0fe4
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: ghcr.io/renovatebot/renovate:full
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: check
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: gradle:alpine
stages:
  - ".pre"
  - build
  - test
  - check
  - ".post"
before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME
build:
  stage: build
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - ".gradle"
test:
  stage: test
  script: gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - ".gradle"
[0m
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - when: never
renovate:
  image: node:20.11.0-bookworm
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
    RENOVATE_REPOSITORY_CACHE: enabled
  before_script:
    - corepack enable
    - corepack use yarn@4.1.0
    - yarn add renovate@37.168.2
  script:
    - yarn renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pablolec/renovatesecurityalert
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.6.3@sha256:0b7e7f9281ee8dded4631307504ac333968193a899c88c3c49d4e0708228cf75
  AUTODISCOVER_FILTER: pablolec/renovatesecurityalert
  RENOVATE_EXTRA_FLAGS: --pr-concurrent-limit=0 --autodiscover=true --autodiscover-filter="${AUTODISCOVER_FILTER}"
  RENOVATE_PR_HOURLY_LIMIT: 0
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/schober-server/auxiliary/renovate
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  CI_RENOVATE_IMAGE: renovate/renovate:41.43
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/renovate-cache"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: 0xC0DEUPD8 <0xC0DEUPD8@2tefan.eu>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:best-practices"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_IGNORE_PR_AUTHOR: 'false'
  RENOVATE_EXTENDS: config:base
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_PR_HOURLY_LIMIT: '400'
  RENOVATE_BRANCH_CONCURRENT_LIMIT: '400'
  RENOVATE_AUTOMERGE_STRATEGY: merge-commit
  RENOVATE_AUTODISCOVER_FILTER: "/schober-server/(auxiliary|kubernetes).*/"
  LOG_LEVEL: debug
renovate:
  image: "${CI_RENOVATE_IMAGE}"
  stage: deploy
  resource_group: production
  tags:
    - k3s
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_PIPELINE_SOURCE == "web"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/repros2/renovate-lock-maintenance
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_PLATFORM: gitlab
  RENOVATE_REPOSITORIES: "$CI_PROJECT_PATH"
  RENOVATE_REPOSITORY_CACHE: enabled
  CI_RENOVATE_IMAGE: renovate/renovate
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - when: never
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/joshua.beard/renovate-customfile-test
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab.mike/renovate-bot
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
services:
  - docker:dind
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - changes:
        - renovate.json
        - config.js
  stage: renovate
  image: renovate/renovate:37.74.0-slim
  tags:
    - myrunner
  script:
    - export DEPLOY_USER=${DEPLOY_USER}
    - export DEPLOY_TOKEN=${DEPLOY_TOKEN}
    - renovate
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/justin-homelab/renovate
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: registry.gitlab.com/justin-homelab/renovate-devbox:0296db0e@sha256:092ce6c1c046551de10c13ce010456173be745c74b184906520e458f564b1871
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  before_script:
    - eval "$(devbox global shellenv)"
default:
  tags:
    - self-hosted
    - production
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/sylva-projects/sylva-elements/renovate-config
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
".test-policy":
  rules:
    - if: "$CI_COMMIT_TAG"
    - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
    - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
      when: manual
      allow_failure: true
    - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
      allow_failure: true
    - when: on_success
variables:
  TBC_TRACKING_IMAGE: registry.gitlab.com/to-be-continuous/tools/tracking:master
  GITLEAKS_IMAGE: registry.hub.docker.com/zricethezav/gitleaks:latest
  GITLEAKS_ARGS: "--verbose"
  GITLEAKS_RULES: ''
  PROD_REF: "/^(master|main)$/"
  INTEG_REF: "/^develop$/"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
  GIT_DESCRIBE_OPTIONS: --exclude "0.0.0*"
  EXCLUDED_CI_COMMIT_TAG: "/0\\.0\\.0.*/"
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".gitleaks-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
          fi
          ;;
        contains*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
          elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  function install_gitleaks_rules() {
    if [[ -f ".gitleaks.toml" ]]
    then
      log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
    elif [[ "$GITLEAKS_RULES" ]]
    then
      log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
      echo "$GITLEAKS_RULES" > .gitleaks.toml
    else
      log_info "No Gitleaks rules found: use default"
    fi
  }

  unscope_variables

  # ENDSCRIPT
gitleaks:
  image:
    name: "$GITLEAKS_IMAGE"
    entrypoint:
      - ''
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - gitleaks
        - 2.5.2
  stage: test
  needs: []
  variables:
    GIT_DEPTH: 0
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val"* ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val" ]]; then continue;
              fi
              ;;
            contains*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != *"$_cmp_val"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == *"$_cmp_val"* ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ "__${_cmp_val}__" != *"__${_cond_val}__"* ]]; then continue;
              elif [[ "$_not" ]] && [[ "__${_cmp_val}__" == *"__${_cond_val}__"* ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      function install_gitleaks_rules() {
        if [[ -f ".gitleaks.toml" ]]
        then
          log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
        elif [[ "$GITLEAKS_RULES" ]]
        then
          log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
          echo "$GITLEAKS_RULES" > .gitleaks.toml
        else
          log_info "No Gitleaks rules found: use default"
        fi
      }

      unscope_variables

      # ENDSCRIPT
    - mkdir -p -m 777 reports
    - install_gitleaks_rules
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - gitleaks detect ${TRACE+--log-level debug} --source . $gitleaks_rule_opts --report-path reports/gitleaks.native.json $GITLEAKS_ARGS
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/gitleaks.*
  rules:
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  parallel:
    matrix:
      - RENOVATE_CONFIG_FILE: default.json
      - RENOVATE_CONFIG_FILE: docker.json
      - RENOVATE_CONFIG_FILE: go.json
      - RENOVATE_CONFIG_FILE: renovate.json
".release-notes-before-script":
  - []
".release-notes-after-script":
  - []
prepare-release-notes:
  image: registry.gitlab.com/sylva-projects/sylva-elements/container-images/ci-image/ci-release-image:v1.2.3
  stage: test
  dependencies: []
  script:
    - git fetch --unshallow || true
    - PREVIOUS_TAG=$(git describe --tags ${GIT_DESCRIBE_OPTIONS} --abbrev=0 ${CI_COMMIT_TAG}^)
    - - []
    - echo "Checking for merged MRs since ${PREVIOUS_TAG}"
    - generate-release.py --token ${RELEASE_NOTES_READ_API_TOKEN} --project-id ${CI_PROJECT_ID} --starting-tag ${PREVIOUS_TAG} --end-tag ${CI_COMMIT_TAG}
    - - []
  artifacts:
    paths:
      - release-notes.md
    when: always
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG !~ $EXCLUDED_CI_COMMIT_TAG"
      when: always
create-release-notes:
  stage: test
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare-release-notes
      artifacts: true
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG !~ $EXCLUDED_CI_COMMIT_TAG"
  script:
    - echo "running creating release notes for ${CI_COMMIT_TAG}"
  release:
    name: "${CI_PROJECT_NAME}: ${CI_COMMIT_TAG}"
    tag_name: "$CI_COMMIT_TAG"
    description: release-notes.md
    ref: "$CI_COMMIT_SHA"
[0m
[90m2025-07-31T09:08:25Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/taucher2003-group/temporary-projects/renovate-issue-reproduction-24603
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.107.1@sha256:a7fcd8dedfe95a98440374afd8ac27b48804a29aad4c2d03b767d5ab7b5d80a7
".renovate":
  cache:
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $CI_PROJECT_PATH
  tags:
    - docker-self
renovate:
  cache:
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $CI_PROJECT_PATH
  tags:
    - docker-self
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.15.0-debug
    entrypoint:
      - ''
  script:
    - echo ignored
  rules:
    - when: never
[0m
[90m2025-07-31T09:08:25Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/elchenberg/renovate-debian-variants-of-container-images
[90m2025-07-31T09:08:25Z[0m [32mINF[0m [1m
renovate:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  image: docker.io/renovate/renovate:37.107.0@sha256:75e76e7834563f232c69f64c31a993023c1c222b86f9e9a771c9cf8f8fb04d5a
  variables:
    LOG_LEVEL: debug
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORIES: '["${CI_PROJECT_PATH}"]'
    RENOVATE_TOKEN: "${RENOVATE_TOKEN}"
    RENOVATE_X_PLATFORM_VERSION: "${CI_SERVER_VERSION}"
  before_script:
    - test -n "${RENOVATE_ENDPOINT:?}"
    - test -n "${GITLAB_USER_NAME:?}"
    - test -n "${GITLAB_USER_EMAIL:?}"
    - test -n "${RENOVATE_GIT_AUTHOR:?}"
    - test "${RENOVATE_GIT_AUTHOR:?}" != ' <>'
    - test -n "${RENOVATE_PLATFORM:?}"
    - test -n "${CI_PROJECT_PATH:?}"
    - test -n "${RENOVATE_REPOSITORIES:?}"
    - test "${RENOVATE_REPOSITORIES:?}" != '[""]'
    - test -n "${RENOVATE_TOKEN:?}"
    - test "${RENOVATE_TOKEN:?}" != '${RENOVATE_TOKEN}'
    - test -n "${CI_SERVER_VERSION:?}"
    - test -n "${RENOVATE_X_PLATFORM_VERSION:?}"
  script:
    - renovate
[0m
[90m2025-07-31T09:08:26Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/elchenberg/renovate-with-registry-url
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
renovate:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  image: docker.io/renovate/renovate:37.226.0
  variables:
    LOG_LEVEL: debug
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORIES: '["${CI_PROJECT_PATH}"]'
    RENOVATE_TOKEN: "${RENOVATE_TOKEN}"
    RENOVATE_X_PLATFORM_VERSION: "${CI_SERVER_VERSION}"
  before_script:
    - test -n "${RENOVATE_ENDPOINT:?}"
    - test -n "${GITLAB_USER_NAME:?}"
    - test -n "${GITLAB_USER_EMAIL:?}"
    - test -n "${RENOVATE_GIT_AUTHOR:?}"
    - test "${RENOVATE_GIT_AUTHOR:?}" != ' <>'
    - test -n "${RENOVATE_PLATFORM:?}"
    - test -n "${CI_PROJECT_PATH:?}"
    - test -n "${RENOVATE_REPOSITORIES:?}"
    - test "${RENOVATE_REPOSITORIES:?}" != '[""]'
    - test -n "${RENOVATE_TOKEN:?}"
    - test "${RENOVATE_TOKEN:?}" != '${RENOVATE_TOKEN}'
    - test -n "${CI_SERVER_VERSION:?}"
    - test -n "${RENOVATE_X_PLATFORM_VERSION:?}"
  script:
    - renovate
alpine:
  stage: test
  image: busybox:1.36.0-musl
  script:
    - echo hello
busybox:
  stage: test
  image: alpine:3.18.4
  script:
    - echo hello
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gaia-x/data-infrastructure-federation-services/deployment-scenario/renovate
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: gaia-x/data-infrastructure-federation-services/deployment-scenario/credential-generator
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  tags:
    - gxfs-fr
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  tags:
    - gxfs-fr
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:26Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/elchenberg/renovate-with-registry-alias
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
renovate:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  image: docker.io/renovate/renovate:37.88.1@sha256:82026881a515dfcb5fd8444efd47a4c89ea551898be53a046b0e02dd28b34c8b
  variables:
    LOG_LEVEL: debug
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_REPOSITORIES: '["${CI_PROJECT_PATH}"]'
    RENOVATE_TOKEN: "${RENOVATE_TOKEN}"
    RENOVATE_X_PLATFORM_VERSION: "${CI_SERVER_VERSION}"
  before_script:
    - test -n "${RENOVATE_ENDPOINT:?}"
    - test -n "${GITLAB_USER_NAME:?}"
    - test -n "${GITLAB_USER_EMAIL:?}"
    - test -n "${RENOVATE_GIT_AUTHOR:?}"
    - test "${RENOVATE_GIT_AUTHOR:?}" != ' <>'
    - test -n "${RENOVATE_PLATFORM:?}"
    - test -n "${CI_PROJECT_PATH:?}"
    - test -n "${RENOVATE_REPOSITORIES:?}"
    - test "${RENOVATE_REPOSITORIES:?}" != '[""]'
    - test -n "${RENOVATE_TOKEN:?}"
    - test "${RENOVATE_TOKEN:?}" != '${RENOVATE_TOKEN}'
    - test -n "${CI_SERVER_VERSION:?}"
    - test -n "${RENOVATE_X_PLATFORM_VERSION:?}"
  script:
    - renovate
alpine:
  stage: test
  image: docker.io/library/busybox:1.36.0-musl@sha256:07f673568590f568182a127cb6a804dd5822101e3fc6b16a40a2868315be236c
  script:
    - echo hello
busybox:
  stage: test
  image: docker.io/library/alpine:3.18.4@sha256:eece025e432126ce23f223450a0326fbebde39cdf496a85d8c016293fc851978
  script:
    - echo hello
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/appframework/renovate-schedule
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
image: renovate/renovate:latest
variables:
  RENOVATE_REPOSITORY_CACHE: true
  RENOVATE_PLATFORM: gitlab
  LOG_LEVEL: info
stages:
  - ".pre"
  - renovate
  - ".post"
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  variables:
    RENOVATE_AUTODISCOVER: true
    RENOVATE_AUTODISCOVER_FILTER: 'appframework/**

'
    RENOVATE_ASSIGNEES: egore
    RENOVATE_EXTENDS: config:recommended
  stage: renovate
  script: renovate
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-test
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
".duplication_base":
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality: "${PMDCPD_RESULTS_BASE}.json"
duplication_go:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-go
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: go
    PMDCPD_DIR_FILES: "--file-list=go_files.txt"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - find . -type f -name "*.go" ! -name "*_test.go" > go_files.txt
duplication_js:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-js
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: ecmascript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.js"
duplication_ts:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.8.0@sha256:410488585bce7583c61a9de0549000b6091e067c51a08f69383c3193c9c46b89
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-ts
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: typescript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - |
      echo "PDM CPD min tokens: $PMDCPD_MIN_TOKENS"
      echo "PDM CPD results base: $PMDCPD_RESULTS_BASE"
      echo "PDM CPD results: $PMDCPD_RESULTS"
      echo "PDM CPD language: $PMDCPD_LANGUAGE"
      echo "PDM CPD dir/files: $PMDCPD_DIR_FILES"
      echo "PDM CPD CLI args: $PMDCPD_CLI_ARGS"
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.ts"
lint_container:
  image: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  stage: lint
  needs: []
  rules:
    - exists:
        - "*Dockerfile"
  allow_failure: true
  script:
    - hadolint *Dockerfile
".go":
  image: golang:1.24.5-alpine3.22@sha256:daae04ebad0c21149979cd8e9db38f565ecefd8547cf4a591240dc1972cf1399
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
".go_test":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/go-test:2.8.2@sha256:9abbb32b66f8678a9ca1035e6b65d2780b6341d29c9514e745429972f119d481
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
  extends:
    - ".go"
  artifacts:
    when: always
".go_test_coverage":
  after_script:
    - gocover-cobertura -by-files < coverage.out > coverage.xml
    - go tool cover -html coverage.out -o coverage.html
    - go-junit-report < tests.txt > junit.xml
  coverage: "/total:\\s+\\(statements\\)\\s+\\d+.\\d+%/"
  artifacts:
    expose_as: Go Test Coverage Report
    paths:
      - coverage.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
lint_go:
  image: golangci/golangci-lint:v2.3.0-alpine@sha256:8cde2fcc8ccc6c8ca7d4476ac35ab30de546204368c678bc7080560e69952a62
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.golangci.yml
  extends:
    - ".go"
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - apk add jq
    - |
      if [ ! -f .golangci.yml ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - 'echo "Additional CLI args: $LINT_GO_CLI_ARGS"'
    - golangci-lint run --output.code-climate.path=gl-code-quality-report.json $LINT_GO_CLI_ARGS
  after_script:
    - cat gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality:
        - gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: true
".node":
  image: node:22-alpine
lint_md:
  image: node:22-alpine
  extends:
    - ".node"
  stage: lint
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.markdownlint.json
  needs: []
  rules:
    - exists:
        - "**/*.md"
  before_script:
    - npm install -g markdownlint-cli2@0.18.1
    - |
      if [ ! -f .markdownlint.json ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - markdownlint-cli2 "**/*.md" "#node_modules"
".python":
  image: python:3.12.2-alpine3.18@sha256:f25d743e1612c9b7d31aa461ff225ae21023ca8a4bf87b27776b3362f1d0c6f2
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
".djlint":
  image: python:3.12.2-alpine3.18@sha256:f25d743e1612c9b7d31aa461ff225ae21023ca8a4bf87b27776b3362f1d0c6f2
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - |
      if [ ! -f .djlintrc ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q -O .djlintrc $CONFIG_FILE_LINK
      fi
  script:
    - djlint --check --lint .
lint_nunjucks:
  image: python:3.12.2-alpine3.18@sha256:f25d743e1612c9b7d31aa461ff225ae21023ca8a4bf87b27776b3362f1d0c6f2
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/Nunjucks.djlintrc
  extends:
    - ".djlint"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - |
      if [ ! -f .djlintrc ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q -O .djlintrc $CONFIG_FILE_LINK
      fi
  script:
    - djlint --check --lint .
  rules:
    - exists:
        - "**/*.njk"
lint_powershell:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -EnableExit"
lint_prose:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/vale:3.7.2@sha256:94ac4b5bc4b2f87c23a0ac0f507fe7f570eae9fa68aaedf60e587d54fe7da957
    entrypoint:
      - ''
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.md"
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.vale.ini
    VALE_REPORT: vale.json
    VALE_GLOB: README.md
    VALE_INPUT: "./"
  before_script:
    - |
      if [ ! -f .vale.ini ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
    - "/vale/sync.sh"
  script:
    - vale --output="/vale/vale-glcq.tmpl" --no-exit --glob="$VALE_GLOB" $VALE_CLI_ARGS $VALE_INPUT > $VALE_REPORT
  after_script:
    - jq -r '.[].check_name' $VALE_REPORT | sort | uniq -c | sort -nr
  artifacts:
    paths:
      - "$VALE_REPORT"
    reports:
      codequality:
        - "$VALE_REPORT"
lint_sh:
  image: ubuntu:24.04
  stage: lint
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.sh"
  before_script:
    - 'apt update && apt -y install --no-install-recommends shellcheck && shellcheck --version

'
  script:
    - find . -type f -name "*.sh" -exec shellcheck {} +
lint_yaml:
  image: python:3.12.2-alpine3.18@sha256:f25d743e1612c9b7d31aa461ff225ae21023ca8a4bf87b27776b3362f1d0c6f2
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.yamllint.yml
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install yamllint==1.37.1
    - |
      if [ ! -f .yamllint ] && [ ! -f .yamllint.yml ] && [ ! -f .yamllint.yaml ]; then
        echo "Using config file: $CONFIG_FILE_LINK"
        wget -q $CONFIG_FILE_LINK
      fi
  script:
    - yamllint .
prepare_release:
  image: node:22-alpine
  extends:
    - ".node"
  stage: pre-release
  needs: []
  variables:
    RELEASE:
      value: '{"defaults":{"name":"$$CHANGELOG","description":"$$CHANGELOG"}}'
      expand: false
  before_script:
    - npm install -g gitlab-releaser@8.0.6
    - |
      if [ ! -f .gitlab/gitlab-releaser.json ]; then
        echo "Using config: $RELEASE"
        mkdir -p .gitlab && echo $RELEASE > .gitlab/gitlab-releaser.json
      fi
  script:
    - gitlab-releaser
  rules:
    - if: "$CI_COMMIT_TAG"
  artifacts:
    paths:
      - ".gitlab/release.json"
create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:v0.24.0@sha256:3f52d526f48e8d10625c722fa6d6423ee82aadeae1b1aa91f07b62551d96dacf
  stage: release
  needs:
    - prepare_release
  rules:
    - if: "$CI_COMMIT_TAG"
  script:
    - release-cli create-from-file -file .gitlab/release.json
code_count:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/cloc:1.6.1@sha256:3c9fcc805d4bf890fe75fa774519f7d498e175b8d9135ff2b0f5ec09f41b3d36
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    CLOC_NOT_MATCH_FILES: package-lock.json
  script:
    - |
      echo "cloc not match files: $CLOC_NOT_MATCH_FILES"
      echo "cloc CLI args: $CLOC_CLI_ARGS"
    - cloc --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
    - cloc --json --report-file=code-count.json --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
  after_script:
    - 'cat code-count.json | jq -r ''keys[] as $k | "sloc{language=\"\($k)\"} \(.[$k] | .code)"'' | sed ''/^.*{language="\(SUM\|header\)"}.*$/d'' > metrics.txt

'
  artifacts:
    paths:
      - code-count.json
    reports:
      metrics:
        - metrics.txt
lint_renovate:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - renovate-config-validator --strict
sokrates:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-sokrates:latest
    entrypoint:
      - ''
  stage: test
  needs: []
  allow_failure: true
  rules:
    - if: "$CI_COMMIT_TAG"
  retry:
    max: 2
    when:
      - script_failure
  before_script:
    - java -XX:+PrintFlagsFinal -version | grep HeapSize
  script:
    - "/sokrates/analyze.sh"
    - if [ -z "$(ls -A _sokrates/)" ]; then exit 2; fi
  after_script:
    - echo 'sokrates run' > metrics.txt
  artifacts:
    expose_as: Sokrates Report
    paths:
      - _sokrates/
    reports:
      metrics:
        - metrics.txt
unicode_bidi_test:
  image: node:22-alpine
  extends:
    - ".node"
  stage: test
  needs: []
  variables:
    FILES: ".css,Dockerfile,.handlebars,.htm,.html,.js,.json,.md,.ps1,.sh,.svg,.toml,.ts,.xml,.yml,.yaml"
  before_script:
    - npm install -g anti-trojan-source@1.4.1
  script:
    - 'echo "Checking files: $FILES"'
    - anti-trojan-source --files='./**/*{$FILES}'
".all_except_schedule":
  rules:
    - if: "$ENABLE_SCHEDULE"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
".run_without_renovate":
  rules:
    - if: "$RUN_WITH_RENOVATE"
      when: on_success
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - when: on_success
".schedule_pass_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - allow_failure: true
".schedule_fail_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - allow_failure: true
stages:
  - ".pre"
  - prepare
  - lint
  - build
  - pre-test
  - test
  - post-test
  - pre-deploy
  - deploy
  - pre-container-build
  - container-build
  - pre-container-test
  - container-test
  - post-container-test
  - container-deploy
  - pre-release
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
default:
  artifacts:
    expire_in: 15 days
tests-ui:
  image: mcr.microsoft.com/playwright:v1.40.0-jammy@sha256:9dcc823ba14151eecb81eedb3a0abcb4fac942ae7fa9c9f96fdfcc7f5db9d239
  stage: test
  needs: []
  script:
    - echo done
test:
  image: alpine:latest
  rules:
    - when: never
  script:
    - npm i -g lockfile-lint@4.11.0
    - pip install yamllint==1.33.0
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/satdevo/renovate-project
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/abdelrahman19.adel/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.61.4@sha256:402749e7bba1f2603e8982022f2bf13a490d4c54a91e38012727c57cbed7b43e
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.9.0@sha256:34573cc4d32f6a2f702af4268a158a6976db74245476e5adb349806704f341f9
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.9.0@sha256:34573cc4d32f6a2f702af4268a158a6976db74245476e5adb349806704f341f9
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/lchastel/renovate
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/nbossard/renovate
[90m2025-07-31T09:08:26Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/joshbeard/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/deaven/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.410.2@sha256:4f2db9a198a75d36a26a8754f5e474d7ce5f406c9c6b829182fb4a972d9e5fdc
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.14.0@sha256:9fcb866ff094146ff1924ab621e97020e8a907c5e2121139f565958ec29a2553
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.14.0@sha256:9fcb866ff094146ff1924ab621e97020e8a907c5e2121139f565958ec29a2553
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/lighting3/renovate-runner
[90m2025-07-31T09:08:26Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.267.0@sha256:ac0e45620a83843f66868148584ecb040c52ca9a2dc0d2b9c7fff8af543b4c66
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.11.1@sha256:c74754e35e9272e5ce6db4ec2b3e5404c699524ca46f47f6b816bd84c35acf52
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.11.1@sha256:c74754e35e9272e5ce6db4ec2b3e5404c699524ca46f47f6b816bd84c35acf52
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/NishkarshRaj/autodiscover-renovate
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/Julien-D/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.187.1@sha256:fb91010020f5b86d74bf82004e638281b5bfcafa023f3f65f918c1a75f2bb6e1
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.11.0@sha256:c461e04d709f280ce936feb2e865495a672d99a1bb7c0f107b631d516d5d6421
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.11.0@sha256:c461e04d709f280ce936feb2e865495a672d99a1bb7c0f107b631d516d5d6421
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/NishkarshRaj/21-feb-renovate
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sean.parmelee/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.173.0@sha256:83b7c3e656a39ff777dd54b71f8153e9e64f97be8f5ac9974f1c8c0ec55d389b
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.11.0@sha256:624ce785b9c2dc000391173c90f67e579fd5b2f167eb5a42787a28c715fa05e6
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.11.0@sha256:624ce785b9c2dc000391173c90f67e579fd5b2f167eb5a42787a28c715fa05e6
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/das-floss/renovate
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/NishkarshRaj/best-practices-renovate
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/xuhdev/renovate-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.259.0@sha256:a47d5ffbb0b69706d522d897af931adf4c41fad564254110bf21c38c018cbee6
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.11.1@sha256:6235864649c47c78b0181a3aab5eb998559f6608c6052fb69a393ef358b5590b
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.11.1@sha256:6235864649c47c78b0181a3aab5eb998559f6608c6052fb69a393ef358b5590b
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:26Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ci-templates-48151/renovate-ci-runner
[90m2025-07-31T09:08:26Z[0m [32mINF[0m [1m
".lint:commit":
  stage: lint
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/commitlint:latest"
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | npx commitlint
".lint:markdown":
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  before_script:
    - mdl --version
  script:
    - mdl --style all --warnings README.md
".lint:yaml":
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  before_script:
    - yamllint --version
  script:
    - yamllint .
".security:gitleaks":
  stage: security
  image:
    name: registry.hub.docker.com/zricethezav/gitleaks:latest
    entrypoint:
      - ''
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - gitleaks version
  script:
    - gitleaks detect --redact --report-format json --verbose --log-level debug --log-opts="origin/${CI_DEFAULT_BRANCH}.."
".renovate:config-validator":
  stage: test
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
".release:semantic":
  stage: release
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/semantic-release:latest"
    entrypoint:
      - ''
  script:
    - npx semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
".renovate:deploy":
  stage: deploy
  resource_group: production
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=false"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
    RENOVATE_REPOSITORY_CACHE: enabled
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  AST_ENABLE_MR_PIPELINES: 'true'
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp
iac-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  allow_failure: true
  cache: []
  script:
    - "/analyzer run"
kics-iac-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kics/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kics:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  allow_failure: true
  cache: []
  script:
    - "/analyzer run"
  extends: iac-sast
  image:
    name: "$SAST_ANALYZER_IMAGE"
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
stages:
  - ".pre"
  - lint
  - security
  - test
  - release
  - deploy
  - ".post"
commit:
  stage: lint
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/commitlint:latest"
    entrypoint:
      - ''
  script:
    - echo "${CI_COMMIT_MESSAGE}" | npx commitlint
  extends: ".lint:commit"
markdown:
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  before_script:
    - mdl --version
  script:
    - mdl --style all --warnings README.md
  extends: ".lint:markdown"
yaml:
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  before_script:
    - yamllint --version
  script:
    - yamllint .
  extends: ".lint:yaml"
gitleaks:
  stage: security
  image:
    name: registry.hub.docker.com/zricethezav/gitleaks:latest
    entrypoint:
      - ''
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - gitleaks version
  script:
    - gitleaks detect --redact --report-format json --verbose --log-level debug --log-opts="origin/${CI_DEFAULT_BRANCH}.."
  extends: ".security:gitleaks"
renovate:config-validator:
  stage: test
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: "--strict"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  extends: ".renovate:config-validator"
semantic:
  stage: release
  image:
    name: "${CI_REGISTRY}/ci-templates-48151/gitlab-ci-images/semantic-release:latest"
    entrypoint:
      - ''
  script:
    - npx semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  extends: ".release:semantic"
renovate:deploy:
  stage: deploy
  resource_group: production
  image:
    name: registry.hub.docker.com/renovate/renovate:latest
    entrypoint:
      - ''
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=false"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
    RENOVATE_REPOSITORY_CACHE: enabled
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  extends: ".renovate:deploy"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/wdhafer/renovate-ci
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.279.0@sha256:328686ec82a09ea7fc4326ac03a35dff926a7e85206d7f1b376d6002e04ef526
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  LOG_LEVEL: info
  RENOVATE_GL_HOST: gitlab-com
  RENOVATE_HOST_RULES: |
    [
      {"hostType": "docker", "matchHost": "registry.ops.gitlab.net","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"},
      {"hostType": "helm", "matchHost": "https://registry.ops.gitlab.net/gitlab-com/gl-infra/charts","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"}
    ]
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends:
    - ".id_tokens"
    - ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  environment:
    name: renovate
  tags:
    - gitlab-org
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: renovate/registry-ops/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
    SLACK_WEBHOOK_URL:
      vault: renovate/notifier/slack_webhook_url@shared
      file: false
".id_tokens":
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
renovate:dry-run:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  extends:
    - ".id_tokens"
    - ".renovate"
  stage: test
  resource_group: production
  environment:
    name: readonly
    action: verify
  tags:
    - gitlab-org
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: renovate/registry-ops/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
    SLACK_WEBHOOK_URL:
      vault: renovate/notifier/slack_webhook_url@shared
      file: false
renovate:notify:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: ruby:3.3.0
  script:
    - bundle install
    - ruby bin/notify.rb
  extends:
    - ".id_tokens"
    - ".renovate"
  stage: deploy
  environment:
    name: readonly
    action: verify
  variables:
    PROJECTS_YAML: projects.yml
  tags:
    - gitlab-org
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: renovate/registry-ops/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
    SLACK_WEBHOOK_URL:
      vault: renovate/notifier/slack_webhook_url@shared
      file: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_NOTIFY
[0m
[90m2025-07-31T09:08:27Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/binarygame/renovatebot
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/davinkevin.fr/projects/renovate/davinkevin-fr-renovate
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/biomedit/test-renovate
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/farzad_aziz/renovate-test
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
".renovate":
  stage: test
  variables:
    CURRENT_REPOSITORY: "$CI_PROJECT_PATH"
    RENOVATE_PLATFORM: gitlab
    CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:latest
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate_data"
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_SEPARATE_MAJOR_MINOR: 'false'
    RENOVATE_ASSIGNEES_FROM_CODE_OWNERS: 'true'
    RENOVATE_REVIEWERS_FROM_CODE_OWNERS: 'true'
    RENOVATE_CONSTRAINTS: '{"python": "3.6.*"}'
    RENOVATE_CONSTRAINTS_FILTERING: strict
    RENOVATE_PR_HOURLY_LIMIT: 20
  script:
    - renovate $RENOVATE_EXTRA_FLAGS $CURRENT_REPOSITORY
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
renovate:
  stage: test
  variables:
    CURRENT_REPOSITORY: "$CI_PROJECT_PATH"
    RENOVATE_PLATFORM: gitlab
    CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:latest
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate_data"
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_SEPARATE_MAJOR_MINOR: 'false'
    RENOVATE_ASSIGNEES_FROM_CODE_OWNERS: 'true'
    RENOVATE_REVIEWERS_FROM_CODE_OWNERS: 'true'
    RENOVATE_CONSTRAINTS: '{"python": "3.6.*"}'
    RENOVATE_CONSTRAINTS_FILTERING: strict
    RENOVATE_PR_HOURLY_LIMIT: 20
  script:
    - renovate $RENOVATE_EXTRA_FLAGS $CURRENT_REPOSITORY
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  extends: ".renovate"
  image: "${CI_RENOVATE_IMAGE}"
  artifacts:
    when: always
    expire_in: 7d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/skumar20592/renovatebot
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:32.241.11
  variables:
    RENOVATE_CONFIG_FILE: renovate-config.js
  script:
    - renovate
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/nejc/repro-renovate-hostrules
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_HOST_RULES: |
      [
        {"matchHost": "registry.gitlab.com", "username": "gitlab-ci-token", "password": "$CI_JOB_TOKEN"},
        {"timeout": $MISSING_VARIABLE}
      ]
renovate-valid:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_HOST_RULES: |
      [
        {"matchHost": "registry.gitlab.com", "username": "gitlab-ci-token", "password": "$CI_JOB_TOKEN"},
        {"timeout": 10000}
      ]
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ccasella_seacom/renovate-bot
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/mkrill/renovate-bug-reproduction
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_CONFIG_FILE: config.js
  RENOVATE_LOG_FILE: renovate-log.ndjson
  LOG_LEVEL: DEBUG
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_REPOSITORIES: '[ "mkrill/renovate-bug-reproduction" ]'
renovate:
  image: renovate/renovate:37.49.3@sha256:37419c029299299253a1ea5fd923d811bd5de7be80d2c8a1f9b21b2389e5d893
  script:
    - renovate-config-validator
    - echo "RENOVATE_REPOSITORIES is set to ${RENOVATE_REPOSITORIES}"
    - renovate --autodiscover=false --print-config
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: "$CI_COMMIT_BRANCH"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/meetupbot/mitup-renovate
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/kashaudhan/renovatebot-runner
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/cdoyle27/renovate-runner
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.216.0@sha256:852df02383c14ed156bb412db616356efe221a1afcc9b0dfc7fafc4435cc452c
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rostlab/kubernetes/renovate-runner
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.399.0@sha256:cd9f162fe2ac61f36982492172c8cdfc3b44cadc4c13a543a60f9fe4166e2f0c
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:27Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate6361448/renovate-runner
[90m2025-07-31T09:08:27Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.64.3@sha256:a852457e21996a2e01ed25b9d84e83c680059c6031685936edf2cd5a7eceb046
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:28Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/MindTooth/renovate-preset-test
[90m2025-07-31T09:08:28Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/sks-project1/renovate
[90m2025-07-31T09:08:28Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:latest
  resource_group: production
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true"
    RENOVATE_REQUIRE_CONFIG: optional
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'false'
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_ONBOARDING: 'false'
    RENOVATE_LOG_FILE: renovate-log.ndjson
    LOG_LEVEL: info
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:28Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/renovate-config
[90m2025-07-31T09:08:28Z[0m [32mINF[0m [1m
".duplication_base":
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality: "${PMDCPD_RESULTS_BASE}.json"
duplication_go:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-go
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: go
    PMDCPD_DIR_FILES: "--file-list=go_files.txt"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - find . -type f -name "*.go" ! -name "*_test.go" > go_files.txt
duplication_js:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-js
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: ecmascript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.js"
duplication_ts:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-ts
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: typescript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.ts"
lint_container:
  image: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  stage: lint
  needs: []
  rules:
    - exists:
        - "*Dockerfile"
  allow_failure: true
  script:
    - hadolint *Dockerfile
".go":
  image: golang:1.24.5-alpine3.22@sha256:ddf52008bce1be455fe2b22d780b6693259aaf97b16383b6372f4b22dd33ad66
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
".go_test":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/go-test:2.8.2@sha256:9abbb32b66f8678a9ca1035e6b65d2780b6341d29c9514e745429972f119d481
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
  extends:
    - ".go"
  artifacts:
    when: always
".go_test_coverage":
  after_script:
    - gocover-cobertura -by-files < coverage.out > coverage.xml
    - go tool cover -html coverage.out -o coverage.html
    - go-junit-report < tests.txt > junit.xml
  coverage: "/total:\\s+\\(statements\\)\\s+\\d+.\\d+%/"
  artifacts:
    expose_as: Go Test Coverage Report
    paths:
      - coverage.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
lint_go:
  image: golangci/golangci-lint:v2.2.2-alpine@sha256:27ec1537dc2c6b17375d234c8fc6fcb567bc73335c092bd15f1cf0190718dbd1
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.golangci.yml
  extends:
    - ".go"
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - apk add jq
    - if [ ! -f .golangci.yml ]; then (wget $CONFIG_FILE_LINK) fi
  script:
    - golangci-lint run --output.code-climate.path=gl-code-quality-report.json $LINT_GO_CLI_ARGS
  after_script:
    - cat gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality:
        - gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: true
".node":
  image: node:22-alpine
lint_md:
  image: node:22-alpine
  extends:
    - ".node"
  stage: lint
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.markdownlint.json
  needs: []
  rules:
    - exists:
        - "**/*.md"
  before_script:
    - npm install -g markdownlint-cli2@0.18.1
    - if [ ! -f .markdownlint.json ]; then (wget $CONFIG_FILE_LINK) fi
  script:
    - markdownlint-cli2 "**/*.md" "#node_modules"
".python":
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
".djlint":
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - if [ ! -f .djlintrc ]; then (wget -O .djlintrc $CONFIG_FILE_LINK) fi
  script:
    - djlint --check --lint .
lint_nunjucks:
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/Nunjucks.djlintrc
  extends:
    - ".djlint"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - if [ ! -f .djlintrc ]; then (wget -O .djlintrc $CONFIG_FILE_LINK) fi
  script:
    - djlint --check --lint .
  rules:
    - exists:
        - "**/*.njk"
lint_powershell:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -EnableExit"
lint_prose:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/vale:3.7.1@sha256:5512f41f2a08b416b42ea064e1538ff59ca9e577dcc5e649a44c56d1941ab928
    entrypoint:
      - ''
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.md"
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.vale.ini
    VALE_REPORT: vale.json
    VALE_GLOB: README.md
    VALE_INPUT: "./"
  before_script:
    - if [ ! -f .vale.ini ]; then (wget $CONFIG_FILE_LINK) fi
    - "/vale/sync.sh"
  script:
    - vale --output="/vale/vale-glcq.tmpl" --no-exit --glob="$VALE_GLOB" $VALE_CLI_ARGS $VALE_INPUT > $VALE_REPORT
  after_script:
    - jq -r '.[].check_name' $VALE_REPORT | sort | uniq -c | sort -nr
  artifacts:
    paths:
      - "$VALE_REPORT"
    reports:
      codequality:
        - "$VALE_REPORT"
lint_sh:
  image: ubuntu:24.04
  stage: lint
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.sh"
  before_script:
    - 'apt update && apt -y install --no-install-recommends shellcheck && shellcheck --version

'
  script:
    - find . -type f -name "*.sh" -exec shellcheck {} +
lint_yaml:
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.yamllint.yml
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install yamllint==1.37.1
    - 'if [ ! -f .yamllint ] && [ ! -f .yamllint.yml ] && [ ! -f .yamllint.yaml ]; then (wget $CONFIG_FILE_LINK) fi

'
  script:
    - yamllint .
prepare_release:
  image: node:22-alpine
  extends:
    - ".node"
  stage: pre-release
  needs: []
  variables:
    RELEASE:
      value: '{"defaults":{"name":"$$CHANGELOG","description":"$$CHANGELOG"}}'
      expand: false
  before_script:
    - npm install -g gitlab-releaser@8.0.6
    - |
      if [ ! -f .gitlab/gitlab-releaser.json ]; then
        mkdir -p .gitlab && echo $RELEASE > .gitlab/gitlab-releaser.json
      fi
  script:
    - gitlab-releaser
  rules:
    - if: "$CI_COMMIT_TAG"
  artifacts:
    paths:
      - ".gitlab/release.json"
create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:v0.24.0@sha256:3f52d526f48e8d10625c722fa6d6423ee82aadeae1b1aa91f07b62551d96dacf
  stage: release
  needs:
    - prepare_release
    - lint_renovate_configs
  rules:
    - if: "$CI_COMMIT_TAG"
  script:
    - release-cli create-from-file -file .gitlab/release.json
code_count:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/cloc:1.6.0@sha256:ca1bb1499f4eee47e3d99a57cdf1e04918e3663f14320f11f553982e1778ce53
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    CLOC_NOT_MATCH_FILES: package-lock.json
  script:
    - cloc --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
    - cloc --json --report-file=code-count.json --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
  after_script:
    - 'cat code-count.json | jq -r ''keys[] as $k | "sloc{language=\"\($k)\"} \(.[$k] | .code)"'' | sed ''/^.*{language="\(SUM\|header\)"}.*$/d'' > metrics.txt

'
  artifacts:
    paths:
      - code-count.json
    reports:
      metrics:
        - metrics.txt
lint_renovate:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - renovate-config-validator --strict
sokrates:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-sokrates:latest
    entrypoint:
      - ''
  stage: test
  needs: []
  allow_failure: true
  rules:
    - if: "$CI_COMMIT_TAG"
  retry:
    max: 2
    when:
      - script_failure
  before_script:
    - java -XX:+PrintFlagsFinal -version | grep HeapSize
  script:
    - "/sokrates/analyze.sh"
    - if [ -z "$(ls -A _sokrates/)" ]; then exit 2; fi
  after_script:
    - echo 'sokrates run' > metrics.txt
  artifacts:
    expose_as: Sokrates Report
    paths:
      - _sokrates/
    reports:
      metrics:
        - metrics.txt
unicode_bidi_test:
  image: node:22-alpine
  extends:
    - ".node"
  stage: test
  needs: []
  variables:
    FILES: ".css,Dockerfile,.handlebars,.htm,.html,.js,.json,.md,.ps1,.sh,.svg,.toml,.ts,.xml,.yml,.yaml"
  before_script:
    - npm install -g anti-trojan-source@1.4.1
  script:
    - anti-trojan-source --files='./**/*{$FILES}'
".all_except_schedule":
  rules:
    - if: "$ENABLE_SCHEDULE"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
".run_without_renovate":
  rules:
    - if: "$RUN_WITH_RENOVATE"
      when: on_success
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - when: on_success
".schedule_pass_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - allow_failure: true
".schedule_fail_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - allow_failure: true
stages:
  - ".pre"
  - prepare
  - lint
  - build
  - pre-test
  - test
  - post-test
  - pre-deploy
  - deploy
  - pre-container-build
  - container-build
  - pre-container-test
  - container-test
  - post-container-test
  - container-deploy
  - pre-release
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
default:
  artifacts:
    expire_in: 15 days
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  DS_EXCLUDED_ANALYZERS: ''
  DS_EXCLUDED_PATHS: spec, test, tests, tmp, node_modules
  DS_MAJOR_VERSION: 6
  DS_SCHEMA_MODEL: 15
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_ANALYZERS: ''
  DEFAULT_SAST_EXCLUDED_PATHS: spec, test, tests, tmp
  SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS"
  SCAN_KUBERNETES_MANIFESTS: 'false'
  SECRET_DETECTION_IMAGE_SUFFIX: ''
  SECRETS_ANALYZER_VERSION: '7'
  SECRET_DETECTION_EXCLUDED_PATHS: ''
  OWASP_DEPENDENCY_CHECK: owasp_dependency_check
  GITLAB_ADVANCED_SAST_ENABLED: 'true'
dependency_scanning:
  stage: test
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
  dependencies: []
  rules:
    - when: never
".ds-analyzer":
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  dependencies: []
  rules:
    - when: never
  extends: dependency_scanning
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: ''
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
".cyclonedx-reports":
  artifacts:
    access: all
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
    reports:
      cyclonedx: "**/gl-sbom-*.cdx.json"
".gemnasium-shared-rule":
  exists:
    - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
gemnasium-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium([^-]|$)/"
      when: never
    - if: ($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
        DS_REMEDIATE: 'false'
    - if: "($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium
    GEMNASIUM_LIBRARY_SCAN_ENABLED: 'true'
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
  needs: []
".gemnasium-maven-shared-rule":
  exists:
    - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
gemnasium-maven-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium-maven/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
        DS_REMEDIATE: 'false'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium-maven
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
".gemnasium-python-shared-rule":
  exists:
    - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
gemnasium-python-dependency_scanning:
  stage: test
  script:
    - "/analyzer run"
  artifacts:
    access: all
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  rules:
    - if: "$DEPENDENCY_SCANNING_DISABLED == 'true' || $DEPENDENCY_SCANNING_DISABLED == '1'"
      when: never
    - if: "$DS_EXCLUDED_ANALYZERS =~ /gemnasium-python/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE && $CI_GITLAB_FIPS_MODE == "true"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $CI_GITLAB_FIPS_MODE == "true"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/"
      exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bdependency_scanning\b/ && $PIP_REQUIREMENTS_FILE && $CI_GITLAB_FIPS_MODE == "true"
      variables:
        DS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bdependency_scanning\\b/ && $PIP_REQUIREMENTS_FILE"
  extends:
    - ".ds-analyzer"
    - ".cyclonedx-reports"
  allow_failure: true
  variables:
    DS_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/$DS_ANALYZER_NAME:$DS_MAJOR_VERSION"
    DS_ANALYZER_NAME: gemnasium-python
  image:
    name: "$DS_ANALYZER_IMAGE$DS_IMAGE_SUFFIX"
sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
".sast-analyzer":
  stage: test
  artifacts:
    access: all
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - "/analyzer run"
  extends: sast
  allow_failure: true
".deprecated-16.8":
  stage: test
  artifacts:
    access: all
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
".gitlab-advanced-sast-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.go"
    - "**/*.java"
    - "**/*.jsp"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.cs"
    - "**/*.rb"
    - "**/*.php"
gitlab-advanced-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /gitlab-advanced-sast/"
      when: never
    - if: "$GITLAB_ADVANCED_SAST_ENABLED != 'true' && $GITLAB_ADVANCED_SAST_ENABLED != '1'"
      when: never
    - if: "($CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID) && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/"
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
  variables:
    SEARCH_MAX_DEPTH: 20
    FF_GLAS_ENABLE_PHP_SUPPORT: 'true'
    SAST_ANALYZER_IMAGE_TAG: '2'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gitlab-advanced-sast:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
  cache:
    key: scan-metrics-$CI_COMMIT_REF_SLUG
    fallback_keys:
      - scan-metrics-$CI_DEFAULT_BRANCH
    paths:
      - scan_metrics.csv
  tags:
    - saas-linux-medium-amd64
  needs: []
bandit-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
brakeman-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
eslint-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
flawfinder-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
kubesec-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kubesec/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $SCAN_KUBERNETES_MANIFESTS == 'true'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $SCAN_KUBERNETES_MANIFESTS == 'true'"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kubesec:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
gosec-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
mobsf-android-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
mobsf-ios-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
nodejs-scan-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
phpcs-security-audit-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
".pmd-apex-exist-rules":
  exists:
    - "**/*.cls"
pmd-apex-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /pmd-apex/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.cls"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.cls"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/pmd-apex:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".semgrep-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.go"
    - "**/*.java"
    - "**/*.cs"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.rb"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
".semgrep-with-advanced-sast-exist-rules":
  exists:
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
security-code-scan-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 15.9 and removed in GitLab 16.0"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/390416"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
semgrep-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /semgrep/"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: registry.gitlab.com/gitlab-ci-utils/gitlab-semgrep-plus:10.1.0
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".sobelow-exist-rules":
  exists:
    - "**/mix.exs"
sobelow-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /sobelow/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/mix.exs"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/mix.exs"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/sobelow:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".spotbugs-exist-rules":
  exists:
    - "**/*.groovy"
spotbugs-sast:
  stage: test
  artifacts:
    access: all
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /spotbugs/"
      when: never
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.groovy"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.groovy"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 5
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".secret-analyzer":
  stage: test
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: true
  variables:
    GIT_DEPTH: '50'
  artifacts:
    access: all
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
secret_detection:
  stage: test
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: true
  variables:
    GIT_DEPTH: '50'
  artifacts:
    access: all
    reports:
      secret_detection:
        - gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
  extends: ".secret-analyzer"
  rules:
    - if: "$SECRET_DETECTION_DISABLED == 'true' || $SECRET_DETECTION_DISABLED == '1'"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
  script:
    - "/analyzer run"
  needs: []
json_schema_secure:
  image: node:22-alpine
  extends:
    - ".node"
  stage: test
  needs: []
  before_script:
    - npm install -g ajv-cli@5.0.0
  script:
    - |
      # Test each schema and catch errors to flag any failed, ensuring all schemas are tested
      RESULT=passed
      for SCHEMA in ${JSON_SCHEMAS//,/ }; do
        ajv -s /usr/local/lib/node_modules/ajv-cli/node_modules/ajv/lib/refs/json-schema-secure.json -d $SCHEMA --all-errors --strictTypes=false || RESULT=failed
      done
      # If any schema failed, fail job
      if [ $RESULT == "failed" ]; then exit 1; fi
  allow_failure: true
  rules:
    - if: "$JSON_SCHEMAS"
osv_scanner:
  image:
    name: ghcr.io/google/osv-scanner:v2.0.3@sha256:3c56279b527c0a79b0b06c207efea1145ad8062e6c7d1358ccb10034430fcd00
    entrypoint:
      - ''
  stage: test
  variables:
    CONFIG_FILE_NAME: global-osv-scanner.toml
  needs: []
  allow_failure: true
  before_script:
    - |
      # Get global config file if specified
      if [ -n "$CONFIG_FILE_LINK" ]; then
        echo "Retrieving global config $CONFIG_FILE_LINK"
        wget -O "$CONFIG_FILE_NAME" $CONFIG_FILE_LINK;
      fi
      # If global config file retrieved, append to existing config, or create config
      if [ -f "$CONFIG_FILE_NAME" ]; then
        echo "Combining config files"
        cat "$CONFIG_FILE_NAME" >> osv-scanner.toml;
        rm "$CONFIG_FILE_NAME";
      fi
  script:
    - |
      /osv-scanner scan source --format table . || if [ "$?" -eq "128" ];
        then exit 0;
      else
        /osv-scanner scan source --format json . > osv-scanner-results.json;
      fi
    - "/osv-scanner --format table . || /osv-scanner --format json . > osv-scanner-results.json"
  after_script:
    - echo 'osv_scanner run' > metrics.txt
  artifacts:
    when: on_failure
    expose_as: OSV Scanner Report
    paths:
      - osv-scanner-results.json
    reports:
      metrics:
        - metrics.txt
owasp_dependency_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint:
      - ''
  stage: test
  script:
    - '/usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0 --noupdate --suppression /suppressions/npm_fp_suppression.xml --suppression /suppressions/npm_na_suppressions.xml $ODC_ADDITIONAL_ARGS

'
  allow_failure: true
  artifacts:
    when: always
    expose_as: OWASP Dependency Check Report
    paths:
      - dependency-check-report.html
      - dependency-check-report.json
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'schedule'"
powershell-sast:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: test
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -CustomRulePath (Get-Module InjectionHunter -List | % Path) -EnableExit"
syft_sbom:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/syft:v1.28.0@sha256:d63b1c789eff563aa57dab8796a078c0d53ee87b75c95adf5d84737cf5e71d19
    entrypoint:
      - ''
  stage: test
  needs: []
  script:
    - "/syft/syft $CI_PROJECT_DIR -o cyclonedx-json=syft.cdx.json"
  after_script:
    - echo 'syft_sbom run' > metrics.txt
  artifacts:
    paths:
      - syft.cdx.json
    reports:
      metrics:
        - metrics.txt
      cyclonedx:
        - syft.cdx.json
  rules:
    - exists:
        - "**/{Gemfile.lock,composer.lock,gems.locked,go.sum,npm-shrinkwrap.json,package-lock.json,yarn.lock,pnpm-lock.yaml,packages.lock.json,conan.lock}"
      when: never
    - exists:
        - "**/{build.gradle,build.gradle.kts,build.sbt,pom.xml}"
      when: never
    - exists:
        - "**/{requirements.txt,requirements.pip,Pipfile,Pipfile.lock,requires.txt,setup.py,poetry.lock,uv.lock}"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID"
trivy_fs:
  image:
    name: ghcr.io/aquasecurity/trivy:0.64.1@sha256:a8ca29078522f30393bdb34225e4c0994d38f37083be81a42da3a2a7e1488e9e
    entrypoint:
      - ''
  stage: test
  variables:
    TRIVY_SCANNERS: vuln
    TRIVY_REPORT_NAME_BASE: trivy
    TRIVY_JSON_REPORT_NAME: "$TRIVY_REPORT_NAME_BASE.json"
    TRIVY_CLI_ARGS: "--include-dev-deps"
    TRIVY_FAIL_SEVERITY: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
  needs: []
  allow_failure: true
  script:
    - trivy --version
    - trivy fs --exit-code 0 --scanners "$TRIVY_SCANNERS" --no-progress --format json --output "$TRIVY_JSON_REPORT_NAME" --list-all-pkgs $TRIVY_CLI_ARGS ./
    - trivy convert --format cyclonedx --output "${TRIVY_REPORT_NAME_BASE}.cdx.json" "$TRIVY_JSON_REPORT_NAME"
    - trivy convert --format template --template "@/contrib/html.tpl" --output "${TRIVY_REPORT_NAME_BASE}.html" "$TRIVY_JSON_REPORT_NAME"
    - trivy convert --exit-code 1 --format table --severity "$TRIVY_FAIL_SEVERITY" "$TRIVY_JSON_REPORT_NAME"
  artifacts:
    paths:
      - "${TRIVY_REPORT_NAME_BASE}.*"
    when: always
  rules:
    - if: "$TRIVY_FS_ENABLED == 'true'"
lint_renovate_configs:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - find ./presets/ -type f -name *.json -exec renovate-config-validator --strict {} +
  extends:
    - lint_renovate
[0m
[90m2025-07-31T09:08:29Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/kashaudhan/renovate-runner
[90m2025-07-31T09:08:29Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.288.0@sha256:1b1774cd36ce9c568ca5642606fb3686dfa99199ead3422e527faee0375411f4
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.12.2@sha256:599ca21c276ea129c729ef4e09584404886af8127ade8e0de482f9806d95b835
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.12.2@sha256:599ca21c276ea129c729ef4e09584404886af8127ade8e0de482f9806d95b835
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:29Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rug-digitallab/infrastructure/renovate
[90m2025-07-31T09:08:29Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
default:
  artifacts:
    paths:
      - renovate-log.ndjson
renovate-dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --dry-run $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    access: developer
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:29Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m4
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/KubeArchitect/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sysadmin_bonasoft/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/to-be-continuous/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/julieheard/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ondrejbudai/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sandlin/gitlab/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/qmatillat/renovate-preset
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tinou98/renovate-preset
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/24-heures-insa/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dpprdan/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sand7/sand-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/valley-school/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-test4/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/t607/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-runner-redhat
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/redhat/red-hat-ci-tools/platform-engineering/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/evu-anschlusszug-melder/anschlusszug-melder
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lightingcontrol/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deposition.cloud/infra/devops/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rasmus.skaare/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jonathanjeding/renovate-gitlab-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/strowi/renovate-test
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate8143112/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/AverageMarcus/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/marcelotsvaz/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate8143112/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vikasbansal1986/renovate_test
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thejan2009/renovate-automerge-gitlab
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ste_knowis/renovate-npm-reproduction
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bagahunda/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ste_knowis/renovate-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-runner/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MindTooth/renovate-gitlab-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-runner/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/commonground/don/ci/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/radya/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/CentOS/automotive/platform-engineering/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sirtimbly/clear-required-approvals
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdenneen/test-renovate2
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-track-image-os
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdenneen/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hinricht/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cdenneen/test-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/team-supercharge/jarvis/renovate-presets
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jochenh/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kotocoop/global-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-version-issue/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/guilhem_lr/test-renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-version-issue/renovate-graphql-version-issue
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsandrocicero/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/springfield-ham-radio/ops/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/arichtman-srt/renovate-bundler-issue
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/f4rk4sh/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/geor/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/collabthings/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sonny.lallier/test-renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rewdy/renovate-inspector
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-runner-mend
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/robv8r/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/chrisime2603/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dquinney/renovate-out
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gregoire74jourdain/renovate-gitlab-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/JakubA/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aalakkad/renovate-gitlab-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ankitcharolia/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MaTmoZz/my-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jamietanna/bug-nodejs18-undici-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-runner-example/renovate-ejemplo-proyecto
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-runner-example/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/keylay/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-runner-2
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lama-corp/infra/services/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kotocoop/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/simplepaypal1/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ShowMeYourCodeYouTube/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/frantic1048/renovate-beachball-demo
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/maggiolispa-public/devops/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/weblibros/renovate-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tech-marketing/devsecops/initech/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/seanarnold/renovate-test
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ahmed.fourti/test-renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tihiller/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MxB1989/renovate-gitlab-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/yellowhat-labs/bootstrap
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ThomasToyo/renovate-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ThomasToyo/renovate3
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nerzhuls-packages/docker/renovate-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jad.haddad/renovate-test
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/alejandro/renovate-base-branches
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Orange-OpenSource/lfn/tools/renovate
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/anro87/renovate-example
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nerzhuls-packages/kustomize/renovate-bot
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bstone2/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-runner
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elyday/renovate-config
[90m2025-07-31T09:08:40Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/AKorezin/renovate-issue-23212
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/julieheard/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.44.0@sha256:168ba33f4966c324240ae38a4874f4a79f604313474bf34972b030be91a33b14
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.17.1@sha256:d11a12fb4e93c491f6229f6b7e7a94455e4ec5368c7430385ce9efbe018da04a
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.17.1@sha256:d11a12fb4e93c491f6229f6b7e7a94455e4ec5368c7430385ce9efbe018da04a
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/rasmus.skaare/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.19.1-slim@sha256:14c461871fb188447a0bdeb03e95a5d7eb791169e0d92a0f5dcb01ef84bff478
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.19.1@sha256:ed4e4383dc4590bd934ddb7ae4c3c5430645d73f026341992a381422c68cf854
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/robv8r/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.23-dind@sha256:a32bb7335987a3db383a3d834c8a9a9472abf9637ddd55260351696c0244b1a6
  CI_RENOVATE_IMAGE: renovate/renovate:34.140.0-slim@sha256:5a7d28e8b53359b575fa6cb7e48b63fcc21ef0e3dde7148e5d9352743f3542d3
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ondrejbudai/renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/dpprdan/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.48.2-slim@sha256:4a8e5e9f1f110b39ebc287a1ab0c87c6886fe017934101a5c9e5815e2ad3d256
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.48.2@sha256:d4f6462c376eab69000346ec04f96ed6ebc93518ae19b49abfe020e95d891b6f
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sandlin/gitlab/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.39.0@sha256:44f8fd77870248c833e7e1af3968b97f7169a9f0ef6f7f0ce20c2010502e5283
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=true --autodiscover-filter=sandlin/examples/*"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["github>platform-engineering-org/.github"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.198.0@sha256:f96b0a36f7107460fedad97b12acad84bba5d658aadc8548cec1043684b86bb4
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  parallel:
    matrix:
      - RENOVATE_CONFIG_FILE:
          - config.js
          - config-container-images.js
stages:
  - ".pre"
  - deploy
  - pre-commit
  - ".post"
".pre-commit":
  stage: pre-commit
  image: "$CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX/python:3.13.5-bullseye"
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install pre-commit pip
  script:
    - pre-commit run --all-files --verbose
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
default:
  tags:
    - docker
pre-commit:
  stage: pre-commit
  image: "$CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX/python:3.13.5-bullseye"
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install pre-commit pip
  script:
    - pre-commit run --all-files --verbose
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
  extends: ".pre-commit"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/dsandrocicero/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.115.2-slim@sha256:897e8318f5bc202f496fa4e5f6145839d5fa792bab12319e05363c5fe18c3ee4
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.115.2@sha256:ee90267dfac7643f39d1e02c1269bb0d5b221385af16a8ef0768d4218bb9bab2
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/cdenneen/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  RENOVATE_BINARY_SOURCE: docker
  CI_RENOVATE_SERVICE: docker:23.0.1-dind@sha256:e4d776dd1e0580dfb670559d887300aa08b53b8a59f5df2d4eaace936ef4d0e9
  CI_RENOVATE_IMAGE: renovate/renovate:34.160.0-slim@sha256:f379795a094c6486850a9f53116adc408978067129fc9cea4b7fc74778bd29f3
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/KubeArchitect/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_TOKEN: "$GITLAB_ACCESS_TOKEN"
  GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.96.0@sha256:6047662f9e4bc9d1e70c2885ad6252513cd51df8a1fdfcaf1b6837945c38ac2d
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --include-forks"
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
default:
  tags:
    - linux
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.17.1@sha256:663b6df180ead1dc3003fcfa3455fb4fa61f1ad8e1f76d8b2cd55474ec4f0708
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/jochenh/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:23.0.1-dind@sha256:e4d776dd1e0580dfb670559d887300aa08b53b8a59f5df2d4eaace936ef4d0e9
  CI_RENOVATE_IMAGE: renovate/renovate:34.159.1-slim@sha256:1ec4337894a5212be8756b2641236a41fb4b601dd4f2e4adc79e362d196c13f7
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/vikasbansal1986/renovate_test
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.17.1-slim@sha256:a0de41d28cf5a46ee16352244f1b62b0fc6e7fdb6045a1f3dbc39dc1f41d5494
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.17.0@sha256:9342b7358e0a3c4817e2291e1077c6c3d92a7e2bb476fbfa0c82881063ec51de
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sand7/sand-renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.159.7-slim@sha256:94f46a6518ed869460ff986752adc0885c32f3052acc7bba53ddc3a4d079ae1d
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.159.7@sha256:b24f6a2df70b0a698a0ba55243be78cc76efa279d50f04e4f72bd1da22231b55
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/lmilbaum/renovate-runner-redhat
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["github>platform-engineering-org/.github"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.67.1@sha256:34e780d3be76aa2dffe14cc59e243950c6ad312a9d894be90093e93f0c4f0d5a
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
default:
  tags:
    - docker_spot_runner
stages:
  - ".pre"
  - deploy
  - ci
  - ".post"
pre-commit:
  image: python:3.11.5-bullseye@sha256:4463d71187d5a84367f8df9ebc29bec6db50ddd70864ee9f184ab63566772ff3
  stage: ci
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install -r requirements.txt
  script:
    - pre-commit run --all-files
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/MaTmoZz/my-renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/radya/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  RENOVATE_BINARY_SOURCE: docker
  CI_RENOVATE_SERVICE: docker:23.0.1-dind@sha256:3a09aaa775e328ec0817cb9b060e68c94ccf135f290c70f8189fbf2128ecdd9c
  CI_RENOVATE_IMAGE: renovate/renovate:35.8.3-slim@sha256:b701ccb8893d581ecd9dc9085683398c09338af94afb246a046a1a91f33f6356
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-test4/renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renovate-runner-example/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.66.3-slim@sha256:cf9b356880d190250dce41c1532bc6cc7e29b3afec07f2cf398409a64fcf28d3
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.66.3@sha256:8ea6d233c11d9e91f8f6ac4eeda8e3efeafb026381a5081f761c76524a4364c0
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/bagahunda/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.143.0-slim@sha256:b6d472f97801aaa4531c911f646f450b53a13a892b71562e4792f94a52955523
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.143.0@sha256:fca62693ffb7ea48815e6e2d5d080ba0ecab808fa2b940f54c9c7638ef99391a
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.1@sha256:757ae20d5881b9c32f9a7841cf4d2bbee8d57bd33797b7068495282f0edfea41
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.1@sha256:757ae20d5881b9c32f9a7841cf4d2bbee8d57bd33797b7068495282f0edfea41
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/redhat/red-hat-ci-tools/platform-engineering/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["github>platform-engineering-org/.github"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.67.1@sha256:34e780d3be76aa2dffe14cc59e243950c6ad312a9d894be90093e93f0c4f0d5a
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
default:
  tags:
    - docker_spot_runner
stages:
  - ".pre"
  - deploy
  - ci
  - ".post"
pre-commit:
  image: python:3.11.5-bullseye@sha256:4463d71187d5a84367f8df9ebc29bec6db50ddd70864ee9f184ab63566772ff3
  stage: ci
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install -r requirements.txt
  script:
    - pre-commit run --all-files
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lama-corp/infra/services/renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["local>lama-corp/infra/services/renovate//renovate-presets.json"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_FILTER: "+(lama-corp)/**"
  RENOVATE_GIT_AUTHOR: Lama Corp. Renovate <renovate@lama-corp.space>
  RENOVATE_ONBOARDING: 'true'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
image: "${CI_RENOVATE_IMAGE_FULL}"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/CentOS/automotive/platform-engineering/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["github>platform-engineering-org/.github"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:37.224.3@sha256:798b13047d6415975e64ad304365d0a04443ca9b6b910c2f08a4e83b5eea5820
  RENOVATE_CONFIG_FILE: config.js
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
stages:
  - ".pre"
  - deploy
  - pre-commit
  - ".post"
".pre-commit":
  stage: pre-commit
  image: "$CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX/python:3.13.5-bullseye"
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install pre-commit pip
  script:
    - pre-commit run --all-files --verbose
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
default:
  tags:
    - docker
pre-commit:
  stage: pre-commit
  image: "$CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX/python:3.13.5-bullseye"
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - apt-get update && apt-get install -y ruby
    - pip install pre-commit pip
  script:
    - pre-commit run --all-files --verbose
  cache:
    key: pre-commit
    paths:
      - "$CI_PROJECT_DIR/.cache"
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  artifacts:
    paths:
      - "$PRE_COMMIT_HOME/pre-commit.log"
    when: on_failure
  extends: ".pre-commit"
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/kotocoop/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  KUBERNETES_MEMORY_REQUEST: 4Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: ghcr.io/renovatebot/renovate:41
    pull_policy: if-not-present
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  retry: 2
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/f4rk4sh/renovate
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:best-practices"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_TOKEN: "$RENOVATE_TOKEN"
  CI_RENOVATE_IMAGE: renovate/renovate:39.13.0@sha256:fd0f8348172ea2f92877227fe4c73d527aee38938aa731e444c4dbb47ab3f5b1
  LOG_LEVEL: debug
stages:
  - ".pre"
  - build
  - update_dependencies
  - test
  - deploy
  - ".post"
build-job:
  stage: build
  script: "..."
  rules:
    - when: never
test-job:
  stage: test
  image: docker:24.0.6
  services:
    - docker:24.0.6-dind
    - mongo:8.0.3
  variables:
    FF_NETWORK_PER_BUILD: 'true'
    MONGODB_HOST: mongo:27017
  before_script:
    - echo "Test"
  script:
    - echo "Test"
renovate:
  image: "${CI_RENOVATE_IMAGE}"
  stage: update_dependencies
  resource_group: renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
deploy-prod:
  stage: deploy
  script: "..."
  rules:
    - when: never
[0m
[90m2025-07-31T09:08:41Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/thejan2009/renovate-automerge-gitlab
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_ENABLED_MANAGERS: dockerfile
    LOG_LEVEL: debug
    RENOVATE_EXTRA_FLAGS: thejan2009/renovate-automerge-gitlab
wait:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  script:
    - sleep 30
[0m
[90m2025-07-31T09:08:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/simplepaypal1/renovate-runner
[90m2025-07-31T09:08:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.32.1-slim@sha256:4a66742b27c0a794c1b49585b5f189e0797947371936bd46917783640753e2c1
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.32.1@sha256:9b74dc435ecf9a0ff88f0c5de34ee65c08c5b0aae373d9e03d2da6f49019c3f5
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.15.0@sha256:bc1d224c353636358e204adbe170f6121843f776eccf5cd0527c71f2cd6d707c
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/chrisime2603/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.23-dind@sha256:a32bb7335987a3db383a3d834c8a9a9472abf9637ddd55260351696c0244b1a6
  CI_RENOVATE_IMAGE: renovate/renovate:34.138.3-slim@sha256:0c59ca7fc97c3871b45523d264fdbd5cd46e70196bbceffa03ea6761f879fe2f
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/frantic1048/renovate-beachball-demo
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.1.7-slim@sha256:56df0429a7da1faa32963bdbaf372e2b3febe37c45f6d83473a66584f2a3ed5e
  LOG_LEVEL: debug
  RENOVATE_NPMRC_MERGE: 'true'
  RENOVATE_ALLOW_SCRIPTS: 'true'
  RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS: '["^npx", "^git", "^pnpm"]'
  RENOVATE_EXTRA_FLAGS: "$CI_PROJECT_ID"
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:36.1.7@sha256:56df0429a7da1faa32963bdbaf372e2b3febe37c45f6d83473a66584f2a3ed5e
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: manual
      allow_failure: true
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  interruptible: false
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "schedule"
default:
  interruptible: true
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/nerzhuls-packages/docker/renovate-bot
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-runner-2
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.64.0-slim@sha256:94a5e4da38566153dec9eb194f4de35773663d011237ab3a446e31d6197d4d6c
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.64.0@sha256:edd6cc722bc4608ec9e457d9c480292ddd5fcaac700f648779e1199cc82e1a31
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/anro87/renovate-example
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - run_renovate
  - ".post"
run_renovate:
  image: renovate/renovate:latest
  stage: run_renovate
  variables:
    LOG_LEVEL: debug
  script:
    - renovate $(cat repositories | paste -s)
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/to-be-continuous/renovate
[90m2025-07-31T09:08:42Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
image: renovate/renovate
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: emctl <incoming+emctl-gitops-renovate-renovate-runner-46373289-9zwru1vlo0l10hcboma4jya5r-issue@incoming.gitlab.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/tihiller/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.23-dind@sha256:c8bb6fa5388b56304dd770c4bc0478de81ce18540173b1a589178c0d31bfce90
  CI_RENOVATE_IMAGE: renovate/renovate:34.121.0-slim@sha256:8201284eb1a1251946b497a398e3f32ef4a6ea5cda3e2d2af28071ab82152342
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/bstone2/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.22-dind@sha256:932370afb6bea9ca577f7814b239fb95b40632b3c67c22da50cb02366b358dfd
  CI_RENOVATE_IMAGE: renovate/renovate:34.97.3-slim@sha256:5358b11477e836e60148b9799915dad2b4140ab424f1437a9b5f0dd3b3535498
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:42Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ShowMeYourCodeYouTube/renovate-config
[90m2025-07-31T09:08:42Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/yellowhat-labs/bootstrap
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
build:pulumi:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "$PULUMI_IMAGE"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "pulumi"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".pulumi-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - pulumi/Dockerfile
          - pulumi/requirements.txt
        compare_to: "$CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - ".gitlab/ci-build.yaml"
        - ci/build.yaml
        - pulumi/Dockerfile
        - pulumi/requirements.txt
    - when: never
  after_script:
    - echo "PULUMI_IMAGE_TAG=$CI_COMMIT_REF_SLUG" | tee .env
  artifacts:
    reports:
      dotenv:
        - ".env"
    expire_in: 1 days
    when: always
build:curl-jq:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/curl-jq"
    CURL_VER: 8.14.1-r1
  before_script:
    - TAG0=$CURL_VER
    - TAG1=$CURL_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/curl-jq"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".curl-jq-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/curl-jq/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
build:git-server:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/git-server"
    GIT_VER: 2.49.1-r0
  before_script:
    - TAG0=$GIT_VER
    - TAG1=$GIT_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/git-server"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".git-server-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/git-server/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
build:jsonnet:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "$JSONNET_IMAGE"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/jsonnet"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".jsonnet-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/jsonnet/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - ".gitlab/ci-build.yaml"
        - ci/build.yaml
        - containers/jsonnet/**/*
    - when: never
  after_script:
    - echo "JSONNET_IMAGE_TAG=$CI_COMMIT_REF_SLUG" | tee .env
  artifacts:
    reports:
      dotenv:
        - ".env"
    expire_in: 1 days
    when: always
build:qbittorrent:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/qbittorrent"
    QBT_VER: release-5.1.2
  before_script:
    - TAG0=${QBT_VER#release-}
    - TAG1=${QBT_VER#release-}
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/qbittorrent"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".qbittorrent-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/qbittorrent/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
build:renovate-parsed:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/renovate-parsed"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/renovate-parsed"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".renovate-parsed-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/renovate-parsed/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - ".gitlab/ci-build.yaml"
        - ci/build.yaml
        - containers/renovate-parsed/**/*
    - when: never
build:semantic-release:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/semantic-release"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/semantic-release"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".semantic-release-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/semantic-release/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - ".gitlab/ci-build.yaml"
        - ci/build.yaml
        - containers/semantic-release/**/*
    - when: never
build:wireguard:
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/wireguard"
    WIREGUARD_VER: 1.0.20250521-r0
  before_script:
    - TAG0=$WIREGUARD_VER
    - TAG1=$WIREGUARD_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/wireguard"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
  extends: ".wireguard-container"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-build.yaml"
          - ci/build.yaml
          - containers/wireguard/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
".infra-common":
  stage: infra
  resource_group: infra
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-infra.yaml"
          - pulumi/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
".infra":
  stage: infra
  resource_group: infra
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-infra.yaml"
          - pulumi/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".infra-common"
  image: "${PULUMI_IMAGE}:${PULUMI_IMAGE_TAG}"
  variables:
    GITLAB_TOKEN: "$PULUMI_GITLAB_TOKEN"
    PULUMI_STATE_DIR: "${CI_PROJECT_DIR}/pulumi/state"
    PULUMI_STACK: dev
  before_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh download"
    - "./scripts/pulumi-setup.sh"
  after_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh upload"
preview:
  stage: infra
  resource_group: infra
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-infra.yaml"
          - pulumi/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".infra"
  image: "${PULUMI_IMAGE}:${PULUMI_IMAGE_TAG}"
  variables:
    GITLAB_TOKEN: "$PULUMI_GITLAB_TOKEN"
    PULUMI_STATE_DIR: "${CI_PROJECT_DIR}/pulumi/state"
    PULUMI_STACK: dev
  before_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh download"
    - "./scripts/pulumi-setup.sh"
  after_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh upload"
  dependencies:
    - build:pulumi
  script:
    - pulumi preview --refresh
    - |
      tee "${CI_PROJECT_DIR}/comment.md" <<EOF
      Output from \`pulumi preview --diff\`:

      \`\`\`console
      $(pulumi preview --diff)
      \`\`\`
      EOF
  artifacts:
    paths:
      - comment.md
    expire_in: 1 days
    when: always
preview:comment:
  image:
    name: registry.gitlab.com/gitlab-org/cli:v1.64.0@sha256:06d814cbc5da2cc8606ad533b862369326a37246e3cbc31f37136ce54bbbccb2
    entrypoint:
      - ''
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-infra.yaml"
          - pulumi/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  variables:
    GITLAB_TOKEN: "$COMMENT_TOKEN"
  before_script:
    - 'echo "Adding comment to MR: $CI_MERGE_REQUEST_IID"'
  script:
    - ls -lh comment*.md
    - |
      for md in comment*.md; do
          echo "[INFO] Reading from file: $md"
          glab mr note "$CI_MERGE_REQUEST_IID" --unique --message "$(cat $md)"
      done
  allow_failure: true
  stage: infra
  resource_group: infra
  extends:
    - ".comment"
    - ".infra-common"
  needs:
    - preview
up:
  stage: infra
  resource_group: infra
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab/ci-infra.yaml"
          - pulumi/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
      when: manual
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - ".gitlab/ci-infra.yaml"
        - pulumi/**/*
    - when: never
  extends: ".infra"
  image: "${PULUMI_IMAGE}:${PULUMI_IMAGE_TAG}"
  variables:
    GITLAB_TOKEN: "$PULUMI_GITLAB_TOKEN"
    PULUMI_STATE_DIR: "${CI_PROJECT_DIR}/pulumi/state"
    PULUMI_STACK: dev
  before_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh download"
    - "./scripts/pulumi-setup.sh"
  after_script:
    - cd pulumi
    - "./scripts/pulumi-state.sh upload"
  dependencies:
    - build:pulumi
    - preview
  script:
    - pulumi up --yes --refresh
comment-job:
  stage: test
  image: docker.io/alpine:latest@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ci/comment.yaml
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  script:
    - |
      tee comment.md <<EOF
      Hi from comment-job

      \`\`\`console
      $(ls -lha)
      \`\`\`
      EOF
  artifacts:
    paths:
      - comment.md
    expire_in: 1 days
    when: always
comment:
  image:
    name: registry.gitlab.com/gitlab-org/cli:v1.64.0@sha256:06d814cbc5da2cc8606ad533b862369326a37246e3cbc31f37136ce54bbbccb2
    entrypoint:
      - ''
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ci/comment.yaml
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  variables:
    GITLAB_TOKEN: "$COMMENT_TOKEN"
  before_script:
    - 'echo "Adding comment to MR: $CI_MERGE_REQUEST_IID"'
  script:
    - ls -lh comment*.md
    - |
      for md in comment*.md; do
          echo "[INFO] Reading from file: $md"
          glab mr note "$CI_MERGE_REQUEST_IID" --unique --message "$(cat $md)"
      done
  allow_failure: true
  stage: test
  extends: ".comment"
  needs:
    - comment-job
nix-diff:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
  variables:
    NIX_TARGET: test
  before_script:
    - |
      tee -a /etc/nix/nix.conf <<EOF
      # Enable flake
      experimental-features = nix-command flakes
      EOF
  script:
    - git log -1
    - time nix build ".#nixosConfigurations.${NIX_TARGET}.config.system.build.toplevel" --accept-flake-config --out-link /result.new
    - git fetch origin "$CI_DEFAULT_BRANCH" --depth 2
    - git checkout "$CI_DEFAULT_BRANCH"
    - git log -1
    - git clean --force -d -x
    - time nix build ".#nixosConfigurations.${NIX_TARGET}.config.system.build.toplevel" --accept-flake-config --out-link /result.old
    - |
      tee comment-nix.md <<EOF
      Output from \`nix store diff-closures\`:

      \`\`\`diff
      $(nix store diff-closures /result.old /result.new)
      \`\`\`
      EOF
    - |
      tee comment-nvd.md <<EOF
      Output from \`nvd\`:

      \`\`\`diff
      $(nix run nixpkgs#nvd -- diff /result.old /result.new)
      \`\`\`
      EOF
    - |
      nix run nixpkgs#nix-diff /result.old /result.new
      tee comment-nix-diff.md <<EOF
      Output from \`nix-diff\` can be too long, go to:

      $CI_JOB_URL
      EOF
  artifacts:
    paths:
      - comment*.md
    expire_in: 1 day
    when: always
nix-diff:comment:
  image:
    name: registry.gitlab.com/gitlab-org/cli:v1.64.0@sha256:06d814cbc5da2cc8606ad533b862369326a37246e3cbc31f37136ce54bbbccb2
    entrypoint:
      - ''
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  variables:
    GITLAB_TOKEN: "$COMMENT_TOKEN"
  before_script:
    - 'echo "Adding comment to MR: $CI_MERGE_REQUEST_IID"'
  script:
    - ls -lh comment*.md
    - |
      for md in comment*.md; do
          echo "[INFO] Reading from file: $md"
          glab mr note "$CI_MERGE_REQUEST_IID" --unique --message "$(cat $md)"
      done
  allow_failure: true
  stage: test
  extends: ".comment"
  needs:
    - nix-diff
renovate-regex:
  stage: test
  image: docker.io/node:22.17.1-alpine@sha256:5539840ce9d013fa13e3b9814c9353024be7ac75aca5db6d039504a56c04ea59
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - ".gitlab/ci-test.yaml"
          - config.js
          - renovate.json
          - renovate-tests/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  before_script:
    - cd renovate-tests
    - cp ../config.js ../renovate.json ./
    - npm clean-install
  script:
    - npx vitest run --update
renovate-parsed:
  stage: release
  image: "${CI_REGISTRY}/yellowhat-labs/bootstrap/renovate-parsed:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - when: never
  script:
    - renovate_parsed
  allow_failure: true
".common":
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
codespell:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  extends: ".common"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - 'echo Extra opts: --skip ./renovate-tests/package-lock.json --skip ./semantic-release/package-lock.json'
    - uv pip install codespell==2.4.1 --system
  script:
    - codespell --summary --check-filename --before-context 2 --after-context 2 --skip .git --skip ./renovate-tests/package-lock.json --skip ./semantic-release/package-lock.json
typos:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  extends: ".common"
  image: docker.io/alpine:latest@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
  variables:
    TYPOS_VER: v1.34.0
  before_script:
    - wget -c -O - "https://github.com/crate-ci/typos/releases/download/${TYPOS_VER}/typos-${TYPOS_VER}-x86_64-unknown-linux-musl.tar.gz" | tar xz -C /usr/local/bin
  script:
    - typos
justfile:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/justfile"
    - when: never
  extends: ".common"
  image: docker.io/alpine:latest@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
  variables:
    JUST_VER: 1.42.4
  before_script:
    - wget -c -O - "https://github.com/casey/just/releases/download/${JUST_VER}/just-${JUST_VER}-x86_64-unknown-linux-musl.tar.gz" | tar xz -C /usr/local/bin just
  script:
    - just --list --unsorted
    - just --fmt --check --color=always --unstable
semgrep:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  extends: ".common"
  image: docker.io/returntocorp/semgrep:1.117@sha256:f435f06d2332f24d76a93791c8c5bd8c5bef7b426061eb04ff452a9d41e1b596
  before_script:
    - 'echo Extra opts: --exclude-rule dockerfile.security.last-user-is-root.last-user-is-root --exclude-rule dockerfile.security.missing-user.missing-user --exclude-rule dockerfile.security.missing-user-entrypoint.missing-user-entrypoint'
  script:
    - semgrep scan --exclude-rule dockerfile.security.last-user-is-root.last-user-is-root --exclude-rule dockerfile.security.missing-user.missing-user --exclude-rule dockerfile.security.missing-user-entrypoint.missing-user-entrypoint .
json:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.json"
    - when: never
  extends: ".common"
  image: docker.io/python:3.13.5-alpine@sha256:37b14db89f587f9eaa890e4a442a3fe55db452b69cca1403cc730bd0fbdc8aaf
  script:
    - find . -iname "*.json" -print0 | xargs -0 -I % sh -c 'echo %; python -m json.tool "%"'
yamllint:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.yml"
        - "**/*.yaml"
    - when: never
  extends: ".common"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - uv pip install yamllint==1.37.1 --system
  script:
    - |
      cat <<EOF >>.yamllint.yaml
      $([ ! -f .yamllint.yaml ] && echo "---")
      extends: default
      rules:
        line-length: disable
      EOF
      cat .yamllint.yaml
    - yamllint --list-files .
    - yamllint .
hadolint:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*Containerfile*"
        - "**/*Dockerfile*"
    - when: never
  extends: ".common"
  image: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  script:
    - hadolint --verbose $(find . -iname "Containerfile" -or -iname "Dockerfile")
gitleaks:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  extends: ".common"
  image:
    name: ghcr.io/gitleaks/gitleaks:v8.28.0@sha256:cdbb7c955abce02001a9f6c9f602fb195b7fadc1e812065883f695d1eeaba854
    entrypoint:
      - ''
  before_script:
    - |
      cat >/tmp/gitleaks.toml <<EOF
      [allowlist]
      description = "ignore # nosec lines"
      regexes = ['''# pragma: allowlist secret''']
      EOF
  script:
    - gitleaks detect --config /tmp/gitleaks.toml --verbose --source .
secretlint:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  extends: ".common"
  image:
    name: ghcr.io/secretlint/secretlint:v10.2.1@sha256:c572e6c84954a453a604bcf4bd1cabe819cbeb447085dca984da1767af8e45cb
    entrypoint:
      - ''
  script:
    - secretlint "**/*"
".common-markdown":
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.md"
    - when: never
  extends: ".common"
markdownlint:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.md"
    - when: never
  extends: ".common-markdown"
  image:
    name: ghcr.io/igorshubovych/markdownlint-cli:v0.45.0@sha256:27eadb7b23b79b4b01b9220e18467d041804e632f41cf69b9c1613b48ed72749
    entrypoint:
      - ''
  script:
    - markdownlint --ignore "CHANGELOG.md" "**/*.md"
markdown-table-formatter:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.md"
    - when: never
  extends: ".common-markdown"
  image: docker.io/node:22.17.1-alpine@sha256:5539840ce9d013fa13e3b9814c9353024be7ac75aca5db6d039504a56c04ea59
  script:
    - npx --yes markdown-table-formatter@1.6.1 --check "**/*.md"
markdown-link-check:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.md"
    - when: never
  extends: ".common-markdown"
  image:
    name: ghcr.io/tcort/markdown-link-check:3.13.7@sha256:d02154b4b1e064f52f4b58ec96801257d81f1e7443346db06ae2f293d4714618
    entrypoint:
      - ''
  before_script:
    - echo '{"retryCount":3}' >/tmp/config.json
  script:
    - find . -iname "*.md" ! -name "CHANGELOG.md" -exec markdown-link-check --verbose --progress --retry --config /tmp/config.json {} \;
blacken-docs:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.md"
    - when: never
  extends: ".common-markdown"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - uv pip install blacken-docs==1.19.1 --system
  script:
    - blacken-docs $(find . -iname "*.md")
".common-sh":
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.sh"
        - "**/*.bash"
    - when: never
  extends: ".common"
bash:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.sh"
        - "**/*.bash"
    - when: never
  extends: ".common-sh"
  image: docker.io/bash:5.3.3@sha256:cc444a5a327f8e42318b2772b392f8dd1a9dcb9e00d3c847cc9e419eefa20419
  before_script:
    - apk add --no-cache shfmt
  script:
    - shfmt --find .
    - bash -n $(shfmt --find .)
shellcheck:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.sh"
        - "**/*.bash"
    - when: never
  extends: ".common-sh"
  image: docker.io/koalaman/shellcheck-alpine:v0.10.0@sha256:5921d946dac740cbeec2fb1c898747b6105e585130cc7f0602eec9a10f7ddb63
  script:
    - find . -not -path "./.git/**" -type f -exec grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' {} \; -exec echo {} + -exec shellcheck --external-sources {} +
shfmt:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.sh"
        - "**/*.bash"
    - when: never
  extends: ".common-sh"
  image: docker.io/mvdan/shfmt:v3.12.0-alpine@sha256:204a4d2d876123342ad394bd9a28fb91e165abc03868790d4b39cfa73233f150
  script:
    - shfmt --find .
    - shfmt --indent 4 --case-indent --diff .
".common-python":
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
black:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: docker.io/pyfound/black:25.1.0@sha256:d849dfe2daaaf4582a7ad5178622700c28cd37f5fac0b3365accdde2013f1e66
  script:
    - black --check --diff .
flake8:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - 'echo Extra opts: '
    - uv pip install flake8==7.3.0 --system
  script:
    - flake8 --count --statistics --verbose --ignore E501  .
ruff:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - uv pip install ruff==0.12.5 --system
    - ruff check --show-files
  script:
    - ruff check --target-version py313 --output-format gitlab | tee ruff.json
  artifacts:
    reports:
      codequality:
        - ruff.json
pylint:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - 'echo Extra opts: '
    - find . -name "requirement*.txt" -type f -exec uv pip install --system --requirement '{}' ';'
    - uv pip install pylint[spelling]==3.3.7 --system
  script:
    - pylint --verbose --disable C0301 --max-attributes 20 --max-public-methods 30 --min-similarity-lines 6  $(find . -name "*.py")
pyupgrade:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - uv pip install pyupgrade==3.20.0 --system
  script:
    - find . -iname "*.py" | xargs pyupgrade
vulture:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - uv pip install vulture==2.14 --system
  script:
    - vulture --min-confidence 65 .
bandit:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - 'echo Extra opts: '
    - uv pip install bandit==1.8.6 --system
  script:
    - bandit --recursive  .
mypy:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - 'echo Extra opts: '
    - find . -name "requirement*.txt" -type f -exec uv pip install --system --requirement '{}' ';'
    - uv pip install mypy==1.17.0 --system
    - mypy --install-types --non-interactive --strict  .
  script:
    - mypy --strict  .
ty:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
    - when: never
  extends: ".common-python"
  image: ghcr.io/astral-sh/uv:0.8.3-python3.13-alpine@sha256:99ce5a7ebcf37cec9d8df603d816d13e2508401a13df9a8d35598b665ae25b3c
  before_script:
    - find . -name "requirement*.txt" -type f -exec uv pip install --system --requirement '{}' ';'
    - uv pip install ty==0.0.1a15 --system
  script:
    - ty check --python $(which python) --verbose
".common-nix":
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
deadnix:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
  script:
    - nix-env --install --attr nixpkgs.deadnix
    - deadnix --fail .
flake-check:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
  script:
    - nix flake check --accept-flake-config --print-build-logs --extra-experimental-features "flakes nix-command"
flake-checker:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/alpine:latest@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
  variables:
    FLAKE_CHECKER_VER: v0.2.8
  before_script:
    - wget -O fc "https://github.com/DeterminateSystems/flake-checker/releases/download/${FLAKE_CHECKER_VER}/flake-checker-X64-Linux"
    - chmod +x fc
  script:
    - "./fc --no-telemetry"
nixfmt:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
  before_script:
    - nix-env --install --attr nixpkgs.nixfmt-rfc-style
    - nixfmt --version
  script:
    - nixfmt --verify --strict $(find . -iname "*.nix")
    - git diff --exit-code --color
statix:
  stage: linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "**/*.nix"
          - flake.lock
          - os/**/*
        compare_to: "$CI_DEFAULT_BRANCH"
    - when: never
  extends: ".common-nix"
  image: docker.io/nixos/nix:2.30.2@sha256:7894650fb65234b35c80010e6ca44149b70a4a216118a6b7e5c6f6ae377c8d21
  before_script:
    - nix-env --install --attr nixpkgs.statix
    - statix --version
  script:
    - statix check
variables:
  JSONNET_IMAGE: "${CI_REGISTRY}/yellowhat-labs/bootstrap/jsonnet"
  JSONNET_IMAGE_TAG: latest
  PULUMI_IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/pulumi"
  PULUMI_IMAGE_TAG: latest
jsonnet:
  stage: linter
  image: "${JSONNET_IMAGE}:${JSONNET_IMAGE_TAG}"
  needs:
    - job: build:jsonnet
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.jsonnet"
    - when: never
  script:
    - "/check.sh"
".pulumi-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "$PULUMI_IMAGE"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "pulumi"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".curl-jq-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/curl-jq"
  before_script:
    - TAG0=$CURL_VER
    - TAG1=$CURL_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/curl-jq"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".git-server-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/git-server"
  before_script:
    - TAG0=$GIT_VER
    - TAG1=$GIT_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/git-server"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".jsonnet-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "$JSONNET_IMAGE"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/jsonnet"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".qbittorrent-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/qbittorrent"
  before_script:
    - TAG0=${QBT_VER#release-}
    - TAG1=${QBT_VER#release-}
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/qbittorrent"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".renovate-parsed-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/renovate-parsed"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/renovate-parsed"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".semantic-release-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/semantic-release"
  before_script:
    - TAG0=$CI_COMMIT_REF_SLUG
    - '[ "$CI_COMMIT_REF_SLUG" = "$CI_DEFAULT_BRANCH" ] && TAG1="latest" || TAG1="$CI_COMMIT_REF_SLUG"'
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/semantic-release"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".wireguard-container":
  image: quay.io/podman/stable:v5.5.2
  stage: build
  variables:
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/wireguard"
  before_script:
    - TAG0=$WIREGUARD_VER
    - TAG1=$WIREGUARD_VER
    - echo $CI_REGISTRY
    - echo $IMAGE
    - echo $TAG0
    - echo $TAG1
    - cd "containers/wireguard"
    - podman login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - podman build --tag "${IMAGE}:${TAG0}" --tag "${IMAGE}:${TAG1}" .
    - podman push "${IMAGE}:${TAG0}"
    - podman push "${IMAGE}:${TAG1}"
".comment":
  image:
    name: registry.gitlab.com/gitlab-org/cli:v1.64.0@sha256:06d814cbc5da2cc8606ad533b862369326a37246e3cbc31f37136ce54bbbccb2
    entrypoint:
      - ''
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  variables:
    GITLAB_TOKEN: "$COMMENT_TOKEN"
  before_script:
    - 'echo "Adding comment to MR: $CI_MERGE_REQUEST_IID"'
  script:
    - ls -lh comment*.md
    - |
      for md in comment*.md; do
          echo "[INFO] Reading from file: $md"
          glab mr note "$CI_MERGE_REQUEST_IID" --unique --message "$(cat $md)"
      done
  allow_failure: true
release:
  stage: release
  image: "${CI_REGISTRY}/yellowhat-labs/bootstrap/semantic-release:latest"
  variables:
    GITLAB_TOKEN: "$SEMANTIC_RELEASE_TOKEN"
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
    - "/npm/entrypoint.sh"
stages:
  - ".pre"
  - build
  - linter
  - test
  - infra
  - release
  - ".post"
renovate:
  stage: linter
  image: ghcr.io/renovatebot/renovate:41.43.2-full@sha256:fbbd1548dd5b8e19b915308563dc085dbdc11d2dac8c8b91f79e3661fe0be415
  resource_group: renovate
  tags:
    - renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - config.js
          - renovate.json
        compare_to: "$CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - when: never
  variables:
    LOG_LEVEL: debug
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  before_script:
    - cp .gitlab/helm_updater.sh /tmp/helm_updater.sh
  script:
    - renovate-config-validator --strict
    - renovate
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/tech-marketing/devsecops/initech/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.23-dind@sha256:43d5489ddb6800926df8098a75966e0c9607b5713739fcc332ace03b9dd60408
  CI_RENOVATE_IMAGE: renovate/renovate:34.128.2-slim@sha256:90583ae855e023058d1e2aec6b19a603d7c7c2c55676a00587189cb86f44da0f
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mdisabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.17.0@sha256:ebe95fceb39c5fbd3ab3964addc234adec183b57a89d30a5c4ca0b3ce6b8ddbb
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.17.0@sha256:ebe95fceb39c5fbd3ab3964addc234adec183b57a89d30a5c4ca0b3ce6b8ddbb
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/valley-school/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:38.25.2@sha256:cf8719c45858cce881347a3ebd848647305419361154d77d75090ac7832054e7
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:20.16.0@sha256:cb1a1bfe6fe5cf8cd5c9c1959b5adc5798569a84249ff237ec8983d7032034ef
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:20.16.0@sha256:cb1a1bfe6fe5cf8cd5c9c1959b5adc5798569a84249ff237ec8983d7032034ef
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/Orange-OpenSource/lfn/tools/renovate
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
variables:
  MARKDOWN_PATH_EXCLUSION: "$PATH_EXCLUSION"
  MD_LINK_CHECK_PATH_EXCLUSION: "$PATH_EXCLUSION"
  YAML_PATH_EXCLUSION: "$PATH_EXCLUSION"
  JSON_PATH_EXCLUSION: "$PATH_EXCLUSION"
  GIT_MAIN_BRANCH: main
  GITLEAKS_IMAGE: docker.io/zricethezav/gitleaks:latest
  GITLEAKS_ARGS: "--verbose --redact"
  GITLEAKS_RULES: ''
  PROD_REF: "/^(master|main)$/"
  INTEG_REF: "/^develop$/"
  PATH_EXCLUSION: "./ci"
  SHELL_PATH_EXCLUSION: "$PATH_EXCLUSION"
  SPELLING_PATH_EXCLUSION: "$PATH_EXCLUSION"
  GITLAB_TOKEN: "$BOT_TOKEN"
  SEMREL_AUTO_RELEASE_ENABLED: 'true'
  SEMREL_TAG_FORMAT: "$${version}"
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_IMAGE: renovate/renovate:latest
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_TOKEN: "$BOT_TOKEN"
markdown:
  stage: build
  image:
    name: 06kellyjac/markdownlint-cli:latest
  script:
    - |
      if [ -z "$MARKDOWN_PATH_EXCLUSION" ]
      then
        markdownlint .
      else
        markdownlint --ignore "$MARKDOWN_PATH_EXCLUSION" .
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
markdown-link-check:
  stage: build
  image:
    name: ghcr.io/tcort/markdown-link-check:3.9.0
    entrypoint:
      - ''
  before_script:
    - |
      if [ -z "${MD_LINK_CHECK_PATH_EXCLUSION}" ]
      then
        echo "No path exclusion set"
        export PATH_EXCL_CMD=""
      else
        echo "Path exclusion set to ${MD_LINK_CHECK_PATH_EXCLUSION}"
        export MDL_CHECK_PATH_EXCLUSION="${MD_LINK_CHECK_PATH_EXCLUSION}"
        export \
          PATH_EXCL_CMD="-type d -path ${MDL_CHECK_PATH_EXCLUSION} -prune -o"
      fi
  script:
    - |
      for file in $(find . $PATH_EXCL_CMD -iname '*.md' -print)
      do
        /src/markdown-link-check -c .markdownlinkcheck.json $file
      done
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
yaml:
  stage: build
  image:
    name: registry.gitlab.com/pipeline-components/yamllint
  before_script:
    - |
      if [ -z "${YAML_PATH_EXCLUSION}" ]
      then
        echo "No path exclusion set"
        export PATH_EXCL_CMD=""
      else
        echo "Path exclusion set to ${YAML_PATH_EXCLUSION}"
        export PATH_EXCL_CMD="-type d -path ${YAML_PATH_EXCLUSION} -prune -o"
      fi
  script:
    - pip install yamllint-junit
    - |
      find . $PATH_EXCL_CMD -iname '*.y*ml' -print |
      xargs yamllint -f parsable | tee /dev/stderr |
      yamllint-junit -o yamllint-junit.xml
  artifacts:
    reports:
      junit:
        - yamllint-junit.xml
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
json:
  stage: build
  image:
    name: registry.gitlab.com/pipeline-components/jsonlint:latest
  before_script:
    - |
      if [ -z "${JSON_PATH_EXCLUSION}" ]
      then
        echo "No path exclusion set"
        export PATH_EXCL_CMD=""
      else
        echo "Path exclusion set to ${JSON_PATH_EXCLUSION}"
        export \
          PATH_EXCL_CMD="-type d -path ${JSON_PATH_EXCLUSION} -prune -o"
      fi
  script:
    - |
      find . $PATH_EXCL_CMD -iname '*.json' -print0 |
      parallel --will-cite -k -0 -n1 jsonlint -q
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
".git-signed-scripts": "# BEGSCRIPT\necho \"\U0001F575️  Checking that the submitted commits are signed\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\ngit log --pretty=format:'%h:%s' \"${COMMON_ANCESTOR}..HEAD\" | while read -r commit\ndo\n  printf \".\"\n  hash=$(echo \"${commit}\" | awk -F  \":\" '{print $1}')\n  title=$(echo \"${commit}\" | awk -F  \":\" '{print $2}')\n  git cat-file commit \"${hash}\" | grep gpgsig  > /dev/null || FAILED=true\n  if [ \"${FAILED}\" ]\n  then\n    touch /tmp/failed\n    echo \"\"\n    echo \"⚠️ Commit ${title} (${hash}) is not signed\"\n  fi\ndone\necho \"\"\nif [ -e /tmp/failed ]\nthen\n  echo \"\U0001F622 Some git are not well signed\"\n  rm /tmp/failed\n  exit 1\nelse\n  echo \"\U0001F642 All good!\"\nfi\n# ENDSCRIPT\n"
git.signed:
  stage: build
  image:
    name: bitnami/git
  before_script:
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - "# BEGSCRIPT\necho \"\U0001F575️  Checking that the submitted commits are signed\"\ngit fetch --quiet\nCOMMON_ANCESTOR=$(git merge-base HEAD \"origin/${GIT_MAIN_BRANCH}\")\ngit log --pretty=format:'%h:%s' \"${COMMON_ANCESTOR}..HEAD\" | while read -r commit\ndo\n  printf \".\"\n  hash=$(echo \"${commit}\" | awk -F  \":\" '{print $1}')\n  title=$(echo \"${commit}\" | awk -F  \":\" '{print $2}')\n  git cat-file commit \"${hash}\" | grep gpgsig  > /dev/null || FAILED=true\n  if [ \"${FAILED}\" ]\n  then\n    touch /tmp/failed\n    echo \"\"\n    echo \"⚠️ Commit ${title} (${hash}) is not signed\"\n  fi\ndone\necho \"\"\nif [ -e /tmp/failed ]\nthen\n  echo \"\U0001F622 Some git are not well signed\"\n  rm /tmp/failed\n  exit 1\nelse\n  echo \"\U0001F642 All good!\"\nfi\n# ENDSCRIPT\n"
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
".test-policy":
  rules:
    - if: "$CI_COMMIT_TAG"
    - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
    - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
      when: manual
      allow_failure: true
    - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
      allow_failure: true
    - when: on_success
".gitleaks-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          fi
          ;;
        contains*)
          # shellcheck disable=SC2076
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  function install_gitleaks_rules() {
    if [[ -f ".gitleaks.toml" ]]
    then
      log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
    elif [[ "$GITLEAKS_RULES" ]]
    then
      log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
      echo "$GITLEAKS_RULES" > .gitleaks.toml
    else
      log_info "No Gitleaks rules found: use default"
    fi
  }

  unscope_variables

  # ENDSCRIPT
gitleaks:
  image:
    name: "$GITLEAKS_IMAGE"
    entrypoint:
      - ''
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - gitleaks
        - 2.7.3
  stage: test
  needs: []
  variables:
    GIT_DEPTH: 0
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      function install_gitleaks_rules() {
        if [[ -f ".gitleaks.toml" ]]
        then
          log_info "Using custom Gitleaks rules from project (\\e[33;1m.gitleaks.toml\\e[0m)"
        elif [[ "$GITLEAKS_RULES" ]]
        then
          log_info "Using Gitleaks rules from env (\\e[33;1m\$GITLEAKS_RULES\\e[0m)"
          echo "$GITLEAKS_RULES" > .gitleaks.toml
        else
          log_info "No Gitleaks rules found: use default"
        fi
      }

      unscope_variables

      # ENDSCRIPT
    - mkdir -p -m 777 reports
    - install_gitleaks_rules
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    - |
      log_opts=""
      if [[ "$CI_MERGE_REQUEST_DIFF_BASE_SHA" ]]
      then
        log_info "Merge Request only analysis (\\e[33;1m${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}\\e[0m)"
        log_opts="${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}"
      else
        log_info "Full branch analysis (\\e[33;1m${CI_COMMIT_SHA}\\e[0m and ancestors)"
        log_opts="${CI_COMMIT_SHA}"
      fi
    - gitleaks git ${TRACE+--log-level debug} $gitleaks_rule_opts --log-opts "$log_opts" --report-path reports/gitleaks.native.json $GITLEAKS_ARGS .
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/gitleaks.*
  rules:
    - - if: "$CI_COMMIT_TAG"
      - if: $ADAPTIVE_PIPELINE_DISABLED == "true"
      - if: "$CI_COMMIT_REF_NAME =~ $PROD_REF || $CI_COMMIT_REF_NAME =~ $INTEG_REF"
      - if: "$CI_MERGE_REQUEST_ID == null && $CI_OPEN_MERGE_REQUESTS == null"
        when: manual
        allow_failure: true
      - if: "$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/"
        allow_failure: true
      - when: on_success
".renovate-base":
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
renovate-validator:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - when: always
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
  extends: ".renovate-base"
  stage: test
  dependencies: []
  variables:
    RENOVATE_DRY_RUN: 'true'
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
".lint-job":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
    - when: never
  needs: []
  stage: build
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/JakubA/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.96.1-slim@sha256:f89ea5f4d7e303ed350d0dcde9ba1e6d9241c63ade0bccf3e958b79d7961be59
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.96.1@sha256:5b582b9f2e9784c8532f053c89bbd3d700a7158b940306926f85dafdf9f5e332
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS |tee -a renovate-log.ndjson
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS |tee -a renovate-log.ndjson
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS |tee -a renovate-log.ndjson
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:42Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/marcelotsvaz/renovate-runner
[90m2025-07-31T09:08:42Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - run
  - ".post"
renovate:
  stage: run
  image: renovate/renovate:37.34.3@sha256:fc3e92221e6cee29aa6b4281129e3d3d14ac6754b3359bee4ef11a730d8c7ed2
  variables:
    RENOVATE_CONFIG_FILE: config.json5
    RENOVATE_PLATFORM: gitlab
    RENOVATE_AUTODISCOVER: 'true'
    RENOVATE_AUTODISCOVER_FILTER: "/^${CI_PROJECT_NAMESPACE}/.+$/"
    RENOVATE_TOKEN: "${botAccessToken}"
    GITHUB_COM_TOKEN: "${githubAccessToken}"
    TZ: America/Sao_Paulo
  script:
    - renovate
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'schedule'"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sysadmin_bonasoft/renovate-runner
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.157.1-slim@sha256:3578318db72a5138db748dadfe5f1e0f0d43eba843d2d15a4cdab93700ad3ac7
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.157.1@sha256:fb1e47fab2844a6ca77f8c54e0477ac33ba71b9f18b8701b280d0faab8c1e463
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.1@sha256:169b5c594bc765ae452e872b8566f2df6bfe5d3666beaa3b541e96f88e26a37b
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.1@sha256:169b5c594bc765ae452e872b8566f2df6bfe5d3666beaa3b541e96f88e26a37b
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-runner-mend
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=emctl-gitops/**"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:148239a7efe76cae05e47aba3ef6666d6f17215cfdd421f5d241b2130605ccfd
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:148239a7efe76cae05e47aba3ef6666d6f17215cfdd421f5d241b2130605ccfd
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:43Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ste_knowis/renovate-bot
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
image:
  name: "${RENOVATE_IMAGE}"
  entrypoint:
    - ''
variables:
  RENOVATE_TOKEN: "${GITLAB_TOKEN}"
  RENOVATE_IMAGE: renovate/renovate:35
  LOG_LEVEL: debug
check_deps:
  script:
    - renovate-config-validator
    - renovate
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/geor/renovate-runner
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:35.105.1-slim@sha256:40568e4108bc91cb0b01119d45667061a7159ff229d42d75c001a44c8e5a9268
  CI_RENOVATE_IMAGE_FULL: ghcr.io/renovatebot/renovate:35.105.1@sha256:4c66ac46e437f687c8a5b81cb1a3853ad6bf03347da6322c44ef460b3f02fdb3
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-config-validator:
  stage: test
  image: "$CI_RENOVATE_IMAGE"
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:18.16.0@sha256:afc62a447769507cd721d410b4ed5aff643fb99b980d00ba45834889830960ff
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/emctl-gitops/renovate/renovate-config
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/weblibros/renovate-bot
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:full
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=weblibros/**/*"
  RENOVATE_BINARY_SOURCE: global
  RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS: py-deps-compile
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
stages:
  - ".pre"
  - deploy
  - ".post"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/t607/renovate
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: renovate/renovate:latest
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cdenneen/test-renovate
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  RENOVATE_BINARY_SOURCE: docker
  CI_RENOVATE_SERVICE: docker:23.0.1-dind@sha256:e4d776dd1e0580dfb670559d887300aa08b53b8a59f5df2d4eaace936ef4d0e9
  CI_RENOVATE_IMAGE: renovate/renovate:34.160.0-slim@sha256:f379795a094c6486850a9f53116adc408978067129fc9cea4b7fc74778bd29f3
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/springfield-ham-radio/ops/renovate
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: renovate/renovate:39.180.0
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-version-issue/renovate
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
image: "${CI_RENOVATE_IMAGE}"
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.23-dind@sha256:f02a5fc03bdf1bcc02ec8aca88b11e84a86fe2f3cedae418212d330d91816880
  CI_RENOVATE_IMAGE: renovate/renovate:34.128.1-slim@sha256:2bafa79c1cefb1bab90cb08e2e4c2e456982d97d2d621d4df14014d60802bd5b
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovate.bot@example.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'false'
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: renovate
  only:
    - schedules
  script:
    - "./run_renovate.sh"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
renovate-dry-run:
  stage: renovate
  except:
    - schedules
  script:
    - "./run_renovate.sh --dry-run"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/deposition.cloud/infra/devops/renovate
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: --autodiscover --autodiscover-filter "deposition.cloud/libs/*"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ankitcharolia/renovate-runner
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:36.53.0@sha256:7926c0294e3c8f3e2da2de05cab0e1f79f544127157ef75cc5cece40b84b397a
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  tags:
    - test
  interruptible: true
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
[0m
[90m2025-07-31T09:08:43Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jad.haddad/renovate-test
[90m2025-07-31T09:08:43Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: renovate/renovate:34.99.2@sha256:8fc3cdd2bc4cd9a9db595a2ec36eae4d7c4d95376ef63363b775d98e4f99e915
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
[0m
[90m2025-07-31T09:08:44Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-runner/renovate-config
[90m2025-07-31T09:08:44Z[0m [32mINF[0m [1m
variables:
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - echo "testing ${FILE}"
    - renovate-config-validator
  parallel:
    matrix:
      - FILE:
          - default
          - nx
  variables:
    RENOVATE_CONFIG_FILE: "${FILE}.json"
[0m
[90m2025-07-31T09:08:44Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/keylay/renovate-runner
[90m2025-07-31T09:08:44Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $FORCE_RENOVATE == "true"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:44Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lightingcontrol/renovate
[90m2025-07-31T09:08:44Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:08:44Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mdisabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/MindTooth/renovate-gitlab-bot
[90m2025-07-31T09:08:44Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull-push
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_IGNORE_INIT_ERRORS: 'true'
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu validate
".plan:detailed_exitcode:warning:false":
  extends:
".plan:detailed_exitcode:warning:true":
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: false
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    exit_codes:
      - 2
  artifacts:
    when: always
plan:
  extends:
    - ".plan:detailed_exitcode:warning:false"
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    access: none
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/plan.cache"
    reports:
      terraform:
        - "$GITLAB_TOFU_ROOT_DIR/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - "args=\"\"\nif [ \"false\" == \"true\" ]; then \n  echo \"Planning for a destroy\"\n  args=\"-destroy\"\nfi\n"
    - gitlab-tofu plan $args
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$GITLAB_TOFU_STATE_NAME"
    action: start
  resource_group: "$GITLAB_TOFU_STATE_NAME"
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: never
    - when: on_success
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_APPLY_NO_PLAN: false
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu apply
  needs:
    - plan
stages:
  - ".pre"
  - test
  - forks
  - run
  - ".post"
".opentofu:bridge_job_stage:true":
  stage: opentofu
".opentofu:bridge_job_stage:false":
  stage: ".pre"
opentofu:
  stage: ".pre"
  rules:
    - if: '"false" == "false"'
      when: never
    - when: on_success
  extends: ".opentofu:bridge_job_stage:false"
  trigger:
    include:
      - project: components/opentofu
        file: "/templates/validate-plan-apply.yml"
        ref: 0.44.0
        inputs:
          stage_validate: forks
          stage_build: forks
          stage_deploy: forks
          version: 0.44.0
          base_os: alpine
          opentofu_version: 1.8.4
          image_registry_base: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu"
          image_name: gitlab-opentofu
          image_digest: ''
          job_name_prefix: ''
          root_dir: forks
          state_name: forks
          plan_name: plan
          plan_artifacts_access: none
          var_file: config.tfvars
          fmt_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          validate_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          plan_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          apply_rules:
            - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
              when: never
            - when: on_success
          warning_on_non_empty_plan: false
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_VAR_gitlab_bot_token: "$GITLAB_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false"
danger-review:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
    - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
    - bundle install
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
danger-review dry-run:
  rules:
    - if: "'false' == 'false'"
      when: never
    - - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
      - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
      - bundle install
    - unset DANGER_GITLAB_API_TOKEN
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
  extends: danger-review
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
".node":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --docker-files bot_image/docker_files/ --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - bot_image/docker_files/
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node --experimental-strip-types ./scripts/delete-pipelines.ts
  rules:
    - if: "$DELETE_PIPELINES"
".pages":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
pages:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  publish: public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
      needs:
        - execute
    - if: "$CI_MERGE_REQUEST_IID"
      when: manual
      needs: []
      allow_failure: true
pages-dry-run:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      allow_failure: true
      needs:
        - execute
[0m
[90m2025-07-31T09:08:44Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/24-heures-insa/renovate
[90m2025-07-31T09:08:44Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "chat"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --onboarding=true"
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended", "group:recommended", ":dependencyDashboard"],"prHourlyLimit": 0,"prConcurrentLimit": 0}'
    RENOVATE_ADD_LABELS: 'true'
[0m
[90m2025-07-31T09:08:45Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate8143112/renovate-runner
[90m2025-07-31T09:08:45Z[0m [32mINF[0m [1m
image: renovate/renovate:32.6.12
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@company.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:08:45Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m5
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kchim/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kylerillingseed/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thielepaul/renovate-gonum
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ndroste/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/eternaltwin/myhordes/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/szpak/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/prologin/tech/services/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/soapbox-pub/ci/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/GitlabBot5/RenovateTutorial
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jstauffer1/renovate-bot-angi
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-org/ci-cd/runner-tools/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vito-containers/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vito-templates/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Spay_Shawl/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/alexbrofman123/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/andytrimpe/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renjithvr11/gitlab-renovate-bot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/memhamwan/netops/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gbleu/renovate-17432-repro
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ggeorgiev_gitlab/gitlab-runner-renovatebot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-org/ci-cd/runner-tools/gitlab-runner-renovatebot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsch1/renovate-rollback-pr
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/JaanJah/renovate-bot-example
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/astellingwerf/renovate-issue-16561
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bosi/renovate-configs
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elijah.boyette/renovate-gitlab-include-dependencies
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/elijah.boyette/renovate-gitlab-templates
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate11/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate11/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-github-issue-link
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rarogsoftware/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rccausey/renovate-terraform-pinned-provider
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/krystal.heath/dependencies-testing-repo
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dasfernandes/renovatetestlocal
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pspurlock/test-prerelease
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bc-scale/module-kubernetes-renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/PatrickDomnick/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-one-off
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kimak/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ebrahimali1995/renovate-bot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/JMLX/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lauritz.andreas/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/patricks-projects/renovate-bot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lauritz.andreas/renovate-test
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ggeorgiev_gitlab/renovate-generator
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/code-report/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/biomedit/tools/dbot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/BosskurrMH/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bonsai-oss/organization/automate/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/chrisevich/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MKTMIS/mis-core
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/blackb1rd1/renovate-16070-bug-1
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/crystal.alchemist/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/blackb1rd1/renovate-16070-bug
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/armbiant/debugging-monkey
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/archive5691620/renovate-issue-15914
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ankit.sakhareliya/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sjoukedv/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/engmark/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/davidrfreeman/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-graph
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rynr/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vitoyucepi/renovate-issue-17011
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovateBot29200/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vito-foss/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nbokdam/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate123/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stands2/tools/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/at-wat-group/subgroup/renovate-test
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thorstenessig/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thorstenessig/testproject
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/exmpl/renovatebot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joofthan/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nagyv/renovate-17742
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/extsidvind/renovate-commit-message
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sereinity/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/opendurak/renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/PlusMinus0/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hasan.awad/renovate-test-2
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jarv/renovate-ci
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kyeshmz/renovate-bot
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sschoebi/renovate-test
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/naufal.pratama1/terraform-renovate
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vitoyucepi/renovate-issue-16600
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thorstenessig/testdependency
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tvaliiev/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/thopr/renovate-gitlab-ci
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate14/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matteocodogno/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/matteo.gattei.bsd/renovate-configs
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/aarongoldenthal/renovate-subgroup-error
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/akontainers/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ATemplates/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/stands2/tools/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dpprdan/renovate_test
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovateBot29200/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/devcamp-witt/renovate-demo
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate14/renovate-config
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/devcamp-witt/renovate-demo-dummy
[90m2025-07-31T09:09:01Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kachick/sample-renovate-config-asdf
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/JMLX/renovate-runner
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.21-dind@sha256:3153fa63f54628783638632ace7aa3d0f4bfb9f04ae43400122451257f9c8990
  CI_RENOVATE_IMAGE: renovate/renovate:34.52.0-slim@sha256:3e9edd9636321dfafd4d32f05f83523a48475ae89e1f38680226edf3b0decd73
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/kylerillingseed/renovate
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.16-dind@sha256:88bc41871a4f89d258042f8e7ae1d34de7fd2604eaeedc9fd955121eedfe1cf6
  CI_RENOVATE_IMAGE: renovate/renovate:32.70.0-slim@sha256:a3c834a39f5ccc5621175b663e8937259d38573eb4e5d405b451f851eb537b8f
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  image: "${CI_RENOVATE_IMAGE}"
  variables:
    CI_RENOVATE_IMAGE: renovate/renovate:32.66.3@sha256:36244a1b83903ee8df66a1ff51de8ec7a9de9b6e466eb8b739b88941248ad915
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
    RENOVATE_REPOSITORY_CACHE: enabled
    RENOVATE_REQUIRE_CONFIG: required
    RENOVATE_ONBOARDING: 'false'
    RENOVATE_IGNORE_PR_AUTHOR: 'true'
    RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    LOG_LEVEL: debug
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - ".post"
lint:
  image: renovate/node:16.15.0@sha256:4a5086462974dc38d4ff70871ac59429d0acde33eb5b9fb33aa3a9d892b47292
  stage: test
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier || true
    - echo $CI_PROJECT_DIR/
    - echo $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sjoukedv/renovate-runner
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.16-dind@sha256:56ef400f08be1ca817d7e2cfdb43803786ab28d84c8167e8590622d9bab5b415
  CI_RENOVATE_IMAGE: renovate/renovate:32.74.3-slim@sha256:f37c2ccfd9cd92b803736e344c4f911ffc4fe2c5e349d4a740517d8fd461b02f
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:16.15.1@sha256:158c0428e490a9d323ea212255660157b4ba193df26bebe6e9a95ea6dce791d4
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:16.15.1@sha256:158c0428e490a9d323ea212255660157b4ba193df26bebe6e9a95ea6dce791d4
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/kchim/renovate-runner
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.22-dind@sha256:0af3fdff5eb68de84dd4c7f6b0abe68f52683f49fa2bbc9eb027aefdac28e842
  CI_RENOVATE_IMAGE: renovate/renovate:34.82.2-slim@sha256:e3b9b7c0a67fa77b0f777de2d6f855933e167c666a2ea3def5df6578c65e8762
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/kimak/renovate-runner
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.17-dind@sha256:6dd895238f055a79a6d044f7d97b668bef0f9a840e5eed06fa01f1a6b7aed17e
  CI_RENOVATE_IMAGE: renovate/renovate:32.100.4-slim@sha256:dc8a079b45dd9730afac8e153435236c6161f6c847da0f8a62011f4fa3ec545d
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:16.15.1@sha256:6adcfc3f44af26740342820b874812528569868f6ae0532a256f318d80693233
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:16.15.1@sha256:6adcfc3f44af26740342820b874812528569868f6ae0532a256f318d80693233
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/PatrickDomnick/renovate
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
image: renovate/renovate:38
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@exemple.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/ndroste/renovate-runner
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.22-dind@sha256:0af3fdff5eb68de84dd4c7f6b0abe68f52683f49fa2bbc9eb027aefdac28e842
  CI_RENOVATE_IMAGE: renovate/renovate:34.83.1-slim@sha256:348fa64aaa3849d712e800eb64d2b3e55c1f698c4d65ca9b8c8caeaaa8840b9f
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vitoyucepi/renovate-issue-17011
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - lint
  - ".post"
Lint renovate:
  image: renovate/renovate:32.150-slim
  stage: lint
  script:
    - renovate-config-validator renovate.json
  variables:
    LOG_LEVEL: debug
[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lauritz.andreas/renovate-runner
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - update
  - ".post"
image: docker:latest
services:
  - docker:dind
renovate:
  stage: update
  script:
    - docker run -e RENOVATE_TOKEN="$RENOVATE_TOKEN" -e RENOVATE_PLATFORM="gitlab" -e RENOVATE_REPOSITORIES="lauritz.andreas/renovate-test" renovate/renovate:latest
  rules:
    - when: manual
[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/patricks-projects/renovate-bot
[90m2025-07-31T09:09:01Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_PROJECT: patricks-projects/**
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=${RENOVATE_PROJECT} --onboarding=true --detect-host-rules-from-env=true"
    RENOVATE_ONBOARDING_CONFIG: |
      {
        "assignees":["PatrickRice"],
        "baseBranches":["master", "main"],
        "labels":["renovate"],
        "gitNoVerify":[],
        "automerge": true,
        "hostRules":[
          {
            "matchHost":"github.com",
            "concurrentRequestLimit":1
          }
        ],
        "extends":["config:base",":prHourlyLimitNone",":prConcurrentLimitNone",":automergeDisabled",":enableVulnerabilityAlerts","group:allNonMajor"]
      }
stages:
  - ".pre"
  - deploy
  - ".post"
[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:01Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/JaanJah/renovate-bot-example
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/andytrimpe/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.17-dind@sha256:79f5cf744ab66c48ff532b8dea2662dc90db30faded68ff7b33ce7109578ca7d
  CI_RENOVATE_IMAGE: renovate/renovate:32.185.3-slim@sha256:1d8e20027e57cce0089787d9a22328fe40906348c6c343a2614f1acda044cd7e
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:16.17.0@sha256:1dcb562ed27aa556da753d3bbf28f58f05dfc0d9c8ee37a30062793c26fdc279
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:16.17.0@sha256:1dcb562ed27aa556da753d3bbf28f58f05dfc0d9c8ee37a30062793c26fdc279
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/szpak/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.22-dind@sha256:0af3fdff5eb68de84dd4c7f6b0abe68f52683f49fa2bbc9eb027aefdac28e842
  CI_RENOVATE_IMAGE: renovate/renovate:34.78.0-slim@sha256:8de58fecda5cecbb2ac086886e57c90d2c81f994d8d0441820fdb52310caab42
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/prologin/tech/services/renovate
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["local>prologin/tech/services/renovate//renovate-presets.json"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.17.1@sha256:8e74c986e09f8ac4b10ed6cb125bd9ac7081ff9836eba6110d853154e7aabc85
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_GIT_AUTHOR: Prologin Renovate <renovate@prologin.org>
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_ALLOW_POST_UPGRADE_COMMAND_TEMPLATING: 'true'
  RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS: '["^echo"]'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
image: "${CI_RENOVATE_IMAGE_FULL}"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gbleu/renovate-17432-repro
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: test
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
test:
  script:
    - echo OK
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate11/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
image: renovate/renovate:34.74.2
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <theogoetzinger@gmail.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/crystal.alchemist/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.21-dind@sha256:80e81aecd51d80e63ae4cbbd5eb1968e84edd151b90ef2c2f17e1004c7a3832b
  CI_RENOVATE_IMAGE: renovate/renovate:34.27.1-slim@sha256:46bfd1ed6b48310b5f94166444433d83849459c522958281b855af64ee84c8ed
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pspurlock/test-prerelease
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
renovate:
  stage: build
  image:
    name: renovate/renovate:32.107.2
  variables:
    LOG_LEVEL: debug
  script:
    - renovate
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tanna.dev/renovate-graph
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate123/renovate
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
update_repositories:
  image: renovate/renovate
  script:
    - docker-entrypoint.sh
  variables:
    GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
  only:
    - schedules
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renjithvr11/gitlab-renovate-bot
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: DPT Renovate Bot <renovate_bot@gitlab.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_ONBOARDING_CONFIG_FILE_NAME: renovate.json5
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  RENOVATE_AUTODISCOVER: 'true'
  LOG_LEVEL: info
  RENOVATE_CONFIG_FILE: config.js
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  tags:
    - gitlab-runner
renovate:
  stage: deploy
  resource_group: production
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
    - if: $CI_PIPELINE_SOURCE == "schedule"
image: renovate/renovate:39.264.0
gitlab-token-cleanup:
  stage: ".post"
  image:
    name: registry.gitlab.com/renjithvr11/kaniko-tools:latest
    entrypoint:
      - ''
  interruptible: false
  script: "set -eo pipefail\nif [[ -z $RENOVATE_TOKEN ]]\nthen \n  echo \"RENOVATE_TOKEN is NULL. Exiting..\"\n  exit 1\nelse\n  TOKEN_ID=$(curl --request GET --header \"PRIVATE-TOKEN: $RENOVATE_TOKEN\" \"https://gitlab.com/api/v4/personal_access_tokens/self\" | jq .id)\n  ROTATED_TOKEN=$(curl --request POST --header \"PRIVATE-TOKEN: $RENOVATE_TOKEN\" \"https://gitlab.com/api/v4/personal_access_tokens/$TOKEN_ID/rotate\" | jq -r .token)\n  echo -e \"\\nRotated GitLab Token\"\nfi\n"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/engmark/renovate
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SAST_IMAGE_SUFFIX: ''
  SAST_EXCLUDED_ANALYZERS: ''
  DEFAULT_SAST_EXCLUDED_PATHS: spec, test, tests, tmp
  SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS"
  SCAN_KUBERNETES_MANIFESTS: 'false'
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1
".sast-analyzer":
  stage: test
  artifacts:
    access: developer
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - "/analyzer run"
  extends: sast
  allow_failure: true
".deprecated-16.8":
  stage: test
  artifacts:
    access: developer
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
".gitlab-advanced-sast-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.go"
    - "**/*.java"
    - "**/*.jsp"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.cs"
    - "**/*.rb"
    - "**/*.php"
gitlab-advanced-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /gitlab-advanced-sast/"
      when: never
    - if: "$GITLAB_ADVANCED_SAST_ENABLED != 'true' && $GITLAB_ADVANCED_SAST_ENABLED != '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/"
      exists:
        - "**/*.py"
        - "**/*.go"
        - "**/*.java"
        - "**/*.jsp"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.cs"
        - "**/*.rb"
        - "**/*.php"
  variables:
    SEARCH_MAX_DEPTH: 20
    FF_GLAS_ENABLE_PHP_SUPPORT: 'true'
    SAST_ANALYZER_IMAGE_TAG: '2'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gitlab-advanced-sast:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
  cache:
    key: scan-metrics-$CI_COMMIT_REF_SLUG
    fallback_keys:
      - scan-metrics-$CI_DEFAULT_BRANCH
    paths:
      - scan_metrics.csv
bandit-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
brakeman-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
eslint-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
flawfinder-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
kubesec-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /kubesec/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $SCAN_KUBERNETES_MANIFESTS == 'true'
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $SCAN_KUBERNETES_MANIFESTS == 'true'"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/kubesec:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
gosec-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 14.8 and removed in GitLab 15.4"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/352554"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
mobsf-android-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
mobsf-ios-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
nodejs-scan-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
phpcs-security-audit-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 16.8 and removed in GitLab 17.0"
    - echo "For more information see https://docs.gitlab.com/update/deprecations/#sast-analyzer-coverage-changing-in-gitlab-170"
    - exit 1
  extends: ".deprecated-16.8"
  allow_failure: true
".pmd-apex-exist-rules":
  exists:
    - "**/*.cls"
pmd-apex-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /pmd-apex/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.cls"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.cls"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/pmd-apex:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".semgrep-exist-rules":
  exists:
    - "**/*.py"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.cjs"
    - "**/*.mjs"
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.go"
    - "**/*.java"
    - "**/*.cs"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.rb"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
".semgrep-with-advanced-sast-exist-rules":
  exists:
    - "**/*.c"
    - "**/*.cc"
    - "**/*.cpp"
    - "**/*.c++"
    - "**/*.cp"
    - "**/*.cxx"
    - "**/*.h"
    - "**/*.hpp"
    - "**/*.scala"
    - "**/*.sc"
    - "**/*.php"
    - "**/*.swift"
    - "**/*.m"
    - "**/*.kt"
    - "**/*.properties"
    - "**/application*.yml"
    - "**/bootstrap*.yml"
    - "**/application*.yaml"
    - "**/bootstrap*.yaml"
security-code-scan-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "This job was deprecated in GitLab 15.9 and removed in GitLab 16.0"
    - echo "For more information see https://gitlab.com/gitlab-org/gitlab/-/issues/390416"
    - exit 1
  extends: ".sast-analyzer"
  allow_failure: true
semgrep-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /semgrep/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')
      variables:
        SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS, **/*.py, **/*.go, **/*.java, **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.cjs, **/*.mjs, **/*.cs, **/*.rb, **/*.php"
      exists:
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $GITLAB_FEATURES =~ /\bsast_advanced\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')"
      variables:
        SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS, **/*.py, **/*.go, **/*.java, **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.cjs, **/*.mjs, **/*.cs, **/*.rb, **/*.php"
      exists:
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
    - if: "$CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\\bsast_advanced\\b/ && $SAST_EXCLUDED_ANALYZERS !~ /gitlab-advanced-sast/ && ($GITLAB_ADVANCED_SAST_ENABLED == 'true' || $GITLAB_ADVANCED_SAST_ENABLED == '1')"
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.py"
        - "**/*.js"
        - "**/*.jsx"
        - "**/*.ts"
        - "**/*.tsx"
        - "**/*.cjs"
        - "**/*.mjs"
        - "**/*.c"
        - "**/*.cc"
        - "**/*.cpp"
        - "**/*.c++"
        - "**/*.cp"
        - "**/*.cxx"
        - "**/*.h"
        - "**/*.hpp"
        - "**/*.go"
        - "**/*.java"
        - "**/*.cs"
        - "**/*.scala"
        - "**/*.sc"
        - "**/*.php"
        - "**/*.swift"
        - "**/*.m"
        - "**/*.rb"
        - "**/*.kt"
        - "**/*.properties"
        - "**/application*.yml"
        - "**/bootstrap*.yml"
        - "**/application*.yaml"
        - "**/bootstrap*.yaml"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/semgrep:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".sobelow-exist-rules":
  exists:
    - "**/mix.exs"
sobelow-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /sobelow/"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/mix.exs"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/mix.exs"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 6
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/sobelow:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".spotbugs-exist-rules":
  exists:
    - "**/*.groovy"
spotbugs-sast:
  stage: test
  artifacts:
    access: developer
    reports:
      sast:
        - gl-sast-report.json
    paths:
      - gl-sast-report.json
  rules:
    - if: "$SAST_EXCLUDED_ANALYZERS =~ /spotbugs/"
      when: never
    - if: "$SAST_DISABLED == 'true' || $SAST_DISABLED == '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - "**/*.groovy"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.groovy"
  variables:
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 5
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  script:
    - "/analyzer run"
  extends: ".sast-analyzer"
  allow_failure: true
  image:
    name: "$SAST_ANALYZER_IMAGE"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
stages:
  - ".pre"
  - test
  - deploy
  - ".post"
lint files:
  stage: test
  image: nixos/nix:2.25.2@sha256:133a1607deea14a02c2bc0850e275ed135814235a1147f68967afee261caea2b
  script: nix-shell --pure --run 'pre-commit run --all-files'
  except:
    - main
lint commit messages:
  stage: test
  image: nixos/nix:2.25.2@sha256:133a1607deea14a02c2bc0850e275ed135814235a1147f68967afee261caea2b
  variables:
    GIT_DEPTH: ''
  script: nix-shell --pure --run "gitlint --debug --commits 'origin/${CI_DEFAULT_BRANCH}..origin/${CI_COMMIT_BRANCH}'"
  except:
    - main
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/sereinity/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.17-dind@sha256:8d0980a0fc4ed2869ef9f8bd017a637a408fb4d038a64d490a6080c2318eacc8
  CI_RENOVATE_IMAGE: renovate/renovate:32.163.1-slim@sha256:5a1e97fc0628c44c022925fb3d36b2315f47d6498ec79d4dd8593ba5d33f5979
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:16.17.0@sha256:3e671b8b3d1e31b6669bce44a468422d764b9ca79e47963dcec67c5ba916f8a0
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:16.17.0@sha256:3e671b8b3d1e31b6669bce44a468422d764b9ca79e47963dcec67c5ba916f8a0
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tvaliiev/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
check-dependencies:
  image: renovate/renovate:39.92.0
  only:
    refs:
      - schedules
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - renovate --platform gitlab $REPOS_TO_WATCH
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renovate14/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
image: renovate/renovate:32.6.12
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@company.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/PlusMinus0/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/thopr/renovate-gitlab-ci
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/matteocodogno/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.19-dind@sha256:999fc127a51b8a86593ff9ba2518f14cbd18555849f8927fd56fa82395effe16
  CI_RENOVATE_IMAGE: renovate/renovate:32.240.2-slim@sha256:720e1f8085d6a0acbbb4db34aaa0f8edadfbefba6b008459e2ce33311a9d7cf4
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:16.18.0@sha256:3d626a63b3f5385805bdc2307c03f6346868ead1b0f96fcbf31844b6fcbc86f3
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:16.18.0@sha256:3d626a63b3f5385805bdc2307c03f6346868ead1b0f96fcbf31844b6fcbc86f3
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-org/ci-cd/runner-tools/gitlab-runner-renovatebot
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/thorstenessig/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    DOCKER_USERNAME: "$CI_REGISTRY_USER"
    DOCKER_PASSWORD: "$CI_REGISTRY_PASSWORD"
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_REPOSITORY_CACHE: 'true'
    RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/config.json"
  image:
    name: renovate/renovate:32
    entrypoint:
      - ''
  script:
    - renovate
  only:
    - echo $RENOVATE_CONFIG_FILE
    - schedules
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/chrisevich/renovate-runner
[90m2025-07-31T09:09:02Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.21-dind@sha256:80e81aecd51d80e63ae4cbbd5eb1968e84edd151b90ef2c2f17e1004c7a3832b
  CI_RENOVATE_IMAGE: renovate/renovate:34.39.2-slim@sha256:df993113a111288102d479b0631f34b75e29e9338e3d0880f9c88e3782225c7c
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:02Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:02Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/devcamp-witt/renovate-demo-dummy
[90m2025-07-31T09:09:03Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/naufal.pratama1/terraform-renovate
[90m2025-07-31T09:09:03Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - preparation
  - update_renovate
  - ".post"
variables:
  CI_RENOVATE_IMAGE: renovate/renovate:32.119.2-slim@sha256:8c5a7c399a09e138410d5d87a6ad0526ba273a66b4175350b60e16b41281a33a
preparation:
  stage: preparation
  script:
    - echo "$CI_RENOVATE_IMAGE"
  after_script:
    - ls -la
renovate:
  stage: update_renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "push"
  image:
    name: "$CI_RENOVATE_IMAGE"
    entrypoint:
      - ''
  variables:
    GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
  before_script:
    - pwd
    - echo "[BEFORE] checking..."
  script:
    - echo "[RUN] updating..."
    - renovate $RENOVATE_EXTRA_FLAGS
  after_script:
    - ls -la
  artifacts:
    when: on_success
    expire_in: 1 hour
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:03Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/biomedit/tools/dbot
[90m2025-07-31T09:09:03Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:03Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/stands2/tools/renovate-runner
[90m2025-07-31T09:09:03Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:03Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bonsai-oss/organization/automate/renovate
[90m2025-07-31T09:09:03Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - schedule
  - ".post"
renovate:
  stage: schedule
  variables:
    RENOVATE_TOKEN: "$GITLAB_TOKEN"
    GITHUB_COM_TOKEN: "$GITHUB_TOKEN"
  image:
    name: renovate/renovate:latest
  script:
    - unset GOPROXY
    - renovate
  only:
    - main
    - schedules
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/soapbox-pub/ci/renovate
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.22-dind@sha256:0af3fdff5eb68de84dd4c7f6b0abe68f52683f49fa2bbc9eb027aefdac28e842
  CI_RENOVATE_IMAGE: renovate/renovate:34.73.3-slim@sha256:97994355a7cfed62e8344609d12279445c6084bf9e1bdc992526580af6443e90
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  tags:
    - dind
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vito-containers/renovate-runner
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  timeout: 15 minutes
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/davidrfreeman/renovate
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
default:
  image: "${CI_RENOVATE_IMAGE}"
variables:
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  CI_RENOVATE_IMAGE: renovate/renovate:32.66.5-slim@sha256:a142a55ba0dbdfbe3972b5a243f5bad9bd281fd989f443df03891d0a015b7032
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
renovate:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  stage: renovate
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    paths:
      - renovate-log.ndjson
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/eternaltwin/myhordes/renovate-config
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/devcamp-witt/renovate-demo
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
".renovate":
  variables:
    RENOVATE_GIT_AUTHOR: Matthias Maeller <matthias.maeller@witt-gruppe.eu>
    GITHUB_COM_TOKEN: "${GITHUB_COM_TOKEN}"
  image:
    name: renovate/renovate:32.241.8@sha256:6a1ad540efe2bcb70751c8b6d6f3f0e6ff03897cff07c0263a7cdcda7aaa3456
  script:
    - 'renovate $(cat repositories.txt | xargs)

'
  only:
    - main
    - schedules
renovate:
  variables:
    RENOVATE_GIT_AUTHOR: Matthias Maeller <matthias.maeller@witt-gruppe.eu>
    GITHUB_COM_TOKEN: "${GITHUB_COM_TOKEN}"
  image:
    name: renovate/renovate:32.241.8@sha256:6a1ad540efe2bcb70751c8b6d6f3f0e6ff03897cff07c0263a7cdcda7aaa3456
  script:
    - 'renovate $(cat repositories.txt | xargs)

'
  only:
    - main
    - schedules
  extends: ".renovate"
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rynr/renovate
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rarogsoftware/renovate
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  tags:
    - renovate
services:
  - docker:19.03.15-dind
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/akontainers/renovate-runner
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vito-templates/renovate-runner
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  timeout: 4 minutes
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovateBot29200/renovate-runner
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
image: renovate/renovate:32.6.12
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_GIT_AUTHOR: Renovate Bot <renovatebot@company.com>
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  LOG_LEVEL: debug
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-org/ci-cd/runner-tools/renovate-config
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:40.14.6@sha256:532a3bfb7e6759cae8663122d7a61dc12ed69cdccab78278e367063d8cc060e2
  RENOVATE_INCLUDE_FORKS: 'true'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $REPOSITORY
  extends: ".renovate"
  stage: deploy
  resource_group: "$REPOSITORY"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    LOG_LEVEL: debug
  tags:
    - gitlab-org
  environment:
    name: "$REPOSITORY"
  parallel:
    matrix:
      - REPOSITORY: gitlab-org/gl-openshift/gitlab-runner-operator
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vito-foss/renovate-runner
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  timeout: 5 minutes
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/opendurak/renovate
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - run
  - ".post"
renovate:
  image: renovate/renovate:slim@sha256:c0bbff3c3c9a5f6b071f216faab995c8faa22044210c4e6d7d5d6ded9ac195fb
  stage: run
  script:
    - renovate --token "${GITLAB_TOKEN}"
  variables:
    RENOVATE_CONFIG_FILE: config.js
    KUBERNETES_MEMORY_REQUEST: 400Mi
[0m
[90m2025-07-31T09:09:04Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ggeorgiev_gitlab/gitlab-runner-renovatebot
[90m2025-07-31T09:09:04Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.17-dind@sha256:92f2f03c9825c577cb492dcec5fd7a521e24dfe796912373ec771009f92fbf83
  CI_RENOVATE_IMAGE: renovate/renovate:32.179.1-slim@sha256:e4639ee13606ebe8b9ad7f3ed2ba5c111cddc85646fea81c5dbb7dd09c765a24
  RENOVATE_INCLUDE_FORKS: 'true'
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  parallel:
    matrix:
      - RENOVATE_EXTRA_FLAGS: ggeorgiev_gitlab/gitlab-runner
image: registry.gitlab.com/gitlab-org/ci-cd/runner-tools/gitlab-runner-renovatebot/renovate:latest
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
[0m
[90m2025-07-31T09:09:05Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ATemplates/renovate-runner
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:05Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dpprdan/renovate_test
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - echo $CI_DEFAULT_BRANCH
    - echo $RENOVATE_ONBOARDING_CONFIG
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:05Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jarv/renovate-ci
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.21-dind@sha256:3153fa63f54628783638632ace7aa3d0f4bfb9f04ae43400122451257f9c8990
  CI_RENOVATE_IMAGE: renovate/renovate:34.54.1-slim@sha256:4568d5b2a85a29cda991d9c8a89bda4f02b99799fa98f56a14cd97865074d462
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
[0m
[90m2025-07-31T09:09:05Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/exmpl/renovatebot
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1m
default:
  tags:
    - common
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: "$CI_COMMIT_TAG"
stages:
  - ".pre"
  - prepare
  - test
  - release
  - ".post"
renovatebot:
  stage: ".pre"
  trigger:
    include:
      - project: rvct/templates
        file: "/vulnerability/renovatebot/renovatebot.gitlab-ci.yml"
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_TOKEN
dependabot:
  stage: ".pre"
  trigger:
    include:
      - project: rvct/templates
        file: "/vulnerability/dependabot/dependabot.gitlab-ci.yml"
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      exists:
        - ".gitlab/dependabot.yml"
prettier:
  stage: test
  rules:
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      changes:
        - "**/*.{md,json,yml,yaml}"
  trigger:
    include:
      - project: rvct/templates
        file: "/code-quality/prettier.gitlab-ci.yml"
    strategy: depend
commitlint:
  stage: test
  rules:
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
  trigger:
    include:
      - project: rvct/templates
        file: "/environment/commitlint/commitlint.gitlab-ci.yml"
    strategy: depend
release:
  stage: release
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual
    - if: "$CI_COMMIT_BRANCH =~ /^(alpha|beta|rc)$/"
      when: manual
  trigger:
    include:
      - project: rvct/templates
        file: "/environment/semantic-release/semantic-release.gitlab-ci.yml"
    strategy: depend
dependencies:
  stage: prepare
  image: node:16.20.2-alpine
  variables:
    CMD: npm i
  rules:
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      exists:
        - package-lock.json
      variables:
        CMD: npm ci
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      exists:
        - pnpm-lock.yaml
      variables:
        CMD: |
          apk add --no-cache curl
          curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@6
          pnpm config set store-dir .pnpm-store
          pnpm i
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      exists:
        - yarn.lock
      variables:
        CMD: |
          apk add --no-cache yarn
          yarn
  script:
    - sh -c "${CMD}"
  artifacts:
    paths:
      - node_modules
jest:
  stage: test
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
    ARTIFACT_JOB_ID: dependencies
  rules:
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      exists:
        - "**/*.{spec,test}.{jsx,js,tsx,ts}"
        - "**/__tests__/**/*.{jsx,js,tsx,ts}"
      changes:
        - "**/*.{jsx,js,tsx,ts}"
        - "**/*.{spec,test}.{jsx,js,tsx,ts}"
        - "**/__tests__/**/*.{jsx,js,tsx,ts}"
  trigger:
    include:
      - project: rvct/templates
        file: "/javascript/jest.gitlab-ci.yml"
    strategy: depend
eslint:
  stage: test
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
    ARTIFACT_JOB_ID: dependencies
  rules:
    - if: "$CI_COMMIT_REF !~ /^([0-9.].+|alpha|beta|next)$/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      changes:
        - "**/*.{js,jsx,ts,tsx,vue}"
  trigger:
    include:
      - project: rvct/templates
        file: "/javascript/eslint.gitlab-ci.yml"
    strategy: depend
[0m
[90m2025-07-31T09:09:05Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ebrahimali1995/renovate-bot
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1m
image:
  name: "${RENOVATE_IMAGE}"
  entrypoint:
    - ''
variables:
  RENOVATE_TOKEN: "${GITLAB_TOKEN}"
  RENOVATE_IMAGE: renovate/renovate:34
check_deps:
  script:
    - export GITHUB_COM_TOKEN=${GITHUB_COM_TOKEN}
    - export RENOVATE_TOKEN=${GITLAB_TOKEN}
    - echo "machine gitlab.knowis.net login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
    - |
      if [[ "${CI_COMMIT_REF_NAME}" != "${CI_DEFAULT_BRANCH}" ]]; then
        export LOG_LEVEL=debug
      fi
    - export LOG_LEVEL=debug
    - renovate-config-validator
    - renovate
  only:
    - master
check_deps_dry_run:
  script:
    - export LOG_LEVEL=debug
    - export GITHUB_COM_TOKEN=${GITHUB_COM_TOKEN}
    - export RENOVATE_TOKEN=${GITLAB_TOKEN}
    - echo "machine gitlab.knowis.net login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
    - |
      if [[ "${CI_COMMIT_REF_NAME}" != "${CI_DEFAULT_BRANCH}" ]]; then
        export LOG_LEVEL=debug
      fi
    - export LOG_LEVEL=debug
    - renovate-config-validator
    - renovate
  except:
    - master
[0m
[90m2025-07-31T09:09:05Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m6
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/leo.pouchard/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ravindar_reddy/renpvate-poc
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tsvety26/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ysf.askri/gitops-with-monitoring
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/blackarctic/renovate-inspector
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsch1/renovate-gitlab-dependency-proxy
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/viceice-test/renovate-npm-scoped-packages
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/candrews/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/juancarlosjr97/renovate-rocky-gitlab
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsch1/renovate-poetry-bug
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MaronHatoum/renovate-repro-10808
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dima.gorbonos/renovate-runner-host
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsch1/renovate-unittest-versions
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/samq-ws/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/schakravarty.59/renovate-my-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/HelderFSFerreira/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ryanmerolle/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ryanmerolle/renovate-test
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nanabak/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MShekow/gitops-with-monitoring
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NgansoAnicet/myprojectrenovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ethima/dependency-management
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-issue-14602/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mqhabzda/renovate-gradle-issue
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/strausmann/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/secustor/terraform-renovate-bug
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/empaia/integration/ci-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rccausey/terraform-renovate-bug
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/KP-crypto/sample-nodejs-app
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/wild-beavers/terraform/module-kubernetes-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gabrielfeo/renovate-test-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/twarner-sofi/renovate-12837
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/oeyoews/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rumble-o-bin/renovate-botz
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nbs-jodi/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kevinlowrie/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hoppr/robots/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rumble-o-bin/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hojerst/renovate-config
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/giant-containers/renovated-shipping-containers
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lujobi-projects/housekeeping/renovate-config
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joelgrimberg/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/olegkrivtsov/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/juancarlosjr97/renovate-demo
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cy4n/renovate-runner-demo
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-node-codename-changelog-fix
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sandsoft/reproduction-repositories/renovate-12682
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/cy4n/renovate-demo
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/andrielson/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlabracadabra/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/archive5691620/renovate-issue-12529
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pataar/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/larasika/test-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/arcturus-lab/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/to-be-continuous/tools/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/1O/renovate-12178-reproduction-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/1O/renovate-12178-reproduction
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/c1560/renovatebot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jmiguel1/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dhanteeeh/dependency-bot-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/maddocnc/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/arthurfiorette/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Boojapho/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/subesokun/renovate-bug-11877
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/admfritzy/renovatebot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ci4u/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/uncycler/renovate-11710
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/HeyMegabyte/docker/ci-pipeline/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/config-files
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kubitus-project/renovate-config
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/darlenya/renovate-demo-issue
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ajoux.ac/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/checkscale-gitlab/module-kubernetes-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-node-codename-changelog
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-internal-release-notes/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dockerfiles6/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/oberhaus77/renovate-test
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ali-elamri/renovate-this
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ali-elamri/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/buerger-stimme-de/ci/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tcwlab.com/renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vmeurisse/renovate-config
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/schafferg/renovate-tf-demo
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/schafferg/tf-module
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kingpeti/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jamietanna/renovate-config-presets
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/sample-nodejs-app
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/messerli.antony/renovate-test
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-bot
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-practice-project-using-reactjs-2
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/txlab/ops/renovate-config
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/door-to-darkness/kustomize-renovate
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-practice-project-using-reactjs
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-practice-project-using-nodejs
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/yigitcicek/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pandosearch/renovate-test
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/quiwy/renovate-runner
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-com/gl-infra/renovate/renovate-ci
[90m2025-07-31T09:09:15Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-com/gl-infra/renovate/renovate-runner
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/schakravarty.59/renovate-my-bot
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
image: registry.gitlab.com/schakravarty.59/renovate-my-bot/myren:latest
stages:
  - ".pre"
  - deps
  - ".post"
renovate:
  stage: deps
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com".insteadOf "https://gitlab.com"
  script:
    - git --version
    - node --version
    - npm --version
    - npm config set unsafe-perm true
    - renovate --token=$RENOVATE_TOKEN --platform=gitlab $REPOSITORY
  only:
    - schedules
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlabracadabra/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Kubitus Bot <kubitus.bot@gmail.com>
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_NAMESPACES: gitlabracadabra
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/tsvety26/renovate-bot
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.14-dind@sha256:210076c7772f47831afaf7ff200cf431c6cd191f0d0cb0805b1d9a996e99fb5e
  CI_RENOVATE_IMAGE: renovate/renovate:32.32.5-slim@sha256:92de08f1b802f58aedb4817aa23be7161d9c6e6c76923269dfae1aad6db5d6c6
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_BRANCH"
lint:
  image: renovate/node:16.15.0@sha256:5b1d9a1e9de40425e8b0c73a82bcd693b16b4677d6297978d6951e4f6b014464
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
release:
  image: renovate/node:16.15.0@sha256:5b1d9a1e9de40425e8b0c73a82bcd693b16b4677d6297978d6951e4f6b014464
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/nbs-jodi/renovate
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  CI_RENOVATE_IMAGE: renovate/renovate:31.97.3@sha256:5648ef7b96f67385c4e05cc183e9f3aaaafc72a32ec811cde34aae83e1856fa7
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - deploy
  - ".post"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  only:
    - web
  resource_group: production
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/quiwy/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: renovate/renovate:31.23.2@sha256:f3e08fb5d854f4b056e804141e1ed63f338da44c50e3457836916ed55f1e4870
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
stages:
  - ".pre"
  - test
  - run
  - deploy
  - release
  - ".post"
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/to-be-continuous/tools/renovate
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $PROD_REF || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ $INTEG_REF"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*tag(,[^],]*)*\]/" && $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*branch(,[^],]*)*\]/" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*mr(,[^],]*)*\]/" && $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*default(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*prod(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $PROD_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*integ(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME =~ $INTEG_REF
      when: never
    - if: $CI_COMMIT_MESSAGE =~ "/\[(ci skip|skip ci) on ([^],]*,)*dev(,[^],]*)*\]/" && $CI_COMMIT_REF_NAME !~ $PROD_REF && $CI_COMMIT_REF_NAME !~ $INTEG_REF
      when: never
    - when: always
variables:
  RENOVATE_IMAGE: docker.io/renovate/renovate:latest
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_AUTODISCOVER: true
  RENOVATE_AUTODISCOVER_FILTER: "${CI_PROJECT_ROOT_NAMESPACE}/**"
  RENOVATE_REGISTRY_ALIASES: '{"$$CI_SERVER_FQDN": "$CI_SERVER_FQDN"}'
  RENOVATE_BINARY_SOURCE: install
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_ONBOARDING_CONFIG: "{\n  \"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\",\n    \":dependencyDashboard\"\n  ],\n  \"labels\": [\n    \"dependencies\"\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?_IMAGE:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    },\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [ \"\\\\.gitlab-ci\\\\.ya?ml$\" ], \n      \"matchStrings\": [ \"\\\\s?image:\\\\s['\\\"](?<registryUrls>.*?)\\\\/(?<depName>.*?):(?<currentValue>.*)['\\\"]\" ], \n      \"datasourceTemplate\": \"docker\" \n    }\n  ] \n}"
".renovate-scripts": |
  # BEGSCRIPT
  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function assert_defined() {
    if [[ -z "$1" ]]
    then
      log_error "$2"
      exit 1
    fi
  }

  function install_ca_certs() {
    certs=$1
    if [[ -z "$certs" ]]
    then
      return
    fi

    if [[ ! "$(whoami)" == "root" ]]
    then
      log_warn "can't install custom CA certificates (not root user); make sure to handle it"
      return
    fi

    # List of typical bundles
    bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
    bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
    bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
    bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
    bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
    bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

    # Try to find the right bundle to update it with custom CA certificates
    for bundle in ${bundles}
    do
      # import if bundle exists
      if [[ -f "${bundle}" ]]
      then
        # Import certificates in bundle
        echo "${certs}" | tr -d '\r' >> "${bundle}"

        log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
        ca_imported=1
        break
      fi
    done

    if [[ -z "$ca_imported" ]]
    then
      log_warn "Could not import custom CA certificates !"
    fi
  }

  function unscope_variables() {
    _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
    if [[ -z "$_scoped_vars" ]]; then return; fi
    log_info "Processing scoped variables..."
    for _scoped_var in $_scoped_vars
    do
      _fields=${_scoped_var//__/:}
      _condition=$(echo "$_fields" | cut -d: -f3)
      case "$_condition" in
      if) _not="";;
      ifnot) _not=1;;
      *)
        log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
      ;;
      esac
      _target_var=$(echo "$_fields" | cut -d: -f2)
      _cond_var=$(echo "$_fields" | cut -d: -f4)
      _cond_val=$(eval echo "\$${_cond_var}")
      _test_op=$(echo "$_fields" | cut -d: -f5)
      case "$_test_op" in
      defined)
        if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
        elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
        fi
        ;;
      equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
        # comparison operator
        # sluggify actual value
        _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
        # retrieve comparison value
        _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
        _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
        # manage 'ignore case'
        if [[ "$_test_op" == *_ic ]]
        then
          # lowercase everything
          _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
          _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
        fi
        case "$_test_op" in
        equals*)
          if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
          fi
          ;;
        startswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
          fi
          ;;
        endswith*)
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
          fi
          ;;
        contains*)
          # shellcheck disable=SC2076
          if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
          fi
          ;;
        in*)
          if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
          fi
          ;;
        esac
        ;;
      *)
        log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
        continue
        ;;
      esac
      # matches
      _val=$(eval echo "\$${_target_var}")
      log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
      _val=$(eval echo "\$${_scoped_var}")
      export "${_target_var}"="${_val}"
    done
    log_info "... done"
  }

  # evaluate and export a secret
  # - $1: secret variable name
  function eval_secret() {
    name=$1
    value=$(eval echo "\$${name}")
    case "$value" in
    @b64@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @hex@*)
      decoded=$(mktemp)
      errors=$(mktemp)
      if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
      then
        # shellcheck disable=SC2086
        export ${name}="$(cat ${decoded})"
        log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
      else
        fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
      fi
      ;;
    @url@*)
      url=$(echo "$value" | cut -c6-)
      if command -v curl > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      elif command -v wget > /dev/null
      then
        decoded=$(mktemp)
        errors=$(mktemp)
        if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
        then
          # shellcheck disable=SC2086
          export ${name}="$(cat ${decoded})"
          log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
        else
          log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
        fi
      else
        fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
      fi
      ;;
    esac
  }

  function eval_all_secrets() {
    encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
    for var in $encoded_vars
    do
      eval_secret "$var"
    done
  }

  unscope_variables
  eval_all_secrets

  # ENDSCRIPT
stages:
  - ".pre"
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production
  - ".post"
".renovate-base":
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
renovate-validator:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: build
  dependencies: []
  script:
    - renovate-config-validator
renovate-depcheck:
  image: "$RENOVATE_IMAGE"
  services:
    - name: "$TBC_TRACKING_IMAGE"
      command:
        - "--service"
        - renovate
        - 1.7.0
  variables:
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR"
    RENOVATE_CACHE_DIR: "$CI_PROJECT_DIR/.cache/renovate"
    RENOVATE_DRY_RUN: 'true'
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - ".cache/renovate/**"
  before_script:
    - |
      # BEGSCRIPT
      set -e

      function log_info() {
          echo -e "[\\e[1;94mINFO\\e[0m] $*"
      }

      function log_warn() {
          echo -e "[\\e[1;93mWARN\\e[0m] $*"
      }

      function log_error() {
          echo -e "[\\e[1;91mERROR\\e[0m] $*"
      }

      function assert_defined() {
        if [[ -z "$1" ]]
        then
          log_error "$2"
          exit 1
        fi
      }

      function install_ca_certs() {
        certs=$1
        if [[ -z "$certs" ]]
        then
          return
        fi

        if [[ ! "$(whoami)" == "root" ]]
        then
          log_warn "can't install custom CA certificates (not root user); make sure to handle it"
          return
        fi

        # List of typical bundles
        bundles="/etc/ssl/certs/ca-certificates.crt"                            # Debian/Ubuntu/Gentoo etc.
        bundles="${bundles} /etc/ssl/cert.pem"                                  # Alpine Linux
        bundles="${bundles} /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"  # CentOS/RHEL 7
        bundles="${bundles} /etc/pki/tls/certs/ca-bundle.crt"                   # Fedora/RHEL 6
        bundles="${bundles} /etc/ssl/ca-bundle.pem"                             # OpenSUSE
        bundles="${bundles} /etc/pki/tls/cacert.pem"                            # OpenELEC

        # Try to find the right bundle to update it with custom CA certificates
        for bundle in ${bundles}
        do
          # import if bundle exists
          if [[ -f "${bundle}" ]]
          then
            # Import certificates in bundle
            echo "${certs}" | tr -d '\r' >> "${bundle}"

            log_info "Custom CA certificates imported in \\e[33;1m${bundle}\\e[0m"
            ca_imported=1
            break
          fi
        done

        if [[ -z "$ca_imported" ]]
        then
          log_warn "Could not import custom CA certificates !"
        fi
      }

      function unscope_variables() {
        _scoped_vars=$(env | awk -F '=' "/^scoped__[a-zA-Z0-9_]+=/ {print \$1}" | sort)
        if [[ -z "$_scoped_vars" ]]; then return; fi
        log_info "Processing scoped variables..."
        for _scoped_var in $_scoped_vars
        do
          _fields=${_scoped_var//__/:}
          _condition=$(echo "$_fields" | cut -d: -f3)
          case "$_condition" in
          if) _not="";;
          ifnot) _not=1;;
          *)
            log_warn "... unrecognized condition \\e[1;91m$_condition\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
          ;;
          esac
          _target_var=$(echo "$_fields" | cut -d: -f2)
          _cond_var=$(echo "$_fields" | cut -d: -f4)
          _cond_val=$(eval echo "\$${_cond_var}")
          _test_op=$(echo "$_fields" | cut -d: -f5)
          case "$_test_op" in
          defined)
            if [[ -z "$_not" ]] && [[ -z "$_cond_val" ]]; then continue;
            elif [[ "$_not" ]] && [[ "$_cond_val" ]]; then continue;
            fi
            ;;
          equals|startswith|endswith|contains|in|equals_ic|startswith_ic|endswith_ic|contains_ic|in_ic)
            # comparison operator
            # sluggify actual value
            _cond_val=$(echo "$_cond_val" | tr '[:punct:]' '_')
            # retrieve comparison value
            _cmp_val_prefix="scoped__${_target_var}__${_condition}__${_cond_var}__${_test_op}__"
            _cmp_val=${_scoped_var#"$_cmp_val_prefix"}
            # manage 'ignore case'
            if [[ "$_test_op" == *_ic ]]
            then
              # lowercase everything
              _cond_val=$(echo "$_cond_val" | tr '[:upper:]' '[:lower:]')
              _cmp_val=$(echo "$_cmp_val" | tr '[:upper:]' '[:lower:]')
            fi
            case "$_test_op" in
            equals*)
              if [[ -z "$_not" ]] && [[ "$_cond_val" != "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" == "$_cmp_val" ]]; then continue;
              fi
              ;;
            startswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ ^"$_cmp_val" ]]; then continue;
              fi
              ;;
            endswith*)
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val"$ ]]; then continue;
              fi
              ;;
            contains*)
              # shellcheck disable=SC2076
              if [[ -z "$_not" ]] && [[ ! "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              elif [[ "$_not" ]] && [[ "$_cond_val" =~ "$_cmp_val" ]]; then continue;
              fi
              ;;
            in*)
              if [[ -z "$_not" ]] && [[ ! __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              elif [[ "$_not" ]] && [[ __"$_cmp_val"__ =~ __"$_cond_val"__ ]]; then continue;
              fi
              ;;
            esac
            ;;
          *)
            log_warn "... unrecognized test operator \\e[1;91m${_test_op}\\e[0m in \\e[33;1m${_scoped_var}\\e[0m"
            continue
            ;;
          esac
          # matches
          _val=$(eval echo "\$${_target_var}")
          log_info "... apply \\e[32m${_target_var}\\e[0m from \\e[32m\$${_scoped_var}\\e[0m${_val:+ (\\e[33;1moverwrite\\e[0m)}"
          _val=$(eval echo "\$${_scoped_var}")
          export "${_target_var}"="${_val}"
        done
        log_info "... done"
      }

      # evaluate and export a secret
      # - $1: secret variable name
      function eval_secret() {
        name=$1
        value=$(eval echo "\$${name}")
        case "$value" in
        @b64@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | base64 -d > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded base64 secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding base64 secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @hex@*)
          decoded=$(mktemp)
          errors=$(mktemp)
          if echo "$value" | cut -c6- | sed 's/\([0-9A-F]\{2\}\)/\\\\x\1/gI' | xargs printf > "${decoded}" 2> "${errors}"
          then
            # shellcheck disable=SC2086
            export ${name}="$(cat ${decoded})"
            log_info "Successfully decoded hexadecimal secret \\e[33;1m${name}\\e[0m"
          else
            fail "Failed decoding hexadecimal secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
          fi
          ;;
        @url@*)
          url=$(echo "$value" | cut -c6-)
          if command -v curl > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if curl -s -S -f --connect-timeout "${TBC_SECRET_URL_TIMEOUT:-5}" -o "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully curl'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          elif command -v wget > /dev/null
          then
            decoded=$(mktemp)
            errors=$(mktemp)
            if wget -T "${TBC_SECRET_URL_TIMEOUT:-5}" -O "${decoded}" "$url" 2> "${errors}"
            then
              # shellcheck disable=SC2086
              export ${name}="$(cat ${decoded})"
              log_info "Successfully wget'd secret \\e[33;1m${name}\\e[0m"
            else
              log_warn "Failed getting secret \\e[33;1m${name}\\e[0m:\\n$(sed 's/^/... /g' "${errors}")"
            fi
          else
            fail "Couldn't get secret \\e[33;1m${name}\\e[0m: no http client found"
          fi
          ;;
        esac
      }

      function eval_all_secrets() {
        encoded_vars=$(env | grep -v '^scoped__' | awk -F '=' '/^[a-zA-Z0-9_]*=@(b64|hex|url)@/ {print $1}')
        for var in $encoded_vars
        do
          eval_secret "$var"
        done
      }

      unscope_variables
      eval_all_secrets

      # ENDSCRIPT
    - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
  extends: ".renovate-base"
  stage: test
  dependencies: []
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      variables:
        RENOVATE_DRY_RUN: 'false'
    - if: "$RENOVATE_TOKEN"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/maddocnc/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:27.26.0-slim@sha256:c368adbc7cfb4e4506b6c949564cd37d5481274fb31a59bf4dd1009653dee194
services:
  - docker:20.10.8-dind@sha256:1efacb06edbb1e2bd4a39dcc69883866c7dd98562a49fa97d7d29c2da1c3974f
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:14.17.6@sha256:1db27af0194194c48dfe7bf246cc988a700d748f9fa1ead1a810c1f9dc874b76
  stage: release
  cache: []
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/candrews/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.14-dind@sha256:210076c7772f47831afaf7ff200cf431c6cd191f0d0cb0805b1d9a996e99fb5e
  CI_RENOVATE_IMAGE: renovate/renovate:32.14.1-slim@sha256:4607bf430cb314e9106d8124a9e34e27ce8d4eaf20870e6a34f9a41aa664d293
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
lint:
  image: renovate/node:16.14.2@sha256:409402ae43b9653895c113b27d185a530bd901131e492ee2f63f1026e3678b4a
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.14.2@sha256:409402ae43b9653895c113b27d185a530bd901131e492ee2f63f1026e3678b4a
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/ryanmerolle/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'false'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.12-dind@sha256:1f50d3a86f7035805843779f803e81e8f4ce96b62ed68fc70cdcf4922f43470b
  CI_RENOVATE_IMAGE: renovate/renovate:31.11.2-slim@sha256:6cd98dc324ced9e0cc4403d5a7400ba46b9e8dd38835f44414801aa6261e89b3
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/oeyoews/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.12-dind@sha256:6f2ae4a5fd85ccf85cdd829057a34ace894d25d544e5e4d9f2e7109297fedf8d
  CI_RENOVATE_IMAGE: renovate/renovate:31.97.3-slim@sha256:c421a195bbe944f6b4da928e8f37b6ce80747bbb6dce93ae7aefe360d2c81fa4
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "schedule"
lint:
  image: renovate/node:16.14.0@sha256:6b53038f633067f2c52306e748a144d6e5655240136b738a204fe7140b1f9125
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "schedule"
".release":
  image: renovate/node:16.14.0@sha256:6b53038f633067f2c52306e748a144d6e5655240136b738a204fe7140b1f9125
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/kevinlowrie/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.11-dind@sha256:79d0c6e997920e71e96571ef434defcca1364d693d5b937232decf1ee7524a9b
  CI_RENOVATE_IMAGE: renovate/renovate:29.23.1-slim@sha256:18db96aec5eee304d2f6a43c914df26033c2b5072c8d8f257f98c360da660051
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - "${CI_RENOVATE_SERVICE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.13.0@sha256:cfcb5c9d9e7504c25af445c55ad49209a28e80e845b776c6a56dd0d79cf5404d
  stage: release
  cache: []
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/leo.pouchard/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.14-dind@sha256:210076c7772f47831afaf7ff200cf431c6cd191f0d0cb0805b1d9a996e99fb5e
  CI_RENOVATE_IMAGE: renovate/renovate:32.52.2-slim@sha256:f3c224d902e444002178f19759bcebc739c77f521505921b63d94ca12d6776ce
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_BRANCH"
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
lint:
  image: renovate/node:16.15.0@sha256:4a5086462974dc38d4ff70871ac59429d0acde33eb5b9fb33aa3a9d892b47292
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
release:
  image: renovate/node:16.15.0@sha256:4a5086462974dc38d4ff70871ac59429d0acde33eb5b9fb33aa3a9d892b47292
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/hoppr/robots/renovate-bot
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_TOKEN: "$GITLAB_CI_TOKEN"
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true"
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_LOG_FILE: renovate-log.json
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_FILE: renovate.log
  LOG_LEVEL: debug
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_USER: test-user
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:dind
  CI_RENOVATE_IMAGE: renovate/renovate:41.46.3@sha256:33f16a5e303ee3243eb6d413c05383f5cdaece9d8435dbd899dc8993478edfa3
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: always
    - if: "$CI_PIPELINE_SOURCE =~ /^trigger|pipeline|web|api$/"
      when: always
    - if: "$CI_COMMIT_TAG =~ /^v\\d+.\\d+.\\d+-?.*$/"
      when: never
    - when: always
validate-renovate-config:
  image: "$CI_RENOVATE_IMAGE"
  needs: []
  variables:
    RENOVATE_CONFIG_FILE: config.js
  script:
    - renovate-config-validator
renovate:
  services:
    - name: "${CI_RENOVATE_SERVICE}"
      alias: docker
  image: "$CI_RENOVATE_IMAGE"
  needs:
    - validate-renovate-config
  script:
    - git config --global user.name gitlab-ci-token
    - git config --global user.password $RENOVATE_TOKEN
    - git config --list
    - renovate $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - when: never
  parallel:
    matrix:
      - RENOVATE_AUTODISCOVER_FILTER:
          - "/hoppr/.*/"
          - "/lmco/hoppr-restricted/.*/"
[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/juancarlosjr97/renovate-rocky-gitlab
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
image: docker:latest
variables:
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
  RENOVATE_TOKEN: "$RENOVATE_TOKEN"
  LOG_LEVEL: debug
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
services:
  - name: docker:dind
    alias: docker
renovate:
  stage: build
  script:
    - docker run -e RENOVATE_TOKEN -e GITHUB_COM_TOKEN -e RENOVATE_ENDPOINT -e RENOVATE_PLATFORM -e LOG_LEVEL -e RENOVATE_BASE_DIR -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:32.6.0-slim@sha256:6a722989e5402841f18b1a488dc3b117fd6afae0f61544134069fd3dba5bba83
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dsch1/renovate-unittest-versions
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cy4n/renovate-demo
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/cy4n/renovate-runner-demo
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  image: renovate/renovate:29.11.1
  script:
    - renovate
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - renovate-log.ndjson
  only:
    - schedules
    - main
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/ysf.askri/gitops-with-monitoring
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/strausmann/renovate-runner
[90m2025-07-31T09:09:16Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.12-dind@sha256:6f2ae4a5fd85ccf85cdd829057a34ace894d25d544e5e4d9f2e7109297fedf8d
  CI_RENOVATE_IMAGE: renovate/renovate:32.0.6-slim@sha256:b50942275766a33e9c72575fb10f97930533547beb8e384e2f7dcef67dd52a8d
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
lint:
  image: renovate/node:16.14.0@sha256:fd0fe05e1523122186b7a96d0256f115accf3940c1afc7045aeeba49dc08c7b1
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.14.0@sha256:fd0fe05e1523122186b7a96d0256f115accf3940c1afc7045aeeba49dc08c7b1
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/KP-crypto/sample-nodejs-app
[90m2025-07-31T09:09:16Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ajoux.ac/renovate
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/juancarlosjr97/renovate-demo
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - test
  - renovate
  - ".post"
renovate:
  image: renovate/renovate:latest
  script:
    - docker-entrypoint.sh
  variables:
    GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
    LOG_LEVEL: debug
  only:
    - schedules
test:
  image: node:16.13.2
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm test
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/rumble-o-bin/renovate-runner
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.11-dind@sha256:79d0c6e997920e71e96571ef434defcca1364d693d5b937232decf1ee7524a9b
  CI_RENOVATE_IMAGE: renovate/renovate:29.23.1-slim@sha256:18db96aec5eee304d2f6a43c914df26033c2b5072c8d8f257f98c360da660051
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - "${CI_RENOVATE_SERVICE}"
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.13.0@sha256:cfcb5c9d9e7504c25af445c55ad49209a28e80e845b776c6a56dd0d79cf5404d
  stage: release
  cache: []
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/darlenya/renovate-demo-issue
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/MaronHatoum/renovate-repro-10808
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_EXTRA_FLAGS: dlouzan/renovate-repro-10808
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.53.4@sha256:d1fcd711677dcb08b3020ea535b4da14e9b77a4a9acd03924945fc08eb461ea0
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-bot
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
update_repositories:
  image: renovate/renovate:31.58
  script:
    - docker-entrypoint.sh
  variables:
    GITHUB_COM_TOKEN: "$GITHUB_COM_TOKEN"
    RENOVATE_TOKEN: "$RENOVATE_TOKEN"
  only:
    - schedules
[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-node-codename-changelog
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/MShekow/gitops-with-monitoring
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dhanteeeh/dependency-bot-renovate
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/oberhaus77/renovate-test
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-ci-utils/config-files
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
".duplication_base":
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality: "${PMDCPD_RESULTS_BASE}.json"
duplication_go:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-go
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: go
    PMDCPD_DIR_FILES: "--file-list=go_files.txt"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - find . -type f -name "*.go" ! -name "*_test.go" > go_files.txt
duplication_js:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-js
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: ecmascript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.js"
duplication_ts:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/gitlab-pmd-cpd:2.7.2@sha256:bdeaffed44b032e1c85fe4fb35b979a91576ab08685cb7811ac39995ea3f40f7
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    PMDCPD_MIN_TOKENS: 35
    PMDCPD_RESULTS_BASE: pmd-cpd-results-ts
    PMDCPD_RESULTS: "${PMDCPD_RESULTS_BASE}.xml"
    PMDCPD_LANGUAGE: typescript
    PMDCPD_CLI_ARGS: "--exclude ./tests/"
  script:
    - "/gitlab-pmd-cpd/pmd-cpd.sh"
  artifacts:
    paths:
      - "${PMDCPD_RESULTS_BASE}.*"
    reports:
      codequality:
        - "${PMDCPD_RESULTS_BASE}.json"
  extends:
    - ".duplication_base"
  rules:
    - exists:
        - "**/*.ts"
lint_container:
  image: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  stage: lint
  needs: []
  rules:
    - exists:
        - "*Dockerfile"
  allow_failure: true
  script:
    - hadolint *Dockerfile
".go":
  image: golang:1.24.5-alpine3.22@sha256:ddf52008bce1be455fe2b22d780b6693259aaf97b16383b6372f4b22dd33ad66
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
".go_test":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/go-test:2.8.2@sha256:9abbb32b66f8678a9ca1035e6b65d2780b6341d29c9514e745429972f119d481
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
  extends:
    - ".go"
  artifacts:
    when: always
".go_test_coverage":
  after_script:
    - gocover-cobertura -by-files < coverage.out > coverage.xml
    - go tool cover -html coverage.out -o coverage.html
    - go-junit-report < tests.txt > junit.xml
  coverage: "/total:\\s+\\(statements\\)\\s+\\d+.\\d+%/"
  artifacts:
    expose_as: Go Test Coverage Report
    paths:
      - coverage.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
lint_go:
  image: golangci/golangci-lint:v2.2.2-alpine@sha256:27ec1537dc2c6b17375d234c8fc6fcb567bc73335c092bd15f1cf0190718dbd1
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    GO_BIN_DIR: bin
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.golangci.yml
  extends:
    - ".go"
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.go"
  before_script:
    - apk add jq
    - if [ ! -f .golangci.yml ]; then (wget $CONFIG_FILE_LINK) fi
  script:
    - golangci-lint run --output.code-climate.path=gl-code-quality-report.json $LINT_GO_CLI_ARGS
  after_script:
    - cat gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality:
        - gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: true
".node":
  image: node:22-alpine
lint_md:
  image: node:22-alpine
  extends:
    - ".node"
  stage: lint
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.markdownlint.json
  needs: []
  rules:
    - exists:
        - "**/*.md"
  before_script:
    - npm install -g markdownlint-cli2@0.18.1
    - if [ ! -f .markdownlint.json ]; then (wget $CONFIG_FILE_LINK) fi
  script:
    - markdownlint-cli2 "**/*.md" "#node_modules"
".python":
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
".djlint":
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - if [ ! -f .djlintrc ]; then (wget -O .djlintrc $CONFIG_FILE_LINK) fi
  script:
    - djlint --check --lint .
lint_nunjucks:
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/Nunjucks.djlintrc
  extends:
    - ".djlint"
  stage: lint
  needs: []
  before_script:
    - pip install djlint==1.36.4
    - if [ ! -f .djlintrc ]; then (wget -O .djlintrc $CONFIG_FILE_LINK) fi
  script:
    - djlint --check --lint .
  rules:
    - exists:
        - "**/*.njk"
lint_powershell:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/psscriptanalyzer:1.2.0@sha256:25c224435065d20018322f89528b265aa5931528714dd65eb667757906b8a7f5
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.ps1"
        - "**/*.psm1"
  script:
    - pwsh -c "Invoke-ScriptAnalyzer -Path . -EnableExit"
lint_prose:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/vale:3.7.1@sha256:5512f41f2a08b416b42ea064e1538ff59ca9e577dcc5e649a44c56d1941ab928
    entrypoint:
      - ''
  stage: lint
  needs: []
  rules:
    - exists:
        - "**/*.md"
  variables:
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.vale.ini
    VALE_REPORT: vale.json
    VALE_GLOB: README.md
    VALE_INPUT: "./"
  before_script:
    - if [ ! -f .vale.ini ]; then (wget $CONFIG_FILE_LINK) fi
    - "/vale/sync.sh"
  script:
    - vale --output="/vale/vale-glcq.tmpl" --no-exit --glob="$VALE_GLOB" $VALE_CLI_ARGS $VALE_INPUT > $VALE_REPORT
  after_script:
    - jq -r '.[].check_name' $VALE_REPORT | sort | uniq -c | sort -nr
  artifacts:
    paths:
      - "$VALE_REPORT"
    reports:
      codequality:
        - "$VALE_REPORT"
lint_sh:
  image: ubuntu:24.04
  stage: lint
  needs: []
  allow_failure: true
  rules:
    - exists:
        - "**/*.sh"
  before_script:
    - 'apt update && apt -y install --no-install-recommends shellcheck && shellcheck --version

'
  script:
    - find . -type f -name "*.sh" -exec shellcheck {} +
lint_yaml:
  image: python:3.13.5-alpine3.22@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_NO_CACHE_DIR: 1
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    CONFIG_FILE_LINK: https://gitlab.com/gitlab-ci-utils/config-files/-/raw/13.0.0/Linters/.yamllint.yml
  extends:
    - ".python"
  stage: lint
  needs: []
  before_script:
    - pip install yamllint==1.37.1
    - 'if [ ! -f .yamllint ] && [ ! -f .yamllint.yml ] && [ ! -f .yamllint.yaml ]; then (wget $CONFIG_FILE_LINK) fi

'
  script:
    - cp ./Linters/.yamllint.yml ./.yamllint.yml
    - yamllint .
prepare_release:
  image: node:22-alpine
  extends:
    - ".node"
  stage: pre-release
  needs: []
  variables:
    RELEASE: '{"defaults":{"name":"$$$$CHANGELOG","description":"$$$$CHANGELOG","milestones":["${CI_COMMIT_TAG}"]}}'
  before_script:
    - npm install -g gitlab-releaser@8.0.6
    - |
      if [ ! -f .gitlab/gitlab-releaser.json ]; then
        mkdir -p .gitlab && echo $RELEASE > .gitlab/gitlab-releaser.json
      fi
  script:
    - gitlab-releaser
  rules:
    - if: "$CI_COMMIT_TAG"
  artifacts:
    paths:
      - ".gitlab/release.json"
create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:v0.24.0@sha256:3f52d526f48e8d10625c722fa6d6423ee82aadeae1b1aa91f07b62551d96dacf
  stage: release
  needs:
    - prepare_release
    - deploy_tag
  rules:
    - if: "$CI_COMMIT_TAG"
  script:
    - release-cli create-from-file -file .gitlab/release.json
code_count:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/cloc:1.6.0@sha256:ca1bb1499f4eee47e3d99a57cdf1e04918e3663f14320f11f553982e1778ce53
    entrypoint:
      - ''
  stage: test
  needs: []
  variables:
    CLOC_NOT_MATCH_FILES: package-lock.json
  script:
    - cloc --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
    - cloc --json --report-file=code-count.json --not-match-f="$CLOC_NOT_MATCH_FILES" $CLOC_CLI_ARGS .
  after_script:
    - 'cat code-count.json | jq -r ''keys[] as $k | "sloc{language=\"\($k)\"} \(.[$k] | .code)"'' | sed ''/^.*{language="\(SUM\|header\)"}.*$/d'' > metrics.txt

'
  artifacts:
    paths:
      - code-count.json
    reports:
      metrics:
        - metrics.txt
lint_renovate:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - renovate-config-validator --strict
sokrates:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-sokrates:latest
    entrypoint:
      - ''
  stage: test
  needs: []
  allow_failure: true
  rules:
    - if: "$CI_COMMIT_TAG"
  retry:
    max: 2
    when:
      - script_failure
  before_script:
    - java -XX:+PrintFlagsFinal -version | grep HeapSize
  script:
    - "/sokrates/analyze.sh"
    - if [ -z "$(ls -A _sokrates/)" ]; then exit 2; fi
  after_script:
    - echo 'sokrates run' > metrics.txt
  artifacts:
    expose_as: Sokrates Report
    paths:
      - _sokrates/
    reports:
      metrics:
        - metrics.txt
unicode_bidi_test:
  image: node:22-alpine
  extends:
    - ".node"
  stage: test
  needs: []
  variables:
    FILES: ".css,Dockerfile,.handlebars,.htm,.html,.js,.json,.md,.ps1,.sh,.svg,.toml,.ts,.xml,.yml,.yaml"
  before_script:
    - npm install -g anti-trojan-source@1.4.1
  script:
    - anti-trojan-source --files='./**/*{$FILES}'
".all_except_schedule":
  rules:
    - if: "$ENABLE_SCHEDULE"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
".run_without_renovate":
  rules:
    - if: "$RUN_WITH_RENOVATE"
      when: on_success
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - when: on_success
".schedule_pass_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - allow_failure: true
".schedule_fail_without_renovate":
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      exists:
        - ".gitlab/renovate.json"
        - renovate.json
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - allow_failure: true
stages:
  - ".pre"
  - prepare
  - lint
  - build
  - pre-test
  - test
  - post-test
  - pre-deploy
  - deploy
  - pre-container-build
  - container-build
  - pre-container-test
  - container-test
  - post-container-test
  - container-deploy
  - pre-release
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - when: always
default:
  artifacts:
    expire_in: 15 days
variables:
  DOCKERFILE: Dockerfile
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:8"
  CS_SCHEMA_MODEL: 15
  TEMP_IMAGE_REPOSITORY: "$CI_REGISTRY_IMAGE/tmp"
  TEMP_IMAGE_TAG: "$CI_PIPELINE_ID"
  CI_APPLICATION_REPOSITORY: "$TEMP_IMAGE_REPOSITORY"
  CI_APPLICATION_TAG: "$TEMP_IMAGE_TAG"
container_build:
  stage: container-build
  image:
    name: registry.gitlab.com/gitlab-ci-utils/container-images/kaniko:v1.25.0-debug@sha256:23bf7ae47c0b41f7f5c0c65d89bd4ba8af168d5c7fcbc227c88454675ae89d42
    entrypoint:
      - ''
  script:
    - |
      if [ "$KANIKO_USE_DEPENDENCY_PROXY" = "true" ]; then
        echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        export KANIKO_REGISTRY_MIRROR="--registry-mirror $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX"
      fi
    - "/kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKERFILE --destination $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG $KANIKO_REGISTRY_MIRROR $KANIKO_CLI_ARGS\n"
  needs:
    - lint_container
  variables:
    KANIKO_USE_DEPENDENCY_PROXY: 'true'
".image_tools":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
".copy_image":
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
  extends:
    - ".image_tools"
  variables:
    GIT_STRATEGY: none
    SOURCE_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    DEST_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    SOURCE_IMAGE_NAME: "$CI_APPLICATION_REPOSITORY"
    SOURCE_IMAGE_TAG: "$CI_APPLICATION_TAG"
    DEST_IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    DEST_IMAGE_TAG: "$IMAGE_TAG"
  stage: container-deploy
  script:
    - |
      export SOURCE_IMAGE=docker://$SOURCE_IMAGE_NAME:$SOURCE_IMAGE_TAG
      echo SOURCE_IMAGE: $SOURCE_IMAGE
      export DEST_IMAGE=docker://$DEST_IMAGE_NAME:$DEST_IMAGE_TAG
      echo DEST_IMAGE: $DEST_IMAGE
    - 'skopeo copy --src-creds=$SOURCE_DOCKER_CREDS --dest-creds=$DEST_DOCKER_CREDS $SKOPEO_CLI_ARGS $SOURCE_IMAGE $DEST_IMAGE

'
  needs:
    - container_scanning
    - container_dive
    - update_annotations
deploy_branch:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
  extends:
    - ".copy_image"
  variables:
    GIT_STRATEGY: none
    SOURCE_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    DEST_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    SOURCE_IMAGE_NAME: "$CI_APPLICATION_REPOSITORY"
    SOURCE_IMAGE_TAG: "$CI_APPLICATION_TAG"
    DEST_IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    DEST_IMAGE_TAG: "$IMAGE_TAG"
  stage: container-deploy
  script:
    - |
      export SOURCE_IMAGE=docker://$SOURCE_IMAGE_NAME:$SOURCE_IMAGE_TAG
      echo SOURCE_IMAGE: $SOURCE_IMAGE
      export DEST_IMAGE=docker://$DEST_IMAGE_NAME:$DEST_IMAGE_TAG
      echo DEST_IMAGE: $DEST_IMAGE
    - 'skopeo copy --src-creds=$SOURCE_DOCKER_CREDS --dest-creds=$DEST_DOCKER_CREDS $SKOPEO_CLI_ARGS $SOURCE_IMAGE $DEST_IMAGE

'
  needs:
    - container_scanning
    - container_dive
    - update_annotations
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG"
      variables:
        IMAGE_TAG: latest
    - if: "($CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_IID"
      variables:
        IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
deploy_tag:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
  extends:
    - ".copy_image"
  variables:
    GIT_STRATEGY: none
    SOURCE_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    DEST_DOCKER_CREDS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
    SOURCE_IMAGE_NAME: "$CI_APPLICATION_REPOSITORY"
    SOURCE_IMAGE_TAG: "$CI_APPLICATION_TAG"
    DEST_IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    DEST_IMAGE_TAG: "$IMAGE_TAG"
    IMAGE_TAG: "$CI_COMMIT_TAG"
  stage: container-deploy
  script:
    - |
      export SOURCE_IMAGE=docker://$SOURCE_IMAGE_NAME:$SOURCE_IMAGE_TAG
      echo SOURCE_IMAGE: $SOURCE_IMAGE
      export DEST_IMAGE=docker://$DEST_IMAGE_NAME:$DEST_IMAGE_TAG
      echo DEST_IMAGE: $DEST_IMAGE
    - 'skopeo copy --src-creds=$SOURCE_DOCKER_CREDS --dest-creds=$DEST_DOCKER_CREDS $SKOPEO_CLI_ARGS $SOURCE_IMAGE $DEST_IMAGE

'
  needs:
    - container_scanning
    - container_dive
    - update_annotations
  rules:
    - if: "$CI_COMMIT_TAG"
container_dive:
  image:
    name: ghcr.io/wagoodman/dive:v0.13.1@sha256:f1886e6c32c094fc41a623c1989f5cb3e48aa766da5f0be233f911fc1d85ce10
    entrypoint:
      - ''
  stage: container-test
  variables:
    GIT_STRATEGY: none
  allow_failure: true
  needs:
    - container_build
  script:
    - apk add --no-cache skopeo
    - skopeo copy docker://${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} docker-archive:archive.tar
    - dive --source docker-archive archive.tar
remove_image:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
  extends:
    - ".image_tools"
  stage: ".post"
  variables:
    GIT_STRATEGY: none
  script:
    - regctl registry login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - regctl tag rm "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
  needs:
    - deploy_branch
    - job: deploy_tag
      optional: true
  allow_failure: true
container_scanning:
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: container-test
  variables:
    GIT_STRATEGY: none
    CS_REPORTS_GLOB: gl-*report*.json
  allow_failure: true
  artifacts:
    access: all
    reports:
      container_scanning:
        - gl-container-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-container-scanning-report.json
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  script:
    - gtcs scan
  rules:
    - if: "$CONTAINER_SCANNING_DISABLED == 'true' || $CONTAINER_SCANNING_DISABLED == '1'"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      variables:
        IMAGE_TAG: latest
    - if: "$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_IID"
      variables:
        IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
    - if: "$CI_COMMIT_TAG"
      variables:
        IMAGE_TAG: "$CI_COMMIT_TAG"
  after_script:
    - |
      if [ "$DISABLE_CS_IMAGE_RENAME" = "true" ]; then exit; fi

      echo Updating reports to convert "${TEMP_IMAGE_REPOSITORY}:${TEMP_IMAGE_TAG}" to "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      # Update complete image with tag first, then image/tag alone to avoid double replacement
      sed -i "s|${TEMP_IMAGE_REPOSITORY}:${TEMP_IMAGE_TAG}|${CI_REGISTRY_IMAGE}:${IMAGE_TAG}|g" $CS_REPORTS_GLOB
      sed -i "s|${TEMP_IMAGE_REPOSITORY}|${CI_REGISTRY_IMAGE}|g" $CS_REPORTS_GLOB
      sed -i "s|${TEMP_IMAGE_TAG}|${IMAGE_TAG}|g" $CS_REPORTS_GLOB

      # SBOM has URL encoded value in purl, and since a URL should only need to encode "/"
      sed -i "s|$( \
        echo $TEMP_IMAGE_REPOSITORY | sed "s|/|%2F|g" \
      )|$( \
        echo $CI_REGISTRY_IMAGE | sed "s|/|%2F|g" \
      )|g" $CS_REPORTS_GLOB

      # The purl uses the value after the last "/" in the image name as the name,
      # but may be a sub-repository.
      sed -i "s|pkg:oci/$( \
        basename $TEMP_IMAGE_REPOSITORY \
      )|pkg:oci/$( \
        basename $CI_REGISTRY_IMAGE \
      )|g" $CS_REPORTS_GLOB
  needs:
    - container_build
update_annotations:
  image: registry.gitlab.com/gitlab-ci-utils/container-images/image-tools:1.7.0@sha256:859ca2a253d5dcb727066e0867a4c3af1b4547fae3b77c29f65491accde11e4f
  extends:
    - ".image_tools"
  stage: container-build
  needs:
    - container_build
  script:
    - gitlab-annotations.sh
lint_renovate_configs:
  image: ghcr.io/renovatebot/renovate:41
  stage: lint
  needs: []
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  rules:
    - exists:
        - ".gitlab/renovate.json"
        - renovate.json
  script:
    - find ./Renovate/ -type f -name *.renovate.json -exec renovate-config-validator --strict {} +
  extends:
    - lint_renovate
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/yigitcicek/renovate-runner
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.12-dind@sha256:1f50d3a86f7035805843779f803e81e8f4ce96b62ed68fc70cdcf4922f43470b
  CI_RENOVATE_IMAGE: renovate/renovate:31.38.4-slim@sha256:ed5212cfb58a12e6d32199add7901072b3461556ea2f62e95accb60c95fdcd71
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_EXTRA_FLAGS: yigitcicek/composer-test
  RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/config.js"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
lint:
  image: renovate/node:16.13.2@sha256:dcbbcf37dd8a6de7a80020dd44197afc6564a1a7dd2a50fb089be1d5d259b3f3
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.13.2@sha256:dcbbcf37dd8a6de7a80020dd44197afc6564a1a7dd2a50fb089be1d5d259b3f3
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/tcwlab.com/renovate
[90m2025-07-31T09:09:17Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - lint
  - update-dependencies
  - ".post"
renovate:
  stage: update-dependencies
  image: renovate/renovate:37.358.0@sha256:d6da5d197e0315d4e42580c7f98ae61a6958ef42a8b6fa61d0a351cc8334a59e
  only:
    - schedules
    - main
  tags:
    - docker
    - linux
  variables:
    LOG_LEVEL: debug
    RENOVATE_CONFIG_FILE: renovate.json
  script:
    - echo "renovate --dry-run --autodiscover=true --autodiscover-filter=tcwlab.com/**/*"
    - renovate --autodiscover=true --autodiscover-filter=tcwlab.com/**/*
mega-linter:
  stage: lint
  image: megalinter/megalinter:v5@sha256:463763d4a2aa0bf9e0b51663377201ead8c17a0b8e015c9a2c979099366cf868
  tags:
    - docker
    - linux
  script:
    - 'true'
  variables:
    DEFAULT_WORKSPACE: "$CI_PROJECT_DIR"
  artifacts:
    when: always
    paths:
      - report
    expire_in: 1 week
  allow_failure: true
  except:
    - main
    - tags
[0m
[90m2025-07-31T09:09:17Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-node-codename-changelog-fix
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:17Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-practice-project-using-reactjs
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
image: node
stages:
  - ".pre"
  - test
  - ".post"
test:
  stage: test
  script:
    - CI=true npm test
".renovate":
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    RENOVATE_LOG_LEVEL: info
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'node /usr/src/app/dist/renovate.js --platform "gitlab" --endpoint "${CI_API_V4_URL}" --git-author "${RENOVATE_GIT_AUTHOR}" --dry-run "${RENOVATE_DRY_RUN}" --log-level "${RENOVATE_LOG_LEVEL}" "${CI_PROJECT_PATH}"

'
  only:
    - master
    - schedules
Renovate:
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    RENOVATE_LOG_LEVEL: info
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'node /usr/src/app/dist/renovate.js --platform "gitlab" --endpoint "${CI_API_V4_URL}" --git-author "${RENOVATE_GIT_AUTHOR}" --dry-run "${RENOVATE_DRY_RUN}" --log-level "${RENOVATE_LOG_LEVEL}" "${CI_PROJECT_PATH}"

'
  only:
    - master
    - schedules
  extends: ".renovate"
[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/jmiguel1/renovate-runner
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  CI_RENOVATE_SERVICE: docker:20.10.21-dind@sha256:3153fa63f54628783638632ace7aa3d0f4bfb9f04ae43400122451257f9c8990
  CI_RENOVATE_IMAGE: renovate/renovate:34.55.0-slim@sha256:10244079ea39903ef40f75ea46106d106a51a2b1eea3c6d503fefcfc39981ec4
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
services:
  - name: "${CI_RENOVATE_SERVICE}"
    alias: docker
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: renovate/node:18.12.0@sha256:e393a5b2cbf5b849895daea5d5ef4c234f27aded98f6fa505d7020c84a3d6fc7
  stage: release
  services: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - git config --global --add safe.directory $PWD
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pataar/renovate-runner
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:28.21.6-slim@sha256:0104bf2dc1e485bd9d881105e22a8c4f4f3496ab6fdef90273c49db679b6a9eb
services:
  - docker:20.10.10-dind@sha256:4affae8ac27539b74e27ac4f2d6662902a328340c218336944bab7e482244cc4
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
release:
  image: renovate/node:16.13.0@sha256:ee65846116165842cb76da67f26385d084221bec0979992de24f81e587ec9ec6
  stage: release
  cache: []
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:18Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/hojerst/renovate-config
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
".release:semantic-release":
  image: node:22.17.0@sha256:0c0734eb7051babbb3e95cd74e684f940552b31472152edf0bb23e54ab44a0d7
  variables:
    SEMANTIC_RELEASE_VERSION: 24.2.3
  script:
    - "[ -f package.json ] && npm ci"
    - npm exec semantic-release@${SEMANTIC_RELEASE_VERSION}
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
".pages:retype":
  image: node:22.17.0@sha256:0c0734eb7051babbb3e95cd74e684f940552b31472152edf0bb23e54ab44a0d7
  variables:
    RETYPE_VERSION: 3.7.0
  interruptible: true
  script:
    - npm exec -p retypeapp@$RETYPE_VERSION retype build
  artifacts:
    paths:
      - public
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
".gitlab:merge-request":
  image:
    name: curlimages/curl:8.14.1@sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b
    entrypoint:
      - ''
  variables:
    SOURCE_BRANCH: "$CI_COMMIT_BRANCH"
    TARGET_BRANCH: ''
    GITLAB_TOKEN: ''
    TITLE: 'Draft: automatic merge request'
    PROJECT_ID: "$CI_PROJECT_ID"
    ASSIGNEE_ID: "$GITLAB_USER_ID"
    SQUASH: 'true'
    REMOVE_SOURCE_BRANCH: 'true'
  script:
    - '[ -n "$SOURCE_BRANCH" ]'
    - '[ -n "$TARGET_BRANCH" ]'
    - '[ -n "$GITLAB_TOKEN" ]'
    - |
      BODY="{
          \"id\": ${PROJECT_ID},
          \"source_branch\": \"${SOURCE_BRANCH}\",
          \"target_branch\": \"${TARGET_BRANCH}\",
          \"remove_source_branch\": true,
          \"squash\": ${SQUASH},
          \"title\": \"${TITLE}\",
          \"assignee_id\":\"${ASSIGNEE_ID}\"
      }"
    - curl -X POST "${CI_API_V4_URL}/projects/${PROJECT_ID}/merge_requests" --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" --header "Content-Type:application/json" --data "${BODY}"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
variables:
  INTEGRATION_BRANCH: "$CI_DEFAULT_BRANCH"
merge-request:
  image:
    name: curlimages/curl:8.14.1@sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b
    entrypoint:
      - ''
  variables:
    SOURCE_BRANCH: "$CI_COMMIT_BRANCH"
    TARGET_BRANCH: ''
    GITLAB_TOKEN: ''
    TITLE: 'Draft: automatic merge request'
    PROJECT_ID: "$CI_PROJECT_ID"
    ASSIGNEE_ID: "$GITLAB_USER_ID"
    SQUASH: 'true'
    REMOVE_SOURCE_BRANCH: 'true'
  script:
    - '[ -n "$SOURCE_BRANCH" ]'
    - '[ -n "$TARGET_BRANCH" ]'
    - '[ -n "$GITLAB_TOKEN" ]'
    - |
      BODY="{
          \"id\": ${PROJECT_ID},
          \"source_branch\": \"${SOURCE_BRANCH}\",
          \"target_branch\": \"${TARGET_BRANCH}\",
          \"remove_source_branch\": true,
          \"squash\": ${SQUASH},
          \"title\": \"${TITLE}\",
          \"assignee_id\":\"${ASSIGNEE_ID}\"
      }"
    - curl -X POST "${CI_API_V4_URL}/projects/${PROJECT_ID}/merge_requests" --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" --header "Content-Type:application/json" --data "${BODY}"
  stage: deploy
  extends: ".gitlab:merge-request"
  needs: []
  rules:
    - if: $GITLAB_TOKEN == null || $GITLAB_TOKEN == ""
      when: never
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH == $INTEGRATION_BRANCH"
      variables:
        TARGET_BRANCH: "$CI_DEFAULT_BRANCH"
        TITLE: 'Draft: next release'
        SQUASH: 'false'
    - if: "$CI_COMMIT_BRANCH =~ /^feat(?:ure)?\\/.*$/"
      variables:
        TARGET_BRANCH: "$INTEGRATION_BRANCH"
        TITLE: 'Draft: $CI_COMMIT_TITLE'
        SQUASH: 'true'
pages:
  image: node:22.17.0@sha256:0c0734eb7051babbb3e95cd74e684f940552b31472152edf0bb23e54ab44a0d7
  variables:
    RETYPE_VERSION: 3.7.0
  interruptible: true
  script:
    - npm exec -p retypeapp@$RETYPE_VERSION retype build
  artifacts:
    paths:
      - public
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
  stage: deploy
  extends: ".pages:retype"
  needs: []
  rules:
    - exists:
        - retype.yml
semantic-release:
  image: node:22.17.0@sha256:0c0734eb7051babbb3e95cd74e684f940552b31472152edf0bb23e54ab44a0d7
  variables:
    SEMANTIC_RELEASE_VERSION: 24.2.3
  script:
    - "[ -f package.json ] && npm ci"
    - npm exec semantic-release@${SEMANTIC_RELEASE_VERSION}
  cache:
    paths:
      - node_modules
    key: "$CI_JOB_NAME"
  stage: deploy
  extends: ".release:semantic-release"
  rules:
    - exists:
        - ".releaserc"
        - ".releaserc.{js,json,yml,yaml}"
        - release.config.js
check-config:
  stage: test
  image: ghcr.io/renovatebot/renovate:39.264.0@sha256:f2209c61a9c3c8c74ac58eecb5f15ec43651f1ba694aa33493ff2062b90ff4d3
  variables:
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
  script:
    - git ls-files '*.json' | sed -e '/^\..*/d' -e '/package\(-lock\)\?\.json/d' | xargs renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/gitlab-com/gl-infra/renovate/renovate-ci
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  LOG_LEVEL: info
  RENOVATE_GL_HOST: gitlab-com
  RENOVATE_HOST_RULES: |
    [
      {"hostType": "docker", "matchHost": "registry.ops.gitlab.net","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"},
      {"hostType": "helm", "matchHost": "https://registry.ops.gitlab.net/gitlab-com/gl-infra/charts","username": "${HELM_OPS_GITLAB_NET_USERNAME}","password": "${HELM_OPS_GITLAB_NET_PASSWORD}"}
    ]
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".id_tokens"
    - ".renovate"
    - ".renovate_token"
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_NOTIFY"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  environment:
    name: renovate
  tags:
    - gitlab-org
  timeout: 2h
stages:
  - ".pre"
  - build
  - test
  - deploy
  - notify
  - ".post"
".id_tokens":
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
".renovate_token":
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
maintain-renovate-projects:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
  extends:
    - ".id_tokens"
    - ".renovate_token"
  stage: build
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"
      when: manual
  allow_failure: true
  tags:
    - gitlab-org
  environment:
    name: readonly
    action: verify
  image: ruby:3.4.5
  script:
    - ruby scripts/maintain-soos-enabled-projects.rb
renovate:dry-run:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".id_tokens"
    - ".renovate"
    - ".renovate_token"
  stage: test
  needs: []
  resource_group: production
  environment:
    name: readonly
    action: verify
  tags:
    - gitlab-org
  timeout: 2h
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - config*.js
".runway":
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
renovate-runway:
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".runway"
    - renovate
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_NOTIFY"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  environment:
    name: renovate
  tags:
    - gitlab-org
  timeout: 2h
renovate-runway:dry-run:
  variables:
    RENOVATE_CONFIG_FILE: config-runway.js
    RENOVATE_ONBOARDING: 'true'
    RENOVATE_ONBOARDING_CONFIG:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --dry-run=full $RENOVATE_EXTRA_FLAGS
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    RENOVATE_GITHUB_COM_TOKEN:
      file: false
      vault: renovate/github/token@shared
    TERRAFORM__MODULE_GITLAB_COM_TOKEN:
      file: false
      vault: gitlab-com/terraform/modules-registry-ro/token@shared
    TERRAFORM__MODULE_OPS_GITLAB_NET_TOKEN:
      file: false
      vault: ops-gitlab-net/terraform/modules-registry-ro/token@shared
    HELM_OPS_GITLAB_NET_USERNAME:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/username@ci
    HELM_OPS_GITLAB_NET_PASSWORD:
      file: false
      vault: access_tokens/ops-gitlab-net/gitlab-com/gl-infra/_group_access_tokens/renovate-oci-readonly/token@ci
  extends:
    - ".runway"
    - renovate:dry-run
  stage: test
  needs: []
  resource_group: production
  environment:
    name: readonly
    action: verify
  tags:
    - gitlab-org
  timeout: 2h
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - config*.js
renovate:notify:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net
  secrets:
    RENOVATE_TOKEN:
      file: false
      vault: "${VAULT_SECRETS_PATH}/${CI_ENVIRONMENT_NAME}/${RENOVATE_GL_HOST}/token@ci"
    SLACK_WEBHOOK_URL:
      file: false
      vault: renovate/notifier/slack_webhook_url@shared
  extends:
    - ".id_tokens"
    - ".renovate_token"
  stage: deploy
  environment:
    name: readonly
    action: verify
  needs: []
  variables:
    PROJECTS_YAML: projects/${RENOVATE_GL_HOST}.yaml
  tags:
    - gitlab-org
  image: ruby:3.4.5
  script:
    - bundle install
    - ruby scripts/notify.rb
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENOVATE_NOTIFY
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - ".gitlab-ci.yml"
          - Gemfile
          - Gemfile.lock
          - projects/*
          - scripts/notify.rb
      when: manual
      allow_failure: true
[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/c1560/renovatebot
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:18Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mdisabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/gitlab-com/gl-infra/renovate/renovate-runner
[90m2025-07-31T09:09:18Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/rumble-o-bin/renovate-botz
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
renovate:
  variables:
    RENOVATE_TOKEN: "$GITLAB_TOKEN"
    GITHUB_COM_TOKEN: "$GITHUB_TOKEN"
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  image:
    name: renovate/renovate:latest
    entrypoint:
      - ''
  services:
    - docker:19.03.12-dind
  script:
    - renovate $(cat repositories.txt | xargs)
  only:
    - schedules
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/admfritzy/renovatebot
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jeremiahflaga/renovate-runner
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
image: docker:latest
services:
  - docker:dind
renovate:
  stage: build
  script:
    - docker run -e RENOVATE_TOKEN="$GITLAB_TOKEN" -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:19 $(cat repositories.txt | xargs)
  only:
    - main
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-issue-14602/renovate
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: DEBUG
  CI_RENOVATE_IMAGE: renovate/renovate:32.57.0@sha256:8e840684734c2aa2d66598314ef8d7f3e20db193dc7708cd7aa94bb6f3851f5f
  RENOVATE_EXTRA_FLAGS: "--onboarding=true renovate-issue-14602/update-this"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/**/*.json
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ravindar_reddy/renpvate-poc
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
image: node:10
variables:
  RENOVATE_TOKEN: "$GITLAB_TOKEN"
stages:
  - ".pre"
  - run
  - ".post"
run job:
  stage: run
  before_script:
    - npm install
  script:
    - npm run renovate
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renovate-internal-release-notes/renovate-bot
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
image: renovate/renovate:29.36.2-slim@sha256:50ae454845df6d925a763c32d641513adda2b67557c90fc41a83296585094f05
services:
  - docker:20.10.11-dind@sha256:79d0c6e997920e71e96571ef434defcca1364d693d5b937232decf1ee7524a9b
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/**
renovate:
  stage: deploy
  resource_group: production
  interruptible: true
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
    - renovate
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:19Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ethima/dependency-management
[90m2025-07-31T09:09:19Z[0m [32mINF[0m [1m
".Workflows":
  Maintenance Branch (Push):
    if: |
      $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
  Manual:
    if: "$CI_PIPELINE_SOURCE == 'web'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Manual"
  Merge Request:
    if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
  Prerelease:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
  Prerelease Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
        $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
  Primary Release Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
        (
          $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        )
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
  Release:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Release"
  Schedule:
    if: "$CI_PIPELINE_SOURCE == 'schedule'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
  workflow:
    name: "${PIPELINE_NAME}"
variables:
  PROCESS_NAME: Dependency Management Process
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  GITLAB_CI_STAGES_INCLUDED: 'true'
  GIT_AUTHOR_EMAIL: "${GIT_COMMITTER_EMAIL}"
  GIT_AUTHOR_NAME: "${GIT_COMMITTER_NAME}"
  GIT_COMMITTER_EMAIL: bot-noreply@ethima.org
  GIT_COMMITTER_NAME: Ethima Bot
  DEPENDENCY_MANAGEMENT_CONTAINER_IMAGE:
    description: The container image to use to run the dependency manager
    value: ghcr.io/renovatebot/renovate:41.38.2@sha256:d8514d3124cbcfbf79b2b5014e59add4b87766ba2cb90e84ae1cc4278679903e
  DEPENDENCY_MANAGEMENT_ASSIGNEE:
    description: The login of the user who should be assigned to dependency-related merge requests.
    value: "${GITLAB_USER_LOGIN}"
  DEPENDENCY_MANAGEMENT_AUTODISCOVERY:
    description: |
      A comma separated list of namespaces to automatically discover projects
      in. Supports minimatch glob-style or regular expression patterns. Leave
      empty to disable autodiscovery, or set to `**` to manage dependencies for
      all projects the process has access to. Note that the latter may end up
      being a security risk when the user the process runs as is granted access
      to projects it should not have access to, e.g. wasting resources.

      This setting overrides the projects configured through
      `DEPENDENCY_MANAGEMENT_PROJECTS`, a warning will be generated for
      configured projects that are not included in this list.
    value: ''
  DEPENDENCY_MANAGEMENT_CONFIGURATION:
    description: The shareable configuration preset to use when managing dependencies.
    value: gitlab>ethima/dependency-management#v5.2.0
  DEPENDENCY_MANAGEMENT_PROJECTS:
    description: A space separated list of project paths to manage dependencies for.
    value: "${CI_PROJECT_PATH}"
  ENABLE_DEPENDENCY_MANAGEMENT:
    description: Whether to add the `Manage Dependencies` job to the pipeline.
    options:
      - 'false'
      - 'true'
    value: 'false'
  ENABLE_COMMIT_MESSAGE_LINTING:
    description: Whether to add the `Lint Commit Messages` job to the pipeline.
    options:
      - 'false'
      - 'true'
    value: 'false'
  ENABLE_SEMANTIC_RELEASE:
    description: Whether to add the `Semantic Release` job to the pipeline.
    options:
      - 'false'
      - 'true'
    value: 'false'
  BRANCH_PREFIX_SEPARATOR: "-"
  MAINTENANCE_BRANCH_PREFIX: release
  PRERELEASE_BRANCH_PREFIX: next
  PRIMARY_RELEASE_BRANCH: "${CI_DEFAULT_BRANCH}"
  ENABLE_CODE_FORMATTING_PRETTIER:
    description: Whether to add the `Verify Code Formatting (Prettier)` job to the pipeline.
    options:
      - 'false'
      - 'true'
    value: 'false'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: Maintenance
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
stages:
  - ".pre"
  - Verify
  - Build
  - Test
  - Publish
  - Maintenance
  - ".post"
Manage Dependencies:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: Maintenance
  resource_group: production
  rules:
    - if: "$ENABLE_DEPENDENCY_MANAGEMENT == 'true'"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  before_script:
    - |
      if [ -n "${DEPENDENCY_MANAGEMENT_AUTODISCOVERY}" ]; then
        export RENOVATE_AUTODISCOVER="true"
        export RENOVATE_AUTODISCOVER_FILTER="${DEPENDENCY_MANAGEMENT_AUTODISCOVERY}"
      fi
  needs: []
  variables:
    CI_RENOVATE_IMAGE: "${DEPENDENCY_MANAGEMENT_CONTAINER_IMAGE}"
    ETHIMA_DEPENDENCY_MANAGEMENT_GITHUB_TOKEN: "${ETHIMA_GITHUB_TOKEN}"
    ETHIMA_DEPENDENCY_MANAGEMENT_GITLAB_TOKEN: "${ETHIMA_GITLAB_TOKEN}"
    RENOVATE_ASSIGNEES: "${DEPENDENCY_MANAGEMENT_ASSIGNEE}"
    RENOVATE_EXTENDS: "${DEPENDENCY_MANAGEMENT_CONFIGURATION}"
    RENOVATE_EXTRA_FLAGS: "${DEPENDENCY_MANAGEMENT_PROJECTS}"
    RENOVATE_GITHUB_COM_TOKEN: "${ETHIMA_DEPENDENCY_MANAGEMENT_GITHUB_TOKEN}"
    RENOVATE_ONBOARDING: 'false'
    RENOVATE_REQUIRE_CONFIG: optional
    RENOVATE_TOKEN: "${ETHIMA_DEPENDENCY_MANAGEMENT_GITLAB_TOKEN}"
".Dependency Management Process":
  Maintenance Branch (Push):
    if: |
      $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
  Manual:
    if: "$CI_PIPELINE_SOURCE == 'web'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Manual"
  Merge Request:
    if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
  Prerelease:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
  Prerelease Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
        $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
  Primary Release Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
        (
          $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        )
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
  Release:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Release"
  Schedule:
    if: "$CI_PIPELINE_SOURCE == 'schedule'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
      ENABLE_DEPENDENCY_MANAGEMENT: 'true'
      DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  workflow:
    name: "${PIPELINE_NAME}"
    rules:
      - if: "$CI_PIPELINE_SOURCE == 'web'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Manual"
      - if: "$CI_PIPELINE_SOURCE == 'schedule'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
          ENABLE_DEPENDENCY_MANAGEMENT: 'true'
          DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  extends: ".Workflows"
workflow:
  rules:
    - if: |
        $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
        $CI_PIPELINE_SOURCE == 'push'
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
        ENABLE_SEMANTIC_RELEASE: 'true'
    - if: "$CI_PIPELINE_SOURCE == 'web'"
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Manual"
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
        ENABLE_COMMIT_MESSAGE_LINTING: 'true'
        ENABLE_CODE_FORMATTING_PRETTIER: 'true'
    - if: |
        (
          $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
          $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
        ) &&
        $CI_PIPELINE_SOURCE == 'push'
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
        ENABLE_SEMANTIC_RELEASE: 'true'
    - if: |
        (
          $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
          (
            $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
            $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          )
        ) &&
        $CI_PIPELINE_SOURCE == 'push'
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
        ENABLE_SEMANTIC_RELEASE: 'true'
    - if: "$CI_PIPELINE_SOURCE == 'schedule'"
      variables:
        PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
        ENABLE_DEPENDENCY_MANAGEMENT: 'true'
        DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  name: "${PIPELINE_NAME}"
Lint Commit Messages:
  image: node:22.17.0-alpine@sha256:5340cbfc2df14331ab021555fdd9f83f072ce811488e705b0e736b11adeec4bb
  needs: []
  rules:
    - if: "$ENABLE_COMMIT_MESSAGE_LINTING == 'true'"
  script:
    - |
      if [ ! -f "${COMMITLINT_CONFIGURATION}" ]; then
        # The `%@*` variable expansion strips a `@...` suffix, e.g. the
        # version, from the variable
        echo >"${COMMITLINT_CONFIGURATION}" "export default {
          extends: \"${COMMITLINT_DEFAULT_SHAREABLE_CONFIGURATION%@*}\"
        }"

        npm install --no-save "${COMMITLINT_DEFAULT_SHAREABLE_CONFIGURATION}"
      fi
    - |
      npx --package="@commitlint/cli@${COMMITLINT_VERSION}" commitlint \
        --config "${COMMITLINT_CONFIGURATION}" \
        --from "${COMMITLINT_FROM}" \
        --to "${COMMITLINT_TO}" \
        --strict
  stage: Verify
  variables:
    COMMITLINT_CONFIGURATION: commitlint.config.js
    COMMITLINT_DEFAULT_SHAREABLE_CONFIGURATION: "@ethima/commitlint-config@2.1.3"
    COMMITLINT_FROM: "${CI_MERGE_REQUEST_DIFF_BASE_SHA:-${CI_COMMIT_BEFORE_SHA}}"
    COMMITLINT_TO: "${CI_COMMIT_SHA}"
    COMMITLINT_VERSION: 19.8.1
Semantic Release:
  image: node:22.17.0-alpine@sha256:5340cbfc2df14331ab021555fdd9f83f072ce811488e705b0e736b11adeec4bb
  needs: []
  rules:
    - if: "$CI_COMMIT_TITLE =~ /^(build|chore)\\(release\\):/"
      when: never
    - if: "$ENABLE_SEMANTIC_RELEASE == 'true'"
  script:
    - apk add --no-cache git
    - |
      if [ ! -e "${SEMANTIC_RELEASE_CONFIGURATION}" ]; then
        npm install --no-save "${SEMANTIC_RELEASE_CONFIGURATION}"
      fi
    - npx "semantic-release@${SEMANTIC_RELEASE_VERSION}" --extends="${SEMANTIC_RELEASE_CONFIGURATION%@*}"
  stage: Publish
  variables:
    ETHIMA_SEMANTIC_RELEASE_GITLAB_TOKEN: "${ETHIMA_GITLAB_TOKEN}"
    ETHIMA_SEMANTIC_RELEASE_NPM_TOKEN: "${ETHIMA_NPM_TOKEN}"
    GITLAB_TOKEN: "${ETHIMA_SEMANTIC_RELEASE_GITLAB_TOKEN}"
    NPM_TOKEN: "${ETHIMA_SEMANTIC_RELEASE_NPM_TOKEN}"
    SEMANTIC_RELEASE_CONFIGURATION: "@ethima/semantic-release-configuration@10.0.2"
    SEMANTIC_RELEASE_VERSION: 24.2.6
".Semantic Release Process":
  Maintenance Branch (Push):
    if: |
      $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Manual:
    if: "$CI_PIPELINE_SOURCE == 'web'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Manual"
  Merge Request:
    if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
      ENABLE_COMMIT_MESSAGE_LINTING: 'true'
  Prerelease:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
  Prerelease Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
        $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Primary Release Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
        (
          $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        )
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Release:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Release"
  Schedule:
    if: "$CI_PIPELINE_SOURCE == 'schedule'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
  workflow:
  extends: ".Workflows"
Verify Code Formatting (Prettier):
  image: node:22.17.0-alpine@sha256:5340cbfc2df14331ab021555fdd9f83f072ce811488e705b0e736b11adeec4bb
  needs: []
  rules:
    - if: "$ENABLE_CODE_FORMATTING_PRETTIER == 'true'"
  script:
    - |
      # Unless the default `.prettierignore` file is available in the
      # repository, or if an alternative configuration has been made available
      # as a "file" variable, use a sensible default
      if [ ! -f "${PRETTIER_IGNORE}" ]; then
        # This job is often used in conjunction with the
        # ethima/semantic-release> project. The `@semantic-release/changelog`
        # plugin generates Markdown that does not adhere to Prettier's
        # standards. To prevent unnecessary errors, it is ignored by default
        echo >"${PRETTIER_IGNORE}" "CHANGELOG.md"
      fi
    - |
      # The same holds for configuration options. Note that this job only
      # supports configuration stored in `.prettierrc` by default. If the
      # configuration is stored in a different file, the `PRETTIER_RC` variable
      # should be configured accordingly
      if [ ! -f "${PRETTIER_RC}" ]; then
        echo >"${PRETTIER_RC}" "{}"
      fi
    - |
      npx --package="prettier@${PRETTIER_VERSION}" prettier \
        --check \
        --config "${PRETTIER_RC}" \
        --ignore-path="${PRETTIER_IGNORE}" \
        .
  stage: Verify
  variables:
    PRETTIER_IGNORE: ".prettierignore"
    PRETTIER_RC: ".prettierrc"
    PRETTIER_VERSION: 3.6.2
".GitLab CI Process":
  Maintenance Branch (Push):
    if: |
      $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Manual:
    if: "$CI_PIPELINE_SOURCE == 'web'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Manual"
  Merge Request:
    if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
      ENABLE_COMMIT_MESSAGE_LINTING: 'true'
      ENABLE_CODE_FORMATTING_PRETTIER: 'true'
  Prerelease:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
  Prerelease Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
        $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Primary Release Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
        (
          $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        )
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Release:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Release"
  Schedule:
    if: "$CI_PIPELINE_SOURCE == 'schedule'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
      ENABLE_DEPENDENCY_MANAGEMENT: 'true'
      DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  workflow:
    rules:
      - if: |
          $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: "$CI_PIPELINE_SOURCE == 'web'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Manual"
      - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
          ENABLE_COMMIT_MESSAGE_LINTING: 'true'
          ENABLE_CODE_FORMATTING_PRETTIER: 'true'
      - if: |
          (
            $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
            $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
          ) &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: |
          (
            $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
            (
              $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
              $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
            )
          ) &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: |
          $CI_PIPELINE_SOURCE == 'push' &&
          $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
      - if: |
          $CI_PIPELINE_SOURCE == 'push' &&
          $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Release"
      - if: "$CI_PIPELINE_SOURCE == 'schedule'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
          ENABLE_DEPENDENCY_MANAGEMENT: 'true'
          DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  extends:
    - ".Dependency Management Process"
    - ".Semantic Release Process"
".Dependency Management Operations":
  Maintenance Branch (Push):
    if: |
      $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Manual:
    if: "$CI_PIPELINE_SOURCE == 'web'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Manual"
  Merge Request:
    if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
      ENABLE_COMMIT_MESSAGE_LINTING: 'true'
      ENABLE_CODE_FORMATTING_PRETTIER: 'true'
  Prerelease:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})-(?P<prerelease>(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*))(\.(([^0][\p{L}\d-]*)|(0(\d*[\p{L}-]+)*)))*)(?P<buildIdentifier>\+[\p{L}\d-]+(\.[\p{L}\d-]+)*)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease"
  Prerelease Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
        $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Primary Release Branch (Push):
    if: |
      (
        $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
        (
          $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        )
      ) &&
      $CI_PIPELINE_SOURCE == 'push'
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
      ENABLE_SEMANTIC_RELEASE: 'true'
  Release:
    if: |
      $CI_PIPELINE_SOURCE == 'push' &&
      $CI_COMMIT_TAG =~ /^(?P<version>v\d+(\.\d+){2})(?P<buildIdentifier>\+([\p{L}\d-]+\.?)+)?$/
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Release"
  Schedule:
    if: "$CI_PIPELINE_SOURCE == 'schedule'"
    variables:
      PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
      ENABLE_DEPENDENCY_MANAGEMENT: 'true'
      DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
  workflow:
    rules:
      - if: |
          $CI_COMMIT_BRANCH =~ /^$MAINTENANCE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/ &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Maintenance Release Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: "$CI_PIPELINE_SOURCE == 'web'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Manual"
      - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Merge Request"
          ENABLE_COMMIT_MESSAGE_LINTING: 'true'
          ENABLE_CODE_FORMATTING_PRETTIER: 'true'
      - if: |
          (
            $CI_COMMIT_BRANCH == $PRERELEASE_BRANCH_PREFIX ||
            $CI_COMMIT_BRANCH =~ /^$PRERELEASE_BRANCH_PREFIX$BRANCH_PREFIX_SEPARATOR.+/
          ) &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Prerelease Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: |
          (
            $CI_COMMIT_BRANCH == $PRIMARY_RELEASE_BRANCH ||
            (
              $PRIMARY_RELEASE_BRANCH == "${CI_DEFAULT_BRANCH}" &&
              $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
            )
          ) &&
          $CI_PIPELINE_SOURCE == 'push'
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Primary Release Branch (Push)"
          ENABLE_SEMANTIC_RELEASE: 'true'
      - if: "$CI_PIPELINE_SOURCE == 'schedule'"
        variables:
          PIPELINE_NAME: "${PROCESS_NAME} - Schedule"
          ENABLE_DEPENDENCY_MANAGEMENT: 'true'
          DEPENDENCY_MANAGEMENT_AUTODISCOVERY: ethima/*
    name: "${PIPELINE_NAME}"
  extends:
    - ".GitLab CI Process"
    - ".Dependency Management Process"
[0m
[90m2025-07-31T09:09:20Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/empaia/integration/ci-renovate
[90m2025-07-31T09:09:20Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39.140.1@sha256:6f25520b552141e28f1aae862e0d96f9c193e3b6956b358e5da072e283b3c95d
  RENOVATE_TOKEN: "$GITLAB_ACCESS_TOKEN"
  GITHUB_COM_TOKEN: "$GITHUB_ACCESS_TOKEN"
  RENOVATE_ONBOARDING: 'true'
  RENOVATE_ONBOARDING_BRANCH: renovate-configure
  RENOVATE_BRANCH_PREFIX: renovate-
  RENOVATE_GROUP_NAME: all
  RENOVATE_DIGEST: 'true'
  RENOVATE_PIN_DIGESTS: 'true'
  RENOVATE_BUMP_VERSION: patch
  RENOVATE_SEPARATE_MAJOR_MINOR: 'false'
  RENOVATE_STABILITY_DAYS: '14'
  RENOVATE_MINIMUM_RELEASE_AGE: '14'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-all:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: deploy
  resource_group: production
  rules:
    - if: $RENOVATE_ALL_REPOSITORIES == "true"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: " empaia/integration/app-service-performance-test empaia/integration/ci-examples empaia/integration/data-management-client empaia/integration/py-ead-validation empaia/services/annotation-service empaia/services/app-service empaia/services/clinical-data-service empaia/services/examination-service empaia/services/id-mapper-service empaia/services/job-execution-service empaia/services/job-service empaia/services/loadtus-service empaia/services/medical-data-service empaia/services/shout-out-service empaia/services/template-service empaia/services/wsi-service empaia/services/workbench-daemon empaia/services/workbench-service empaia/services/event-service empaia/services/marketplace-service empaia/services/auth-service empaia/services/minio-proxy empaia/services/harpy-service empaia/service-mocks/aaa-service-mock empaia/service-mocks/marketplace-service-mock empaia/integration/frontend-test-workspace empaia/integration/portal-workspace "
renovate-repositoy:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image: "${CI_RENOVATE_IMAGE}"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: renovate
  stage: deploy
  resource_group: production
  rules:
    - if: "$RENOVATE_REPOSITORY =~ /^empaia/"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  variables:
    RENOVATE_EXTRA_FLAGS: "$RENOVATE_REPOSITORY"
[0m
[90m2025-07-31T09:09:21Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dockerfiles6/renovate-bot
[90m2025-07-31T09:09:21Z[0m [32mINF[0m [1m
services:
  - docker:dind
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  stage: renovate
  image: renovate/renovate:32.187.0-slim
  tags:
    - myrunner
  script:
    - export DEPLOY_USER=${DEPLOY_USER}
    - export DEPLOY_TOKEN=${DEPLOY_TOKEN}
    - renovate
[0m
[90m2025-07-31T09:09:21Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/mqhabzda/renovate-gradle-issue
[90m2025-07-31T09:09:21Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  image: renovate/renovate:29.30.1-slim@sha256:1c693bfa8f008304535dabeba4db73a184b1f709f5f4316c0f26279c2e8bd98b
  services:
    - docker:20.10.11-dind@sha256:79d0c6e997920e71e96571ef434defcca1364d693d5b937232decf1ee7524a9b
  variables:
    RENOVATE_TOKEN: "$GITLAB_ACCESS_TOKEN"
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_ENDPOINT: "$CI_API_V4_URL"
    RENOVATE_PLATFORM: gitlab
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
    RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
    RENOVATE_REPOSITORY_CACHE: 'false'
    RENOVATE_REQUIRE_CONFIG: 'false'
    RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
    RENOVATE_LOG_FILE: renovate-log.ndjson
    RENOVATE_LOG_FILE_LEVEL: debug
    RENOVATE_EXTRA_FLAGS: mqhabzda/Renovate-gradle-issue
  stage: renovate
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:21Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m7
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ceboola/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rguichard1/renovate-helm
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/senzoWonderlabz/renovatepoc
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/amuttsch_cc/renovate-yarn-husky
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/utopia-planitia/test-infra/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tpraxl/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/utopia-planitia/test-infra/renovate-bot-image
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/poulson.bill/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/neuland1/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sananibrahimoff/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-org/frontend/renovate-fork
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bytestream/renovate-npm
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bytestream/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/twarner-sofi-test/subgroup-1/renovate-test-3
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hvalle/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/twarner-sofi/renovate-test-2
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/twarner-sofi/renovate-bug-repro
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deveth0/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/deveth0/renovate-runner-demo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ATemplates/renovate-presets
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/calve/test-renovate-python
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/techisfun/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ksydorova/test-renovate-tmf
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nonfood-renovate-bot/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/clanlord/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/archive5691620/renovate-docker-dind-gitlab-ci
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ha389156/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/handyhomes/bathroom-renovations-north-shore-nz
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lazy-val/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/shnipa/test-renovate2
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lazy-val/renovate-test-repo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/shnipa/test-renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mbrodala/renovate-demo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/songyuqing-cloud/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nhumblot/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rommon/container-renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MindTooth/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeansthrone/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hitch-bot/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dlouzan/renovate-repro-10808
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/MindTooth/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kubitus-project/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/michal-bryxi/project/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nfm/renovate-gemfile-lock-bug
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/wiget/renovate-push-rule-issue
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vito-templates/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vgropp/renovate-spring-gradle-sample
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gperdomor/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/monochromata-de/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nerzhuls-packages/tools/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/commonground/core/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Eclipter/test-renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kennethsohyq/mischelpprojects/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sw-tracker/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ssoper-usgs/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/DerAstronaut/renovate-test-repo-docker
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lucaskoontz/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/lucaskoontz/renovate-go-gitlab-repro
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ajoux.ac/renovate-helm-descheduler
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vitoyucepi/nginx-flv-renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/blackarctic/clear-required-approvals
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/delta10/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dsbert/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sandra.tatarevicova2/renovate-test-target-repo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jeremiehuchet/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/symvulus/bots/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sandra.tatarevicova2/renovate-test-source-repo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vito-bot/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/whitesourcesoftware/renovate-test
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/solidnerd/renovate-docker-image
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mh.saadatfar/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/dzoonix/renovate-go-packages
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pheidotting/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jbb-group/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tintok/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/benoit.maggi/demo-renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/AKorezin-renovate-bot/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-demo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/slagit/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kevincox/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/koober-sas/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jonathan.wong.roxorgaming/gitlab-renovate-test
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/viceice/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/almg-walsh/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rarkins/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nm-spherity/renovate-docker-app
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-configuration
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/yaook/renovate-bot
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/andrewguest/renovatebot-presets
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/solidnerd/renovate-docker-app
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kevincox/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/nejc/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renestalder-hq/infrastructure/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hadi.nazaripoor/renovate
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/renovate-bot/renovate-runner
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-repo
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-practice
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/koipublic/renovate-config
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m"jobs:renovate:dry-run may allow multiple pipelines to run for a single action due to `rules:when` clause with no `workflow:rules` - read more: https://docs.gitlab.com/ee/ci/jobs/job_troubleshooting.html#job-may-allow-multiple-pipelines-to-run-for-a-single-action-warning"
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:36Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dzoonix/renovate-go-packages
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
".renovate:base":
  stage: renovate
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    LOG_LEVEL: debug
    GITHUB_COM_TOKEN: "${GITHUB_COM_TOKEN}"
    PROJECT_PATH: "${CI_PROJECT_PATH}"
    ENABLED_MANAGERS: ''
    LABELS: ''
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'renovate --platform="gitlab" --endpoint="${CI_API_V4_URL}" --git-author="${RENOVATE_GIT_AUTHOR}" --dry-run="${RENOVATE_DRY_RUN}" --labels="${LABELS}" --token="${RENOVATE_TOKEN}" --enabled-managers="$ENABLED_MANAGERS" --prune-stale-branches="true" --onboarding="false" --allow-post-upgrade-command-templating="true" "${PROJECT_PATH}"

'
  only:
    refs:
      - master
  when: manual
renovate:backend:
  stage: renovate
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    LOG_LEVEL: debug
    GITHUB_COM_TOKEN: "${GITHUB_COM_TOKEN}"
    PROJECT_PATH: "${CI_PROJECT_PATH}"
    ENABLED_MANAGERS: gomod
    LABELS: renovate, go
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'renovate --platform="gitlab" --endpoint="${CI_API_V4_URL}" --git-author="${RENOVATE_GIT_AUTHOR}" --dry-run="${RENOVATE_DRY_RUN}" --labels="${LABELS}" --token="${RENOVATE_TOKEN}" --enabled-managers="$ENABLED_MANAGERS" --prune-stale-branches="true" --onboarding="false" --allow-post-upgrade-command-templating="true" "${PROJECT_PATH}"

'
  only:
    refs:
      - master
  when: manual
  extends:
    - ".renovate:base"
[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/sananibrahimoff/renovate-bot
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/amuttsch_cc/renovate-yarn-husky
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
Renovate:
  image: renovate/renovate:24.104.1-slim
  stage: renovate
  services:
    - docker:20.10.5-dind
  variables:
    CHILD_CONCURRENCY: 1
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
    DOCKER_HOST: tcp://docker:2375
    RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
    RENOVATE_CONFIG_FILE: config.js
    RENOVATE_X_HARD_EXIT: 'true'
    LOG_LEVEL: debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  script:
    - renovate
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/nonfood-renovate-bot/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  DOCKER_HOST: tcp://docker:2375
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:24.77.3-slim@sha256:e9f615a2c4fc3f49ca042a656512eb9570d45288b578d22d73d2e889b3eafa27
services:
  - docker:20.10.5-dind@sha256:551525fd35e48d04f8b44f23db5af2b7db6251f92698d77a857eccacfa2724fe
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tintok/renovate-bot
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - scan
  - ".post"
renovate:
  stage: scan
  variables:
    DOCKER_USERNAME: "$CI_REGISTRY_USER"
    DOCKER_PASSWORD: "$CI_REGISTRY_PASSWORD"
  image: renovate/renovate:23.99
  before_script:
    - ln -sF $CI_PROJECT_DIR/config.js /usr/src/app/
  script:
    - node /usr/src/app/dist/renovate.js
  only:
    - schedules
    - master
[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/jeansthrone/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
    - pushes
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.56.1-slim@sha256:f2bc4665bad73537d93940e2092adf12e8384b1b7dea0e5dfffff3e3e04c88e0
services:
  - docker:20.10.7-dind@sha256:4e1e22f471afc7ed5e024127396f56db392c1b6fc81fc0c05c0e072fb51909fe
stages:
  - ".pre"
  - tmo
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
    - pushes
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
release:
  image: renovate/node:14.17.3@sha256:90a7cadac4256e5aed66816c3f860ab34527d4abdd69cbba693f464acebae2fa
  stage: release
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  only:
    - main
[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ha389156/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
    - pushes
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.56.6-slim@sha256:8f88f99ce3b1a42a0fe548034db47cb4ac8cabd62e988aa84e6ad802413c922c
services:
  - docker:20.10.7-dind@sha256:4e1e22f471afc7ed5e024127396f56db392c1b6fc81fc0c05c0e072fb51909fe
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
    - pushes
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
release:
  image: renovate/node:14.17.3@sha256:47dc443025697f72bdadca833321bdc66cd22110c2a32d4148bb170d3f7af2f8
  stage: release
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  only:
    - feature/FBEASS-12652_Renovate
deploy-demo:
  stage: test
  image: docker:19.03.0-git
  script:
    - apk update
    - apk add bash
    - apk add curl
    - apk add --no-cache jq
    - apk upgrade
    - chmod +rx test.sh
    - "./cw-swagger-update-pit02.sh"
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/utopia-planitia/test-infra/renovate-bot
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bytestream/renovate-bot
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - updates
  - ".post"
default:
  interruptible: true
variables:
  LOG_FILE_LEVEL: debug
  LOG_FILE: renovate-log.ndjson
  LOG_LEVEL: warn
".template:renovate":
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:a1ec710ab0c81f0114c69b270f8f39caef329cad3ab4a54507e2eee4ba1aba88
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
renovate bot:
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:a1ec710ab0c81f0114c69b270f8f39caef329cad3ab4a54507e2eee4ba1aba88
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
  extends: ".template:renovate"
  only:
    - main
dry run:
  stage: updates
  image: ghcr.io/utopia-planitia/renovate-bot-extended-image:latest@sha256:a1ec710ab0c81f0114c69b270f8f39caef329cad3ab4a54507e2eee4ba1aba88
  script:
    - renovate
    - ERRORS="$(jq -r 'select(.level == 50)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${ERRORS:?}" -gt 0; then printf '%s error(s)! Please check the logs.\n' "${ERRORS:?}" >&2; fi
    - WARNINGS="$(jq -r 'select(.level == 40)' "${LOG_FILE:?}" | jq --slurp '. | length')"
    - if test "${WARNINGS:?}" -gt 0; then printf '%s warning(s)! Please check the logs.\n' "${WARNINGS:?}" >&2; fi
    - if test "${ERRORS:?}" -gt 0 || test "${WARNINGS:?}" -gt 0; then exit 1; fi
  artifacts:
    access: developer
    when: always
    paths:
      - renovate-log.ndjson
    expire_in: 7 days
  extends: ".template:renovate"
  variables:
    RENOVATE_DRY_RUN: full
  except:
    - main
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/poulson.bill/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:24.98.2-slim@sha256:3c53607ad383a2fbe4fcc40c824e82377617686f4e47cc311ac9f9112db8d0ae
services:
  - docker:20.10.5-dind@sha256:1f37f241857fba20adf6a1c0ccdcfeccd832a4e6d591a8f1d1d65b821b8891f0
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/kubitus-project/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Kubitus Bot <kubitus.bot@gmail.com>
  RENOVATE_AUTODISCOVER: 'true'
  RENOVATE_AUTODISCOVER_NAMESPACES: kubitus-project
  RENOVATE_AUTODISCOVER_FILTER:
    description: Renovate autodiscover filter
    value: kubitus-project/**
    options:
      - kubitus-project/**
      - kubitus-project/renovate-config
      - kubitus-project/renovate-runner
      - kubitus-project/grafana-org-operator
      - kubitus-project/external-helm-charts/**
      - kubitus-project/kubitus-images
      - kubitus-project/apps/common
      - kubitus-project/apps/**
      - kubitus-project/apps/root-app
      - kubitus-project/kubitus-installer
  RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS: '["^/builds/kubitus-project/renovate-runner/kubitus-renovate-post-upgrade$"]'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/twarner-sofi-test/subgroup-1/renovate-test-3
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/dlouzan/renovate-repro-10808
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  RENOVATE_EXTRA_FLAGS: dlouzan/renovate-repro-10808
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.53.4@sha256:d1fcd711677dcb08b3020ea535b4da14e9b77a4a9acd03924945fc08eb461ea0
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/tpraxl/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:24.103.0-slim@sha256:c94344bef28828f03b437bd78f82d307bfefe8ab81bdc1ab745857e1c9086790
services:
  - docker:20.10.5-dind@sha256:e4ecd4e9ad5140d584669451b05e406d8cf7603e51972b862178ad93c38b2b08
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/utopia-planitia/test-infra/renovate-bot-image
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/koober-sas/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  LOG_LEVEL: debug
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  DOCKER_HOST: tcp://docker:2375
cache:
  key: "${CI_COMMIT_REF_SLUG}-renovate"
  paths:
    - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
image: renovate/renovate:23.94.1-slim
services:
  - docker:19.03.14-dind
renovate:dry-run:
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
  tags:
    - fargate-renovate
[0m
[90m2025-07-31T09:09:37Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  DOCKER_HOST: tcp://docker:2375
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:24.67.5-slim@sha256:3250eab9a7efb8430d3a0f06995479258f4a7fe13886fd3d9de7cf2a33627297
services:
  - docker:20.10.3-dind@sha256:43df6c4dbc32ccb306412fcce5b1443310cf9d91507409d7258cea1c9ee731f4
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ssoper-usgs/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.36.0-slim@sha256:e123c637504798484e07d2ad9bb4c70c681efc0dd0137a0abd3b61098c6ca09c
services:
  - docker:20.10.7-dind@sha256:89867815852358a38f503287ed126999c6a943845f8b3e6b89f1111f497a9f23
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
renovate:dry-run:
  only:
    - branches@renovate-bot/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
release:
  image: renovate/node:14.17.0@sha256:63fc912f3ede0d245b54ac8e6a057bba37dbc97177d18398d5e911262cb4b607
  stage: release
  before_script:
    - npm ci
  script:
    - npx --no-install semantic-release
  only:
    - main
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-repo
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
build:
  script:
    - echo hello world
  except:
    - schedules
".renovate":
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    RENOVATE_LOG_LEVEL: info
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'node /usr/src/app/dist/renovate.js --platform "gitlab" --endpoint "${CI_API_V4_URL}" --git-author "${RENOVATE_GIT_AUTHOR}" --dry-run "${RENOVATE_DRY_RUN}" --log-level "${RENOVATE_LOG_LEVEL}" "${CI_PROJECT_PATH}"

'
  only:
    - master
    - schedules
Renovate:
  variables:
    RENOVATE_GIT_AUTHOR: "${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"
    RENOVATE_DRY_RUN: 'false'
    RENOVATE_LOG_LEVEL: info
  image:
    name: renovate/renovate
    entrypoint:
      - ''
  script:
    - 'node /usr/src/app/dist/renovate.js --platform "gitlab" --endpoint "${CI_API_V4_URL}" --git-author "${RENOVATE_GIT_AUTHOR}" --dry-run "${RENOVATE_DRY_RUN}" --log-level "${RENOVATE_LOG_LEVEL}" "${CI_PROJECT_PATH}"

'
  only:
    - master
    - schedules
  extends: ".renovate"
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/techisfun/renovate-runner
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'true'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: '1'
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:24.78.4-slim@sha256:cea553e289ba4d3330ae700f6131a22e18547dbbd0b85eba4ff1f57be0387144
services:
  - docker:20.10.5-dind@sha256:551525fd35e48d04f8b44f23db5af2b7db6251f92698d77a857eccacfa2724fe
renovate:dry-run:
  only:
    - branches@techisfun/renovate-runner
  except:
    - schedules
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
renovate:run:
  only:
    - branches@techisfun/renovate-runner
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:37Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/nerzhuls-packages/tools/renovate
[90m2025-07-31T09:09:37Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  RENOVATE_REQUIRE_CONFIG: required
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: info
  CI_RENOVATE_IMAGE: renovate/renovate:34.110.0@sha256:4bfe9a463db662d54dadc44f83ca004c08f71b353c830037822a0e882f1c16b5
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true"
  RENOVATE_CONFIG_FILE: "./config.json"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
renovate:
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH !~ /^renovate.+$/
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH !~ /^renovate.+$/
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: "${CI_RENOVATE_IMAGE}"
[0m
[90m2025-07-31T09:09:38Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ATemplates/renovate-presets
[90m2025-07-31T09:09:38Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
".lint_template":
  stage: lint
  interruptible: true
".ansible_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: registry.gitlab.com/akontainers/ansible-linters:latest@sha256:ffb2892bc04918a8278abc7cb6bf8e7f18edd9fb6475fee7c5bca2ae2a38f682
  script:
    - lint-ansible-role.sh "${ROLE_PATH}"
  variables:
    ROLE_PATH: "./"
".apkbuild_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: registry.gitlab.com/akontainers/apkbuild-tools:latest@sha256:22635b7ee4c4c051c0abc661faadaa7a94c90f92195ef3bfed742c93ecc39248
  script:
    - lint-apkbuild "${APKBUILD_PATH}"
  variables:
    APKBUILD_PATH: "./APKBUILD"
".apkbuild_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".apkbuild_lint_template"
  image: registry.gitlab.com/akontainers/apkbuild-tools:latest@sha256:22635b7ee4c4c051c0abc661faadaa7a94c90f92195ef3bfed742c93ecc39248
  script:
    - apkbuild-find-and-exec lint "${SEARCH_BASE}"
  variables:
    APKBUILD_PATH: "./APKBUILD"
    SEARCH_BASE: "./"
".docker_compose_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: docker:28.3.3-cli@sha256:d87c674b7f01043207f1badc6e86e1f8bc33a90981c2f31f3e0f57c1ecb0c5cc
  script:
    - docker compose config --no-interpolate -q
".hadolint_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  script:
    - hadolint "${DOCKERFILE}"
  variables:
    DOCKERFILE: Dockerfile
".hadolint_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".hadolint_lint_template"
  image: hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
  script:
    - find "$SEARCH_BASE" \( -name 'Dockerfile' -o -name '*.Dockerfile' \) -type f -print0 | xargs -0 hadolint
  variables:
    DOCKERFILE: Dockerfile
    SEARCH_BASE: "./"
".renovate_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - renovate-config-validator
".renovate_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".renovate_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - find "${SEARCH_BASE}" -name '*renovate.json' -type f -print0 | xargs -0 -I {} sh -c 'export RENOVATE_CONFIG_FILE={}; renovate-config-validator'
  variables:
    SEARCH_BASE: "./"
".shellcheck_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: registry.gitlab.com/akontainers/shellcheck:0.10.0@sha256:2c9cb7b5182069bf8040dee539c2de952139c8c3d2b83ffc08b7c0428e871e5e
  script:
    - shellcheck "${SHELL_FILE}"
  variables:
    SHELL_FILE: main.sh
".shellcheck_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: registry.gitlab.com/akontainers/shellcheck:0.10.0@sha256:2c9cb7b5182069bf8040dee539c2de952139c8c3d2b83ffc08b7c0428e871e5e
  script:
    - shellcheck-find.sh "${SEARCH_BASE}"
  variables:
    SEARCH_BASE: "./"
Lint renovate config:
  stage: lint
  interruptible: true
  extends: ".renovate_find_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - find "${SEARCH_BASE}" -name '*renovate.json' -type f -print0 | xargs -0 -I {} sh -c 'export RENOVATE_CONFIG_FILE={}; renovate-config-validator'
  variables:
    SEARCH_BASE: "./"
stages:
  - ".pre"
  - lint
  - ".post"
[0m
[90m2025-07-31T09:09:38Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/nejc/renovate-runner
[90m2025-07-31T09:09:38Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:39
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.14.0@sha256:b15b9c9a5417972b9cef1fd66f9cfaeaa831efd6fb4df8037deb0d4575aa9c11
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.14.0@sha256:b15b9c9a5417972b9cef1fd66f9cfaeaa831efd6fb4df8037deb0d4575aa9c11
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:38Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vito-templates/renovate-bot
[90m2025-07-31T09:09:38Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
".lint_template":
  stage: lint
  interruptible: true
".renovate_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - renovate-config-validator
".renovate_strict_lint_template":
  stage: lint
  interruptible: true
  extends: ".renovate_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - renovate-config-validator --strict
".renovate_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".renovate_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - find "${SEARCH_BASE}" -name '*renovate.json' -type f -print0 | xargs -0 renovate-config-validator
  variables:
    SEARCH_BASE: "./"
".renovate_strict_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".renovate_find_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - find "${SEARCH_BASE}" -name '*renovate.json' -type f -print0 | xargs -0 renovate-config-validator --strict
  variables:
    SEARCH_BASE: "./"
".hadolint_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: registry.gitlab.com/vito-containers/hadolint:2.12.0@sha256:aeec62be1791d9b915024c2032ed4c00582f89405a70c74d2561e105c1b7b0c0
  script:
    - hadolint --format gitlab_codeclimate "$DOCKERFILE" > gl-code-quality-report.json
  variables:
    DOCKERFILE: Dockerfile
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
".hadolint_find_lint_template":
  stage: lint
  interruptible: true
  extends: ".hadolint_lint_template"
  image: registry.gitlab.com/vito-containers/hadolint:2.12.0@sha256:aeec62be1791d9b915024c2032ed4c00582f89405a70c74d2561e105c1b7b0c0
  script:
    - find "$SEARCH_BASE" \( -name '[Dd]ockerfile' -o -name '[Cc]ontainerfile' -o -name '*.[Dd]ockerfile' -o -name '*.[Cc]ontainerfile' -o -name '[Dd]ockerfile.*' -o -name '[Cc]ontainerfile.*' \) -type f -print0 | xargs -0 hadolint --format gitlab_codeclimate > gl-code-quality-report.json
  variables:
    DOCKERFILE: Dockerfile
    SEARCH_BASE: "./"
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
".docker_compose_lint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: docker:28.3.3@sha256:852ddc126f12563e1a4460bf2ae5cf71b07500bedaf235e62dcf77a41adb0e57
  script:
    - docker-compose config --no-interpolate -q
Lint default renovate config:
  stage: lint
  interruptible: true
  extends: ".renovate_strict_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - renovate-config-validator --strict
  variables:
    RENOVATE_CONFIG_FILE: default.json
Lint renovate configs:
  stage: lint
  interruptible: true
  extends: ".renovate_strict_find_lint_template"
  image: renovate/renovate:41.43.5@sha256:dcf4c5b73b64282845aa055b7eeddf6052aa4cd6f7c9054b0d3058b05dc23db1
  script:
    - find "${SEARCH_BASE}" -name '*renovate.json' -type f -print0 | xargs -0 renovate-config-validator --strict
  variables:
    SEARCH_BASE: "./"
stages:
  - ".pre"
  - lint
  - ".post"
[0m
[90m2025-07-31T09:09:38Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/vitoyucepi/nginx-flv-renovate
[90m2025-07-31T09:09:38Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
variables:
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:8"
  CS_SCHEMA_MODEL: 15
  DOCKER_TLS_CERTDIR: "/certs"
  PROJECT_TITLE: NGINX FLV Container Image
  PROJECT_DESCRIPTION: NGINX with nginx-http-flv-module
  PROJECT_AUTHORS: Vitoyucepi <vitoyucepi@cock.li>
  PROJECT_VENDOR: Vitoyucepi
  PROJECT_URL: "${CI_PROJECT_URL}"
  PROJECT_DOC_URL: ''
  PROJECT_VCS_URL: "${CI_PROJECT_URL}"
  PROJECT_VCS_REF: "${CI_COMMIT_SHA}"
  PROJECT_LICENSES: ''
container_scanning:
  variables:
    CONTAINER_SCANNING_DISABLED: 'true'
    GIT_STRATEGY: none
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: test
  allow_failure: true
  artifacts:
    access: developer
    reports:
      container_scanning:
        - gl-container-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-container-scanning-report.json
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  script:
    - gtcs scan
  rules:
    - if: "$CONTAINER_SCANNING_DISABLED == 'true' || $CONTAINER_SCANNING_DISABLED == '1'"
      when: never
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_GITLAB_FIPS_MODE == "true" && $CS_ANALYZER_IMAGE !~ /-(fips|ubi)\z/
      variables:
        CS_IMAGE_SUFFIX: "-fips"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $AST_ENABLE_MR_PIPELINES == "true" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_GITLAB_FIPS_MODE == "true" && $CS_ANALYZER_IMAGE !~ /-(fips|ubi)\z/
      variables:
        CS_IMAGE_SUFFIX: "-fips"
    - if: "$CI_COMMIT_BRANCH"
  extends:
    - ".disable_conainer_scanning"
".docker_template":
  image: docker:stable@sha256:fd4d028713fd05a1fb896412805daed82c4a0cc84331d8dad00cb596d7ce3e3a
  services:
    - docker:stable-dind@sha256:4972457c6a8a4309f9796fc3c8fd288923045ba0e214c102d92b70be99e249d1
  interruptible: true
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/build"
    CONTAINER_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_ROOT: "./containers/${BUILD_TAG}"
".build_docker_template":
  image: docker:stable@sha256:fd4d028713fd05a1fb896412805daed82c4a0cc84331d8dad00cb596d7ce3e3a
  services:
    - docker:stable-dind@sha256:4972457c6a8a4309f9796fc3c8fd288923045ba0e214c102d92b70be99e249d1
  interruptible: true
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/build"
    CONTAINER_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_ROOT: "./containers/${BUILD_TAG}"
  extends: ".docker_template"
  stage: build
  script:
    - docker build --pull --label "org.opencontainers.image.created=${CI_PIPELINE_CREATED_AT}" --label "org.opencontainers.image.authors=${PROJECT_AUTHORS}" --label "org.opencontainers.image.url=${PROJECT_URL}" --label "org.opencontainers.image.documentation=${PROJECT_DOC_URL}" --label "org.opencontainers.image.source=${PROJECT_VCS_URL}" --label "org.opencontainers.image.version=${PROJECT_VERSION}" --label "org.opencontainers.image.revision=${PROJECT_VCS_REF}" --label "org.opencontainers.image.vendor=${PROJECT_VENDOR}" --label "org.opencontainers.image.licenses=${PROJECT_LICENSES}" --label "org.opencontainers.image.title=${PROJECT_TITLE}" --label "org.opencontainers.image.description=${PROJECT_DESCRIPTION}" --label "org.label-schema.schema-version=1.0" --label "org.label-schema.build-date=${CI_PIPELINE_CREATED_AT}" --label "org.label-schema.name=${PROJECT_TITLE}" --label "org.label-schema.description=${PROJECT_DESCRIPTION}" --label "org.label-schema.usage=${PROJECT_DOC_URL}" --label "org.label-schema.url=${PROJECT_URL}" --label "org.label-schema.vcs-url=${PROJECT_VCS_URL}" --label "org.label-schema.vcs-ref=${PROJECT_VCS_REF}" --label "org.label-schema.vendor=${PROJECT_VENDOR}" --label "org.label-schema.version=${PROJECT_VERSION}" -t "${CONTAINER_IMAGE}:${CONTAINER_TAG}" "${CONTAINER_ROOT}"
    - docker push "${CONTAINER_IMAGE}:${CONTAINER_TAG}"
".publish_docker_template":
  image: docker:stable@sha256:fd4d028713fd05a1fb896412805daed82c4a0cc84331d8dad00cb596d7ce3e3a
  services:
    - docker:stable-dind@sha256:4972457c6a8a4309f9796fc3c8fd288923045ba0e214c102d92b70be99e249d1
  interruptible: true
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/build"
    CONTAINER_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_ROOT: "./containers/${BUILD_TAG}"
  extends: ".docker_template"
  stage: publish
  script:
    - docker pull "${CONTAINER_IMAGE}:${CONTAINER_TAG}"
    - docker tag "${CONTAINER_IMAGE}:${CONTAINER_TAG}" "${CI_REGISTRY_IMAGE}:${PUBLISH_TAG}";
    - docker push "${CI_REGISTRY_IMAGE}:${PUBLISH_TAG}";
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
".container_scanning":
  variables:
    CONTAINER_SCANNING_DISABLED: 'true'
    GIT_STRATEGY: fetch
    DOCKERFILE_PATH: "./containers/${BUILD_TAG}/Dockerfile"
    CI_APPLICATION_REPOSITORY: "${CI_REGISTRY_IMAGE}/build"
    CI_APPLICATION_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: test
  allow_failure: true
  artifacts:
    access: developer
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: "**/gl-sbom-*.cdx.json"
    paths:
      - gl-container-scanning-report.json
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  script:
    - gtcs scan
  rules:
    - if: "($CI_MERGE_REQUEST_IID || $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $BUILD_TAG && $GITLAB_FEATURES =~ /\\bcontainer_scanning\\b/"
  extends: container_scanning
  interruptible: true
".disable_conainer_scanning":
  variables:
    CONTAINER_SCANNING_DISABLED: 'true'
".lint_template":
  stage: lint
  interruptible: true
".hadolint_template":
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: hadolint/hadolint:v2.4.1-alpine@sha256:2027453e9c48a2dd940a1bb873299975fd81b11fe309f86b8d3e9b7300c0b99f
  script:
    - find "${DOCKERFILE_PATH}" \( -name 'Dockerfile' -o -name '*.Dockerfile' \) -type f | xargs hadolint
  variables:
    DOCKERFILE_PATH: "./containers/${BUILD_TAG}"
Lint renovate config:
  stage: lint
  interruptible: true
  extends: ".lint_template"
  image: renovate/renovate:slim@sha256:19bf3a72d5c9a1f2c49269f968f40a6a2d0014f1040511673dcfd1d8488b0581
  script:
    - renovate-config-validator
stages:
  - ".pre"
  - lint
  - build
  - publish
  - test
  - ".post"
Lint dockerfiles 1.20:
  stage: lint
  interruptible: true
  extends: ".hadolint_template"
  image: hadolint/hadolint:v2.4.1-alpine@sha256:2027453e9c48a2dd940a1bb873299975fd81b11fe309f86b8d3e9b7300c0b99f
  script:
    - find "${DOCKERFILE_PATH}" \( -name 'Dockerfile' -o -name '*.Dockerfile' \) -type f | xargs hadolint
  variables:
    DOCKERFILE_PATH: "./containers/${BUILD_TAG}"
    BUILD_TAG: '1.20'
Build container image 1.20:
  image: docker:stable@sha256:fd4d028713fd05a1fb896412805daed82c4a0cc84331d8dad00cb596d7ce3e3a
  services:
    - docker:stable-dind@sha256:4972457c6a8a4309f9796fc3c8fd288923045ba0e214c102d92b70be99e249d1
  interruptible: true
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/build"
    CONTAINER_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_ROOT: "./containers/${BUILD_TAG}"
    BUILD_TAG: '1.20'
  extends: ".build_docker_template"
  stage: build
  script:
    - docker build --pull --label "org.opencontainers.image.created=${CI_PIPELINE_CREATED_AT}" --label "org.opencontainers.image.authors=${PROJECT_AUTHORS}" --label "org.opencontainers.image.url=${PROJECT_URL}" --label "org.opencontainers.image.documentation=${PROJECT_DOC_URL}" --label "org.opencontainers.image.source=${PROJECT_VCS_URL}" --label "org.opencontainers.image.version=${PROJECT_VERSION}" --label "org.opencontainers.image.revision=${PROJECT_VCS_REF}" --label "org.opencontainers.image.vendor=${PROJECT_VENDOR}" --label "org.opencontainers.image.licenses=${PROJECT_LICENSES}" --label "org.opencontainers.image.title=${PROJECT_TITLE}" --label "org.opencontainers.image.description=${PROJECT_DESCRIPTION}" --label "org.label-schema.schema-version=1.0" --label "org.label-schema.build-date=${CI_PIPELINE_CREATED_AT}" --label "org.label-schema.name=${PROJECT_TITLE}" --label "org.label-schema.description=${PROJECT_DESCRIPTION}" --label "org.label-schema.usage=${PROJECT_DOC_URL}" --label "org.label-schema.url=${PROJECT_URL}" --label "org.label-schema.vcs-url=${PROJECT_VCS_URL}" --label "org.label-schema.vcs-ref=${PROJECT_VCS_REF}" --label "org.label-schema.vendor=${PROJECT_VENDOR}" --label "org.label-schema.version=${PROJECT_VERSION}" -t "${CONTAINER_IMAGE}:${CONTAINER_TAG}" "${CONTAINER_ROOT}"
    - docker push "${CONTAINER_IMAGE}:${CONTAINER_TAG}"
Publish container image 1.20:
  image: docker:stable@sha256:fd4d028713fd05a1fb896412805daed82c4a0cc84331d8dad00cb596d7ce3e3a
  services:
    - docker:stable-dind@sha256:4972457c6a8a4309f9796fc3c8fd288923045ba0e214c102d92b70be99e249d1
  interruptible: true
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/build"
    CONTAINER_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_ROOT: "./containers/${BUILD_TAG}"
    BUILD_TAG: '1.20'
  extends: ".publish_docker_template"
  stage: publish
  script:
    - docker pull "${CONTAINER_IMAGE}:${CONTAINER_TAG}"
    - docker tag "${CONTAINER_IMAGE}:${CONTAINER_TAG}" "${CI_REGISTRY_IMAGE}:${PUBLISH_TAG}";
    - docker push "${CI_REGISTRY_IMAGE}:${PUBLISH_TAG}";
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  parallel:
    matrix:
      - PUBLISH_TAG:
          - 1.20.0
          - '1.20'
          - stable
Container scanning 1.20:
  variables:
    CONTAINER_SCANNING_DISABLED: 'true'
    GIT_STRATEGY: fetch
    DOCKERFILE_PATH: "./containers/${BUILD_TAG}/Dockerfile"
    CI_APPLICATION_REPOSITORY: "${CI_REGISTRY_IMAGE}/build"
    CI_APPLICATION_TAG: "${BUILD_TAG}-${CI_COMMIT_SHORT_SHA}"
    BUILD_TAG: '1.20'
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: test
  allow_failure: true
  artifacts:
    access: developer
    reports:
      container_scanning:
        - gl-container-scanning-report.json
      cyclonedx:
        - "**/gl-sbom-*.cdx.json"
    paths:
      - gl-container-scanning-report.json
      - gl-dependency-scanning-report.json
      - "**/gl-sbom-*.cdx.json"
  dependencies: []
  script:
    - gtcs scan
  rules:
    - if: "($CI_MERGE_REQUEST_IID || $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $BUILD_TAG && $GITLAB_FEATURES =~ /\\bcontainer_scanning\\b/"
  extends: ".container_scanning"
  interruptible: true
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/delta10/renovate
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate --autodiscover=true --onboarding=false --autodiscover-filter=delta10/*
    - renovate --autodiscover=true --onboarding=false --autodiscover-filter=purmerend/*
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mtrue [36murl=[0mhttps://gitlab.com/renovate-bot/renovate-runner
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS: default.json .gitlab/renovate.json
  RENOVATE_X_SQLITE_PACKAGE_CACHE: true
  RENOVATE_LOG_LEVEL: debug
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - when: never
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate-config-validator:
  stage: test
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate-config-validator $RENOVATE_CONFIG_VALIDATOR_EXTRA_FLAGS
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
stages:
  - ".pre"
  - test
  - deploy
  - release
  - ".post"
workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ /^renovate\\//"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\//
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
renovate:dry-run:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  variables:
    RENOVATE_DRY_RUN: full
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
lint:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run prettier
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
release:
  image: ghcr.io/containerbase/node:22.17.1@sha256:e2df4cdcea2d202f8f6aa298df0cf80fe07d824965513573478d1bb3c3d99f63
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  variables:
    GIT_AUTHOR_EMAIL: bot@renovateapp.com
    GIT_COMMITTER_EMAIL: bot@renovateapp.com
    GIT_DEPTH: '0'
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git config --global --add safe.directory $PWD
  script:
    - npx --no-install semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/MindTooth/renovate-runner
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/renestalder-hq/infrastructure/renovate
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
renovate:dry-run:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - changes:
        - ".gitlab-ci.yml"
      when: always
    - when: manual
  script:
    - renovate --dry-run=true $RENOVATE_EXTRA_FLAGS
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/kevincox/renovate-runner
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: "--autodiscover=true --autodiscover-filter=kevincox/*"
  RENOVATE_ONBOARDING: 'true'
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/monochromata-de/renovate-runner
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lazy-val/renovate-bot
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
image: docker:latest
services:
  - docker:dind
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  only:
    - master
  script:
    - 'docker run -e RENOVATE_TOKEN="$RENOVATE_TOKEN" -e GITHUB_COM_TOKEN="$GITHUB_COM_TOKEN" -e RENOVATE_ENDPOINT="$RENOVATE_ENDPOINT" -e GITLAB_IGNORE_REPO_URL=yes -v $PWD/config.js:/usr/src/app/config.js renovate/renovate

'
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mtrue [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/commonground/core/renovate
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
  RENOVATE_EXTRA_FLAGS: --autodiscover=true --onboarding=true --autodiscover-filter="commonground/{nlx,core,don,haven,fsc}/**"
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate-v40"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
  tags:
    - commonground-k8s-runners
  timeout: 90 minutes
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gperdomor/renovate-config
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_TAG"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
variables:
  LOG_LEVEL: debug
preset:
  image: node:16.8.0-alpine
  timeout: 10m
  parallel:
    matrix:
      - FILE:
          - default
          - renovate-config
  variables:
    RENOVATE_CONFIG_FILE: "${FILE}.json"
  script:
    - echo "testing ${FILE}"
    - npx -p renovate renovate-config-validator
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/NishantTyagi/renovate-practice
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
image: docker:latest
services:
  - docker:dind
renovate:
  stage: build
  script:
    - docker run -e RENOVATE_TOKEN="$GITLAB_TOKEN" -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:19 $(cat repositories.txt | xargs)
  only:
    - master
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/sandra.tatarevicova2/renovate-test-source-repo
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
renovate:
  stage: renovate
  image: renovate/renovate:24.10.4
  variables:
    RENOVATE_TOKEN: "$GITLAB_API_TOKEN"
    RENOVATE_PLATFORM: gitlab
  script:
    - LOG_LEVEL=debug renovate sandra.tatarevicova2/renovate-test-target-repo
[0m
[90m2025-07-31T09:09:39Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pheidotting/renovate
[90m2025-07-31T09:09:39Z[0m [32mINF[0m [1m
image: docker:latest
services:
  - docker:dind
renovate:
  stage: build
  script:
    - docker run -e RENOVATE_TOKEN="$GITLAB_TOKEN_GEZINSAPP" -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:39.20 $(cat repositorie_gezinsapp.txt | xargs)
    - docker run -e RENOVATE_TOKEN="$GITLAB_TOKEN_JARVIS" -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:39.20 $(cat repositorie_jarvis.txt | xargs)
  only:
    - master
[0m
[90m2025-07-31T09:09:40Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/hitch-bot/renovate-runner
[90m2025-07-31T09:09:40Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:recommended"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: enabled
  LOG_FILE: renovate-log.ndjson
  LOG_FILE_LEVEL: debug
  CI_RENOVATE_IMAGE: ghcr.io/renovatebot/renovate:41
".renovate":
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
renovate:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - renovate/cache/renovate/repository/
  image:
    name: "${CI_RENOVATE_IMAGE}"
    pull_policy: always
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  extends: ".renovate"
  stage: deploy
  resource_group: production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$LOG_FILE"
[0m
[90m2025-07-31T09:09:41Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/lucaskoontz/renovate-bot
[90m2025-07-31T09:09:41Z[0m [32mINF[0m [1m
variables:
  RENOVATE_BASE_DIR: "$CI_PROJECT_DIR/renovate"
  RENOVATE_ENDPOINT: "$CI_API_V4_URL"
  RENOVATE_PLATFORM: gitlab
  RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
  RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
  RENOVATE_OPTIMIZE_FOR_DISABLED: 'true'
  RENOVATE_REPOSITORY_CACHE: 'false'
  RENOVATE_REQUIRE_CONFIG: 'true'
  RENOVATE_ONBOARDING: 'false'
  RENOVATE_IGNORE_PR_AUTHOR: 'true'
  RENOVATE_EXTENDS: github>whitesource/merge-confidence:beta
  RENOVATE_LOG_FILE: renovate-log.ndjson
  RENOVATE_LOG_FILE_LEVEL: debug
  LOG_LEVEL: debug
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
default:
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
renovate:
  stage: deploy
  resource_group: production
  only:
    - schedules
  script:
    - renovate $RENOVATE_EXTRA_FLAGS
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - "$RENOVATE_LOG_FILE"
image: renovate/renovate:25.36.0-slim@sha256:e123c637504798484e07d2ad9bb4c70c681efc0dd0137a0abd3b61098c6ca09c
services:
  - docker:20.10.6-dind@sha256:aa1e1fab842a35f16cf6e8fcb82b77b29be46f6aa8cd0fe69db0908940256be7
[0m
[90m2025-07-31T09:09:41Z[0m [32mINF[0m [1mFetched projects page[0m [36mcurrentPage=[0m8
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/Tristar666/renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ywtstewart/renovate-dependency-manager
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/sarunint/sarunint-renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/schriusty/renovate-bot-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/solidnerd/renovate-docker-base
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zharinov/renovate-test-maven
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/haynes/renovate_example
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/shub1nk/test-renovate-2
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pipct/renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/andrew.gies.axiom/renovate-stability-repro
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/andrew.gies.axiom/renovate-double-pipeline
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/pavel.kutac/renovate-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zharinov/renovate-reopen-x
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/vizworx/public/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rxap/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bluenick2k17/renovate-trial
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-test-dotnet
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jonohill/renovate-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jjagusch/renovatebot-test-project
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/brucebentley/renovate-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/jjagusch/renovatebot-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/momentumstudio/renovate-grouping-bug
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mikebryant/renovate-test-changelogjson
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/html-validate/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/zharinov/renovate-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mishka-assistant-renovate/mishka-assistant-renovate-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kanjieater/renovate-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gitlab-org/frontend/renovate-gitlab-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-include-consumer
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hesstobi/renovate-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-include-provider
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/monochromata-de/renovate-config-presets
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/gyarasu/renovate-sample
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/minukood/gitlab/gitlab-renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/micheelengronne/renovatebot-debug-postupgradetask
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mjrider/test-renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/slauger/renovate-submodule-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/tj2point0/renovate-testing
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/souravdasslg95/renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/hugo-automation-test/renovate-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/bilby91/renovate-ruby-source-line-issue
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/mikebryant/include-renovate-example
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/larry1123-builds/meta/renovate
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/ingo-steinke-sevenval/renovate-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/joshua-avalon/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/kayoub5/renovate-node-test
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/openrail/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/haynes/renovatetest2
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/leipert-projects/renovate-gitlab-bot
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/IlyaSavchuk/renovate_close
[90m2025-07-31T09:09:47Z[0m DBG Check project [36murl=[0mhttps://gitlab.com/rtohm/renovate-config
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:47Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/hesstobi/renovate-bot
[90m2025-07-31T09:09:47Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - check
  - run
  - ".post"
".renovate_base":
  image:
    name: renovate/renovate:37.89.0
    entrypoint:
      - ''
  variables:
    RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/config.js"
    RENOVATE_REPOSITORY_CACHE: 'true'
    LOG_LEVEL: debug
    RENOVATE_TOKEN: __token__
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
check:settings:
  image:
    name: renovate/renovate:37.89.0
    entrypoint:
      - ''
  variables:
    RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/config.js"
    RENOVATE_REPOSITORY_CACHE: 'true'
    LOG_LEVEL: debug
    RENOVATE_TOKEN: __token__
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends:
    - ".renovate_base"
  stage: check
  script:
    - |
      for file in *.json; do
        echo "Validating ${file}"
        cp renovate.json renovate.backup
        cp "${file}" renovate.json || true
        renovate-config-validator
        mv renovate.backup renovate.json
      done
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
renovate:
  image:
    name: renovate/renovate:37.89.0
    entrypoint:
      - ''
  variables:
    RENOVATE_CONFIG_FILE: "$CI_PROJECT_DIR/config.js"
    RENOVATE_REPOSITORY_CACHE: 'true'
    LOG_LEVEL: debug
    RENOVATE_TOKEN: __token__
  cache:
    key: "${CI_COMMIT_REF_SLUG}-renovate"
    paths:
      - "$CI_PROJECT_DIR/renovate"
  extends:
    - ".renovate_base"
  stage: run
  resource_group: renovate-schedule
  script:
    - renovate | tee renovate.log
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  retry:
    max: 2
    when:
      - runner_system_failure
[0m
[90m2025-07-31T09:09:47Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bluenick2k17/renovate-trial
[90m2025-07-31T09:09:47Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/html-validate/renovate-config
[90m2025-07-31T09:09:47Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/andrew.gies.axiom/renovate-double-pipeline
[90m2025-07-31T09:09:47Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pavel.kutac/renovate-bot
[90m2025-07-31T09:09:47Z[0m [32mINF[0m [1m
update_repositories:
  image: renovate/renovate:41.17.2
  script:
    - docker-entrypoint.sh
  artifacts:
    when: always
    paths:
      - renovate.log.json
  only:
    - schedules
[0m
[90m2025-07-31T09:09:48Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/fgreinacher/renovate-include-consumer
[90m2025-07-31T09:09:48Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mtrue [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/pipct/renovate
[90m2025-07-31T09:09:48Z[0m [32mINF[0m [1m
renovate:
  variables:
    RENOVATE_TOKEN: "$GITLAB_TOKEN"
    GITHUB_COM_TOKEN: "$GITHUB_TOKEN"
    LOG_LEVEL: debug
  image:
    name: registry.gitlab.com/pipct/renovate:latest
    entrypoint:
      - ''
  script:
    - renovate
  only:
    - schedules
build-docker:
  image: docker:19.03.15
  services:
    - docker:19.03.15-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - master
    - push
[0m
[90m2025-07-31T09:09:48Z[0m DBG .gitlab-ci.yaml [36mvalid=[0mtrue [36mwarnings=[0m
[90m2025-07-31T09:09:49Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/minukood/gitlab/gitlab-renovate
[90m2025-07-31T09:09:49Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - renovate
  - ".post"
".renovate_template":
  stage: renovate
  image:
    name: renovate/renovate:latest
    entrypoint:
      - ''
dry-run:
  stage: renovate
  image:
    name: renovate/renovate:latest
    entrypoint:
      - ''
  extends: ".renovate_template"
  only:
    refs:
      - main
  except:
    refs:
      - schedules
      - web
  script: renovate/renovate.sh --dry-run=full
renovate:
  stage: renovate
  image:
    name: renovate/renovate:latest
    entrypoint:
      - ''
  extends: ".renovate_template"
  only:
    refs:
      - schedules
      - web
  script: renovate/renovate.sh
[0m
[90m2025-07-31T09:09:49Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/bilby91/renovate-ruby-source-line-issue
[90m2025-07-31T09:09:49Z[0m [32mINF[0m [1m
image: renovate/renovate:19.109.0
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
services:
  - docker:18.09.8-dind
renovate-run:on-schedule:
  script:
    - node /usr/src/app/dist/renovate.js --binary-source=docker
[0m
[90m2025-07-31T09:09:49Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/leipert-projects/renovate-gitlab-bot
[90m2025-07-31T09:09:49Z[0m [32mINF[0m [1m
variables:
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_SHORT_SHA"
stages:
  - ".pre"
  - run
  - ".post"
beep-boop:
  image: docker:stable
  stage: run
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_CLI_EXPERIMENTAL: enabled
  services:
    - docker:stable-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      if docker manifest inspect $DOCKER_IMAGE >/dev/null; then
        echo "Image already exists"
      else
        docker build . --tag "$DOCKER_IMAGE" && docker push "$DOCKER_IMAGE"
      fi
    - docker run --rm -t -e RENOVATE_TOKEN -e CI_PROJECT_PATH -e CI_PROJECT_URL -e CI_COMMIT_REF_SLUG "$DOCKER_IMAGE" sh /workdir/run-renovate.sh
[0m
[90m2025-07-31T09:09:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/haynes/renovate_example
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1m
image:
  name: renovate/renovate:latest
  entrypoint:
    - ''
renovate:
  variables:
    RENOVATE_CONFIG_FILE: "./config.js"
    LOG_LEVEL: INFO
  script:
    - sed -i "s/artifactoryusername/$ARTIFACTORY_USER/g" config.js
    - sed -i "s/artifactorypassword/$ARTIFACTORY_PWD/g" config.js
    - node /usr/src/app/dist/renovate.js $(cat repositories.txt | xargs)
  tags:
    - docker
    - renovate
[0m
[90m2025-07-31T09:09:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0mprivate [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/gitlab-org/frontend/renovate-gitlab-bot
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1m
fmt:
  stage: forks
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  allow_failure: true
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu fmt
validate:
  stage: forks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull-push
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_IGNORE_INIT_ERRORS: 'true'
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu validate
".plan:detailed_exitcode:warning:false":
  extends:
".plan:detailed_exitcode:warning:true":
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: false
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    exit_codes:
      - 2
  artifacts:
    when: always
plan:
  extends:
    - ".plan:detailed_exitcode:warning:false"
  stage: forks
  environment:
    name: forks
    action: prepare
  resource_group: forks
  artifacts:
    access: none
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/plan.cache"
    reports:
      terraform:
        - "$GITLAB_TOFU_ROOT_DIR/plan.json"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: "$CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - "args=\"\"\nif [ \"false\" == \"true\" ]; then \n  echo \"Planning for a destroy\"\n  args=\"-destroy\"\nfi\n"
    - gitlab-tofu plan $args
  needs:
    - fmt
    - validate
apply:
  stage: forks
  environment:
    name: "$GITLAB_TOFU_STATE_NAME"
    action: start
  resource_group: "$GITLAB_TOFU_STATE_NAME"
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: never
    - when: on_success
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: pull
    paths:
      - "$GITLAB_TOFU_ROOT_DIR/.terraform/"
  variables:
    __CACHE_KEY_HACK: forks
    GITLAB_TOFU_ROOT_DIR: forks
    GITLAB_TOFU_STATE_NAME: forks
    GITLAB_TOFU_APPLY_NO_PLAN: false
    GITLAB_TOFU_PLAN_NAME: plan
    GITLAB_TOFU_VAR_FILE: config.tfvars
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:0.44.0-opentofu1.8.4-alpine"
  script:
    - gitlab-tofu apply
  needs:
    - plan
stages:
  - ".pre"
  - test
  - forks
  - run
  - ".post"
".opentofu:bridge_job_stage:true":
  stage: opentofu
".opentofu:bridge_job_stage:false":
  stage: ".pre"
opentofu:
  stage: ".pre"
  rules:
    - if: '"false" == "false"'
      when: never
    - when: on_success
  extends: ".opentofu:bridge_job_stage:false"
  trigger:
    include:
      - project: components/opentofu
        file: "/templates/validate-plan-apply.yml"
        ref: 0.44.0
        inputs:
          stage_validate: forks
          stage_build: forks
          stage_deploy: forks
          version: 0.44.0
          base_os: alpine
          opentofu_version: 1.8.4
          image_registry_base: "$CI_TEMPLATE_REGISTRY_HOST/components/opentofu"
          image_name: gitlab-opentofu
          image_digest: ''
          job_name_prefix: ''
          root_dir: forks
          state_name: forks
          plan_name: plan
          plan_artifacts_access: none
          var_file: config.tfvars
          fmt_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          validate_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          plan_rules:
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
            - if: "$CI_OPEN_MERGE_REQUESTS"
              when: never
            - if: "$CI_COMMIT_BRANCH"
          apply_rules:
            - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
              when: never
            - when: on_success
          warning_on_non_empty_plan: false
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
variables:
  TF_VAR_gitlab_renovate_bot_token: "$TERRAFORM_TOKEN"
  TF_VAR_gitlab_bot_token: "$GITLAB_TOKEN"
  TF_CLI_ARGS_plan: "-lock=false"
danger-review:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
    - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
    - bundle install
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
danger-review dry-run:
  rules:
    - if: "'false' == 'false'"
      when: never
    - - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  image: ruby:3.3
  stage: test
  needs: []
  allow_failure: false
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - - '[[ -f "Gemfile" ]] || (bundle init && bundle add gitlab-dangerfiles --version "")'
      - '[[ ! -f "Gemfile.lock" ]] || bundle config set --local frozen "true"'
      - bundle install
    - unset DANGER_GITLAB_API_TOKEN
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_URL" != "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL" || -z "${DANGER_GITLAB_API_TOKEN}" ]]; then
        git fetch "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git" "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      fi
    - |
      if [ -z "${DANGER_GITLAB_API_TOKEN}" ]; then
        echo '`DANGER_GITLAB_API_TOKEN` is not set. Skipping CI source GitLab and falling back to "local only git repo".'
        unset GITLAB_CI;
        # We need to base SHA to help danger determine the base commit for this shallow clone.
        bundle exec danger dry_run --fail-on-errors=true --verbose --base="${CI_MERGE_REQUEST_DIFF_BASE_SHA}" --head="${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-$CI_COMMIT_SHA}" --dangerfile="Dangerfile";
      else
        danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10);
        bundle exec danger --fail-on-errors=true --verbose --danger_id="${danger_id}" --dangerfile="Dangerfile";
      fi
  extends: danger-review
workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
default:
  tags:
    - gitlab-org
".node":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
execution-plan:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  variables:
    BASE_IMAGE: "$CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG"
  script:
    - node scripts/orchestrate-child-pipeline.mjs --ci-file .gitlab/child-pipeline/generated.yml --roulette-file renovate/roulette.json
  artifacts:
    paths:
      - renovate/roulette.json
      - ".gitlab/child-pipeline/generated.yml"
execute:
  stage: run
  needs:
    - execution-plan
  variables:
    PARENT_PIPELINE_ID: "$CI_PIPELINE_ID"
  trigger:
    strategy: depend
    include:
      - local: ".gitlab/child-pipeline/entrypoint.yml"
      - artifact: ".gitlab/child-pipeline/generated.yml"
        job: execution-plan
delete-pipelines:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  resource_group: "$CI_COMMIT_REF_SLUG-cleanup"
  script:
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node --experimental-strip-types ./scripts/delete-pipelines.ts
  rules:
    - if: "$DELETE_PIPELINES"
linting:
  image: node:22.13
  stage: test
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  needs: []
  script:
    - yarn run prettier --list-different .
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
".pages":
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".node"
  pages:
    publish: public
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
    - echo "Have a look at $CI_PAGES_URL"
  artifacts:
    paths:
      - public
pages:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
  pages:
    publish: public
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
    - echo "Have a look at $CI_PAGES_URL"
  artifacts:
    paths:
      - public
  needs:
    - execute
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
".review_app":
  pages:
    path_prefix: "${PATH_PREFIX}"
    expire_in: 2 weeks
  environment:
    name: review/${PATH_PREFIX}
    url: "${CI_PAGES_URL}"
    auto_stop_in: 2 weeks
review-app-latest:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
    - ".review_app"
  pages:
    publish: public
    path_prefix: "${PATH_PREFIX}"
    expire_in: 2 weeks
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
    - echo "Have a look at $CI_PAGES_URL"
  artifacts:
    paths:
      - public
  environment:
    name: review/${PATH_PREFIX}
    url: "${CI_PAGES_URL}"
    auto_stop_in: 2 weeks
  needs: []
  variables:
    PATH_PREFIX: latest-${CI_MERGE_REQUEST_IID}
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
      changes:
        - scripts/**/*
        - webapp/**/*
        - ".gitlab-ci.yml"
        - package.json
        - yarn.lock
review-app-mr:
  image: node:22.13
  stage: run
  before_script:
    - yarn install --frozen-lockfile
  extends:
    - ".pages"
    - ".review_app"
  pages:
    publish: public
    path_prefix: "${PATH_PREFIX}"
    expire_in: 2 weeks
  script:
    - curl -O https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json
    - mv roulette.json renovate/
    - node ./scripts/get-renovate-logs.mjs
    - yarn run build
    - cp -r webapp/dist/ public/
    - time find public -type f ! -name "*.bz2" ! -name "*.gz"  -print0 | xargs -0 gzip -f -k
    - echo "Have a look at $CI_PAGES_URL"
  artifacts:
    paths:
      - public
  environment:
    name: review/${PATH_PREFIX}
    url: "${CI_PAGES_URL}"
    auto_stop_in: 2 weeks
  needs:
    - execute
  variables:
    PATH_PREFIX: mr-${CI_MERGE_REQUEST_IID}
    PAGES_FOCUS_ON_CURRENT_PIPELINE: 'true'
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: always
[0m
[90m2025-07-31T09:09:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mfalse [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/ywtstewart/renovate-dependency-manager
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1m
image: docker:latest
services:
  - docker:dind
renovate:
  stage: build
  script:
    - docker run -e GITLAB_TOKEN="$GITLAB_TOKEN" -e GITHUB_TOKEN="$GITHUB_TOKEN" -v $PWD/config.js:/usr/src/app/config.js renovate/renovate:13 $(cat repositories.txt | xargs)
  only:
    - master
[0m
[90m2025-07-31T09:09:50Z[0m [33mWRN[0m [1mIdentified Renovate (bot) configuration[0m [36mhasAutodiscovery=[0mtrue [36mhasAutodiscoveryFilters=[0mfalse [36mhasConfigFile=[0mfalse [36mpipelines=[0menabled [36mselfHostedConfigFile=[0mfalse [36murl=[0mhttps://gitlab.com/mishka-assistant-renovate/mishka-assistant-renovate-bot
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1m
stages:
  - ".pre"
  - Building dependency
  - Testing and building modules
  - Build and publish artifacts
  - Deploy artifacts
  - Publish pages
  - ".post"
".general-environment":
  variables:
    PROJECT_CONFIGURATION: development
  except:
    refs:
      - develop
      - "/^release\\/.*$/"
      - master
      - tags
    variables:
      - "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
".develop-environment":
  variables:
    PROJECT_CONFIGURATION: development
  only:
    refs:
      - develop
  except:
    variables:
      - "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
".test-environment":
  variables:
    PROJECT_CONFIGURATION: test
  only:
    refs:
      - "/^release\\/.*$/"
  except:
    variables:
      - "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
".stage-environment":
  variables:
    PROJECT_CONFIGURATION: stage
  only:
    refs:
      - master
  except:
    variables:
      - "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
".production-environment":
  variables:
    PROJECT_CONFIGURATION: production
  only:
    variables:
      - "$RELEASE_BRANCH == $CI_COMMIT_REF_NAME"
  except:
    variables:
      - "$CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/"
".renovate":
  stage: Deploy artifacts
  image: "${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/renovate/renovate:31.81.3"
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_TOKEN: "${GITLAB_API_TOKEN}"
    GITHUB_COM_TOKEN: "${GITHUB_COM_READONLY_TOKEN}"
    RENOVATE_AUTODISCOVER: 'false'
    RENOVATE_CONFIG_FILE: "./config.js"
    RENOVATE_LOG_LEVEL: info
  artifacts:
    name: renovate-log
    paths:
      - renovate.log
    expire_in: 3 days
Run Renovate Bot:
  stage: Deploy artifacts
  image: "${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/renovate/renovate:31.81.3"
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_TOKEN: "${GITLAB_API_TOKEN}"
    GITHUB_COM_TOKEN: "${GITHUB_COM_READONLY_TOKEN}"
    RENOVATE_AUTODISCOVER: 'false'
    RENOVATE_CONFIG_FILE: "./config.js"
    RENOVATE_LOG_LEVEL: info
    RENOVATE_DRY_RUN: 'false'
  artifacts:
    name: renovate-log
    paths:
      - renovate.log
    expire_in: 3 days
  extends:
    - ".renovate"
  script:
    - LOG_LEVEL=${RENOVATE_LOG_LEVEL} renovate
  only:
    refs:
      - schedules
Dry Run Renovate Bot:
  stage: Deploy artifacts
  image: "${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/renovate/renovate:31.81.3"
  variables:
    RENOVATE_PLATFORM: gitlab
    RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
    RENOVATE_TOKEN: "${GITLAB_API_TOKEN}"
    GITHUB_COM_TOKEN: "${GITHUB_COM_READONLY_TOKEN}"
    RENOVATE_AUTODISCOVER: 'false'
    RENOVATE_CONFIG_FILE: "./config.js"
    RENOVATE_LOG_LEVEL: info
    RENOVATE_DRY_RUN: 'true'
  artifacts:
    name: renovate-log
    paths:
      - renovate.log
    expire_in: 3 days
  extends:
    - ".renovate"
  script:
    - renovate-config-validator
    - LOG_LEVEL=${RENOVATE_LOG_LEVEL} renovate
  only:
    changes:
      - ".gitlab-ci.yml"
  except:
    refs:
      - master
      - tags
      - schedules
[0m
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1mFetched all projects[0m
[90m2025-07-31T09:09:50Z[0m [32mINF[0m [1mDone, Bye Bye 🏳️‍🌈🔥[0m
